!SESSION 2023-03-10 09:16:26.802 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file X:\Users\Xander\GitHub\cffw-java\.metadata\.bak_5.log
Created Time: 2023-03-11 15:16:10.029

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-03-11 15:16:10.029
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-03-11 15:16:10.068
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Conflict;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.SwingWorker;

import Trooper.Trooper;
import Trooper.generateSquad;
import Unit.Unit;
import UtilityClasses.DiceRoller;
import UtilityClasses.ShootUtility;

import javax.swing.JButton;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;

import javax.swing.JSpinner;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.JList;
import javax.swing.JCheckBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionListener;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.util.SystemOutLogger;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import Actions.ReactionToFireWindow;
import Actions.Spot;
import Actions.TargetedFire;
import Company.Formation.LeaderType;
import Hexes.Building;
import Hexes.Hex;
import Injuries.Injuries;
import Injuries.ResolveHits;
import Items.Weapons;
import Shoot.Shoot;

import javax.swing.event.ListSelectionEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class BulkWindow {

	private String path = System.getProperty("user.dir") + "\\";
	// My vars

	public boolean targetFocusLock = false;
	public boolean individualListLock = false;
	public GameWindow gameWindow;
	public Game game;
	public ArrayList<BulkTrooper> bulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<BulkTrooper> selectedBulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<Unit> targetUnits = new ArrayList<Unit>();
	public Unit unit;
	public ArrayList<String> callsigns = new ArrayList<String>();
	public OpenUnit openUnit;

	// Jframe gui vars
	private JFrame frame;
	private JTextField textFieldDC;
	private JList individualsList;
	private JComboBox comboBoxTargetUnits;
	private JCheckBox chckbxFreeAction;
	private JSpinner caBonusSpinner;
	private JSpinner spinnerEALBonus;
	private JSpinner spinnerPercentBonus;
	private JComboBox comboBoxAimTime;
	private JCheckBox chckbxFullAuto;
	private JLabel lblAimTime;
	private JLabel lblTn;
	private JLabel lblPossibleShots;
	private JCheckBox chckbxLaser;
	private JCheckBox chckbxIrLaser;
	private JCheckBox chckbxThermals;
	private JCheckBox chckbxWeaponLights;
	private JCheckBox chckbxManualStance;
	private JComboBox comboBoxStance;
	private JSpinner spinnerNVGGen;
	private JTextField textFieldPen;
	private JComboBox comboBoxOF;
	private JComboBox comboBoxSpottingUnits;
	private JComboBox comboBoxScanArea;
	private JComboBox comboBoxAddUnit;
	private JList listSpottedUnitsArray;
	private JComboBox targetedFireFocus;
	private JCheckBox chckbxUnspottable;
	private JSpinner spinnerSpottingDifficulty;
	private JSpinner spinnerConsecutiveEALBonus;
	private JComboBox comboBoxWeapon;
	private JTextField textFieldCallsign;
	private JComboBox comboBoxTargetZone;
	private JComboBox comboBoxBuilding;
	private JComboBox comboBoxGrenadeTargets;
	private JComboBox comboBoxGrenade;
	private JSpinner spinnerGrenadeX;
	private JSpinner spinnerGrenadeY;
	private JSpinner spinnerTargetRoom;
	private JSpinner spinnerTargetFloor;
	private JSpinner spinnerThrowBonus;
	private JSpinner spinnerThrowEALBonus;
	private JSpinner spinnerLauncherBonus;
	private JSpinner spinnerLauncherX;
	private JSpinner spinnerLauncherY;
	private JCheckBox chckbxGuided;

	/**
	 * Create the application.
	 * 
	 * @wbp.parser.constructor
	 */
	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;

		initializeWindow();
		setIndividuals();
		refreshIndividualList();
		setComboBoxes();
	}

	public BulkWindow(ArrayList<Unit> units) {

		this.unit = units.get(0);
		this.gameWindow = GameWindow.gameWindow;
		this.game = GameWindow.gameWindow.game;
		this.openUnit = null;

		ArrayList<String> sides = new ArrayList<>();
		
		ArrayList<Trooper> troopers = new ArrayList<>();

		for (Unit unit : units) {
			if(!sides.contains(unit.side)) {
				sides.add(unit.side);
			}
			
			
			for (Trooper trooper : unit.individuals) {
				troopers.add(trooper);
			}
		}
		
		if(sides.size() > 1) {
			System.out.println("Sort troopers");
			for(Trooper trooper : troopers) {
				trooper.kills = DiceRoller.randInt(0, 9);
			}
			Collections.sort(troopers, new Comparator<Trooper>() {
				   public int compare(Trooper b1, Trooper b2) {
					   
					   System.out.println("b1 CA: "+((b1.combatActions+ b1.sl) - b1.kills)+", b2 CA: "+((b2.combatActions + b2.sl) - b2.kills));
					   if((b1.combatActions+ b1.sl) - b1.kills < (b2.combatActions + b2.sl) - b2.kills)
						   return 1;
					   else if((b1.combatActions+ b1.sl) - b1.kills > (b2.combatActions + b2.sl) - b2.kills)
						   return -1;
					   else 
						   return 0;
				   }
			});
		}
		

		initializeWindow();
		setIndividuals(troopers);
		refreshIndividualList();
		setComboBoxes();
	}
	
	

	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit, ArrayList<Trooper> cqbt) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;
		initializeWindow();
		setIndividuals(cqbt);
		refreshIndividualList();
		setComboBoxes();
	}

	private void initializeWindow() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1113, 712);
		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		frame.setVisible(true);

		// Get the screen size
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Dimension screenSize = toolkit.getScreenSize();
		// Calculate the frame location
		int x = (screenSize.width - frame.getWidth()) / 2;
		int y = (screenSize.height - frame.getHeight()) / 2;

		// Set the new frame location
		frame.setLocation(x, y);

		JButton btnClearSpotted = new JButton("Remove All Spotted");
		btnClearSpotted.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnClearSpotted.setBounds(784, 211, 249, 23);
		btnClearSpotted.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						// System.out.println("Clear Spot1");

						for (Trooper trooper : unit.individuals) {

							trooper.spotted.clear();

						}

						// System.out.println("Clear Spot2");
						return null;
					}

				};

				worker.execute();

			}
		});

		JComboBox comboBox = new JComboBox();
		comboBox.setBounds(784, 149, 143, 20);
		comboBox.setForeground(Color.BLACK);
		// comboBox.setSelectedIndex(0);

		JLabel label = new JLabel("Remove Spotted");
		label.setBounds(782, 123, 226, 31);
		label.setForeground(Color.BLACK);
		label.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton button = new JButton("Remove");
		button.setBounds(944, 148, 89, 23);
		button.setForeground(Color.BLACK);

		JButton button_1 = new JButton("Spot Hex");
		button_1.setBounds(944, 104, 89, 23);
		button_1.setForeground(Color.BLACK);

		JComboBox comboBox_1 = new JComboBox();
		comboBox_1.setBounds(944, 74, 89, 20);
		comboBox_1.setForeground(Color.BLACK);
		// comboBox_1.setSelectedIndex(0);

		JSpinner spinner = new JSpinner();
		spinner.setBounds(882, 105, 40, 20);
		spinner.setForeground(Color.BLACK);

		JSpinner spinner_1 = new JSpinner();
		spinner_1.setBounds(808, 105, 40, 20);
		spinner_1.setForeground(Color.BLACK);

		JLabel label_1 = new JLabel("Y: ");
		label_1.setBounds(858, 100, 30, 31);
		label_1.setForeground(Color.BLACK);
		label_1.setFont(new Font("Calibri", Font.PLAIN, 12));

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 84, 445, 389);
		frame.getContentPane().add(scrollPane);
		individualsList = new JList();
		individualsList.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseMoved(MouseEvent e) {

				JList theList = (JList) e.getSource();
				int index = theList.locationToIndex(e.getPoint());
				if (index > -1) {
					theList.setToolTipText(null);
					String text = "<html>";
					// System.out.println("Target Paint");
					for (Trooper trooper : bulkTroopers.get(index).targetTroopers) {
						text += trooper.findTargetUnit(gameWindow) + ":: " + trooper.number + ":: " + trooper.name;
						// System.out.println("Loop");
						if (!trooper.compareTo(bulkTroopers.get(index).targetTroopers
								.get(bulkTroopers.get(index).targetTroopers.size() - 1)))
							text += "<br>";

					}

					if (text.equals("<html>"))
						theList.setToolTipText(null);
					else
						theList.setToolTipText(text + "</html>");
				}

			}
		});
		individualsList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0) {

				if (arg0.getValueIsAdjusting() || individualsList.getSelectedIndices().length < 1 || individualListLock)
					return;

				selected();

				// System.out.println("Entry Count:
				// "+individualsList.getSelectedValuesList().size());
			}
		});
		
		
		
		individualsList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		scrollPane.setViewportView(individualsList);
		
		
		comboBoxAddUnit = new JComboBox();
		comboBoxAddUnit.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxAddUnit.setSelectedIndex(0);
		comboBoxAddUnit.setBounds(784, 74, 143, 20);
		comboBoxAddUnit.setForeground(Color.BLACK);
		// comboBox_2.setSelectedIndex(0);

		JLabel label_2 = new JLabel("X: ");
		label_2.setBounds(784, 100, 30, 31);
		label_2.setForeground(Color.BLACK);
		label_2.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton btnAddSpotted = new JButton("Add Individual");
		btnAddSpotted.setBounds(784, 180, 115, 23);
		btnAddSpotted.setForeground(Color.BLACK);

		JButton button_3 = new JButton("Add Whole Unit");
		button_3.setBounds(909, 180, 124, 23);
		button_3.setForeground(Color.BLACK);

		JLabel label_3 = new JLabel("Individual");
		label_3.setBounds(944, 43, 143, 31);
		label_3.setForeground(Color.BLACK);
		label_3.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_4 = new JLabel("Unit");
		label_4.setBounds(784, 43, 143, 31);
		label_4.setForeground(Color.BLACK);
		label_4.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_5 = new JLabel("Add Spotted");
		label_5.setBounds(784, 11, 162, 31);
		label_5.setForeground(Color.BLACK);
		label_5.setFont(new Font("Calibri", Font.PLAIN, 14));
		frame.getContentPane().setLayout(null);
		frame.getContentPane().add(btnClearSpotted);
		frame.getContentPane().add(label_5);
		frame.getContentPane().add(label_4);
		frame.getContentPane().add(comboBoxAddUnit);
		frame.getContentPane().add(label_3);
		frame.getContentPane().add(comboBox_1);
		frame.getContentPane().add(btnAddSpotted);
		frame.getContentPane().add(button_3);
		frame.getContentPane().add(spinner_1);
		frame.getContentPane().add(label_2);
		frame.getContentPane().add(label_1);
		frame.getContentPane().add(spinner);
		frame.getContentPane().add(button_1);
		frame.getContentPane().add(comboBox);
		frame.getContentPane().add(label);
		frame.getContentPane().add(button);

		JLabel label_6 = new JLabel("PEN");
		label_6.setForeground(Color.BLACK);
		label_6.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_6.setDoubleBuffered(true);
		label_6.setBounds(784, 311, 30, 31);
		frame.getContentPane().add(label_6);

		textFieldPen = new JTextField();
		textFieldPen.setForeground(Color.BLACK);
		textFieldPen.setColumns(10);
		textFieldPen.setBounds(814, 316, 34, 20);
		frame.getContentPane().add(textFieldPen);

		JLabel label_7 = new JLabel("DC");
		label_7.setForeground(Color.BLACK);
		label_7.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_7.setDoubleBuffered(true);
		label_7.setBounds(858, 311, 30, 31);
		frame.getContentPane().add(label_7);

		textFieldDC = new JTextField();
		textFieldDC.setForeground(Color.BLACK);
		textFieldDC.setColumns(10);
		textFieldDC.setBounds(882, 316, 40, 20);
		frame.getContentPane().add(textFieldDC);

		comboBoxOF = new JComboBox();
		comboBoxOF.setModel(new DefaultComboBoxModel(new String[] { "Open", "Fire" }));
		comboBoxOF.setSelectedIndex(0);
		comboBoxOF.setForeground(Color.BLACK);
		// comboBox_3.setSelectedIndex(0);
		comboBoxOF.setBounds(967, 316, 62, 20);
		frame.getContentPane().add(comboBoxOF);

		JLabel label_8 = new JLabel("O/F");
		label_8.setForeground(Color.BLACK);
		label_8.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_8.setDoubleBuffered(true);
		label_8.setBounds(932, 311, 30, 31);
		frame.getContentPane().add(label_8);

		JButton button_4 = new JButton("Add Injury");
		button_4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					ResolveHits resolveHits = new ResolveHits(trooper);

					Injuries newInjury = resolveHits.getPCHitsManual(Integer.parseInt(textFieldPen.getText()),
							Integer.parseInt(textFieldDC.getText()), comboBoxOF.getSelectedIndex());

					if (newInjury == null) {
						gameWindow.conflictLog.addNewLine("EPEN < 0.5");
					}

				}

			}
		});
		button_4.setForeground(Color.BLACK);
		button_4.setBounds(882, 347, 147, 23);
		frame.getContentPane().add(button_4);

		JComboBox comboBox_4 = new JComboBox();
		comboBox_4.setModel(new DefaultComboBoxModel(new String[] { "Random Loc." }));
		comboBox_4.setSelectedIndex(0);
		comboBox_4.setForeground(Color.BLACK);
		// comboBox_4.setSelectedIndex(0);
		comboBox_4.setBounds(784, 348, 92, 20);
		frame.getContentPane().add(comboBox_4);

		JLabel lblAddInjuries = new JLabel("Add Injuries");
		lblAddInjuries.setForeground(Color.BLACK);
		lblAddInjuries.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblAddInjuries.setBounds(784, 293, 162, 23);
		frame.getContentPane().add(lblAddInjuries);

		listSpottedUnitsArray = new JList();
		listSpottedUnitsArray.setForeground(Color.BLACK);
		listSpottedUnitsArray.setBackground(Color.WHITE);
		listSpottedUnitsArray.setBounds(625, 43, 143, 160);
		frame.getContentPane().add(listSpottedUnitsArray);

		JLabel label_9 = new JLabel("Spotting Units");
		label_9.setForeground(Color.BLACK);
		label_9.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_9.setBounds(625, 11, 369, 31);
		frame.getContentPane().add(label_9);

		spinnerNVGGen = new JSpinner();
		spinnerNVGGen.setForeground(Color.BLACK);
		spinnerNVGGen.setBounds(625, 320, 34, 20);
		frame.getContentPane().add(spinnerNVGGen);

		JLabel label_10 = new JLabel("Gen:");
		label_10.setForeground(Color.BLACK);
		label_10.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10.setBounds(596, 317, 40, 28);
		frame.getContentPane().add(label_10);

		JButton button_2 = new JButton("Add Thermals");
		button_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					trooper.thermalVision = true;

				}

			}
		});
		button_2.setForeground(Color.BLACK);
		button_2.setBounds(669, 319, 97, 23);
		frame.getContentPane().add(button_2);

		JButton button_5 = new JButton("Add NVGs");
		button_5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if ((int) spinnerNVGGen.getValue() < 1 || (int) spinnerNVGGen.getValue() > 5) {
						gameWindow.conflictLog.addNewLine("NVG Gen not a value from 1 to 5.");
						return;
					}

					trooper.nightVision = true;
					trooper.nightVisionEffectiveness = (int) spinnerNVGGen.getValue();

				}

			}
		});
		button_5.setForeground(Color.BLACK);
		button_5.setBounds(479, 322, 114, 23);
		frame.getContentPane().add(button_5);

		JCheckBox checkBox = new JCheckBox("NVGs");
		checkBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!trooper.nightVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have night vision.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.nightVisionInUse = true;
					else
						trooper.nightVisionInUse = false;

				}

			}
		});
		checkBox.setForeground(Color.BLACK);
		checkBox.setFont(new Font("Calibri", Font.BOLD, 12));
		checkBox.setBackground(Color.WHITE);
		checkBox.setBounds(625, 293, 143, 23);
		frame.getContentPane().add(checkBox);

		JButton button_6 = new JButton("Clear");
		button_6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				listSpottedUnitsArray.removeAll();
				callsigns.clear();

				DefaultListModel listSpottedUnits = new DefaultListModel();

				for (int i = 0; i < callsigns.size(); i++) {
					listSpottedUnits.addElement(callsigns.get(i));

				}

				listSpottedUnitsArray.setModel(listSpottedUnits);

			}
		});
		button_6.setForeground(Color.BLACK);
		button_6.setBounds(479, 126, 136, 25);
		frame.getContentPane().add(button_6);

		JButton button_7 = new JButton("Spot All");
		button_7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						ExecutorService es = Executors.newFixedThreadPool(16);
						
						try {
							
							
							
							for (Trooper trooper : getSelectedTroopers()) {

								
								es.submit(() -> {
									// System.out.println("Spot Test All 1");
									spotTestAll(trooper, unit);
									// System.out.println("Spot Test All 2");

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

							}

							es.shutdown();
							
							// refreshTargets();
						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						
						GameWindow.gameWindow.conflictLog.addQueuedText();

					}

				};

				worker.execute();

			}
		});
		button_7.setForeground(Color.BLACK);
		button_7.setBounds(479, 154, 136, 25);
		frame.getContentPane().add(button_7);

		chckbxFreeAction = new JCheckBox("Free Action");
		chckbxFreeAction.setForeground(Color.BLACK);
		chckbxFreeAction.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxFreeAction.setBackground(Color.WHITE);
		chckbxFreeAction.setBounds(84, 57, 97, 27);
		frame.getContentPane().add(chckbxFreeAction);

		comboBoxScanArea = new JComboBox();
		comboBoxScanArea
				.setModel(new DefaultComboBoxModel(new String[] { "60 Degrees", "180 Degrees", "20 Yard Hex" }));
		comboBoxScanArea.setSelectedIndex(0);
		// comboBox_5.setSelectedIndex(0);
		comboBoxScanArea.setForeground(Color.BLACK);
		comboBoxScanArea.setBounds(479, 183, 136, 20);
		frame.getContentPane().add(comboBoxScanArea);

		JButton button_8 = new JButton("Roll Spot");
		button_8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);
							
							for (Trooper trooper : getSelectedTroopers()) {

								es.submit(() -> {
									// Loops through all signs, performs spotting test
									for (int i = 0; i < callsigns.size(); i++) {
										// System.out.println("Spot Test 1");
										spotTest(callsigns.get(i), trooper, unit);
										// System.out.println("Spot Test 2");
									}

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
				

							}
							
							es.shutdown();
							
							

						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						// refreshTargets();
						GameWindow.gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		button_8.setForeground(Color.BLACK);
		button_8.setBounds(479, 99, 136, 25);
		frame.getContentPane().add(button_8);

		JButton button_9 = new JButton("Add Unit");
		button_9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (comboBoxSpottingUnits.getSelectedIndex() > 0) {

					String callsign = comboBoxSpottingUnits.getSelectedItem().toString();

					if (!callsigns.contains(callsign)) {
						callsigns.add(callsign);
					}

					listSpottedUnitsArray.removeAll();

					DefaultListModel listSpottedUnits = new DefaultListModel();

					for (int i = 0; i < callsigns.size(); i++) {
						listSpottedUnits.addElement(callsigns.get(i));

					}

					listSpottedUnitsArray.setModel(listSpottedUnits);

				}

			}
		});
		button_9.setForeground(Color.BLACK);
		button_9.setBounds(479, 71, 136, 25);
		frame.getContentPane().add(button_9);

		comboBoxSpottingUnits = new JComboBox();
		comboBoxSpottingUnits.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxSpottingUnits.setSelectedIndex(0);
		comboBoxSpottingUnits.setForeground(Color.BLACK);
		// comboBox_6.setSelectedIndex(0);
		comboBoxSpottingUnits.setBounds(479, 43, 136, 23);
		frame.getContentPane().add(comboBoxSpottingUnits);

		JLabel label_11 = new JLabel("Spot");
		label_11.setForeground(Color.BLACK);
		label_11.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_11.setBounds(479, 11, 53, 31);
		frame.getContentPane().add(label_11);

		comboBoxStance = new JComboBox();
		comboBoxStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (comboBoxStance.getSelectedItem().toString().equals(trooper.stance)) {
						return;
					}

					// System.out.println("Changing Stance, Trooper Stance: |"+trooper.stance+"| Box
					// Stance: |"+ comboBoxStance.getSelectedItem().toString()+"|");
					trooper.stance = comboBoxStance.getSelectedItem().toString();

					if (bulkTrooper.targetedFire != null) {
						bulkTrooper.targetedFire.spentCA++;
					} else {

						bulkTrooper.spentCA++;
					}

					try {
						// PCShots(bulkTrooper, getTargetTrooper(bulkTrooper));
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				}

				PCFireGuiUpdates();

			}
		});
		comboBoxStance.setModel(new DefaultComboBoxModel(new String[] { "Standing ", "Crouched", "Prone" }));
		comboBoxStance.setForeground(Color.BLACK);
		comboBoxStance.setBounds(479, 347, 147, 23);
		frame.getContentPane().add(comboBoxStance);

		JLabel label_12 = new JLabel("Misc.");
		label_12.setForeground(Color.BLACK);
		label_12.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_12.setBounds(479, 235, 146, 31);
		frame.getContentPane().add(label_12);

		chckbxManualStance = new JCheckBox("Manual Stance");
		chckbxManualStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (chckbxManualStance.isSelected())
						trooper.manualStance = true;
					else
						trooper.manualStance = false;

				}

			}
		});
		chckbxManualStance.setForeground(Color.BLACK);
		chckbxManualStance.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxManualStance.setBackground(Color.WHITE);
		chckbxManualStance.setBounds(637, 348, 131, 23);
		frame.getContentPane().add(chckbxManualStance);

		chckbxLaser = new JCheckBox("Laser");
		chckbxLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).laser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a laser pointer.");
						return;
					}

					if (chckbxLaser.isSelected())
						bulkTrooper.trooper.weaponLaserOn = true;
					else
						bulkTrooper.trooper.weaponLaserOn = false;

				}

			}
		});
		chckbxLaser.setForeground(Color.BLACK);
		chckbxLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxLaser.setBackground(Color.WHITE);
		chckbxLaser.setBounds(479, 267, 74, 23);
		frame.getContentPane().add(chckbxLaser);

		chckbxIrLaser = new JCheckBox("IR Laser");
		chckbxIrLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).irLaser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a IR laser pointer.");
						return;
					}

					if (chckbxIrLaser.isSelected())
						bulkTrooper.trooper.weaponIRLaserOn = true;
					else
						bulkTrooper.trooper.weaponIRLaserOn = false;

				}

			}
		});
		chckbxIrLaser.setForeground(Color.BLACK);
		chckbxIrLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxIrLaser.setBackground(Color.WHITE);
		chckbxIrLaser.setBounds(559, 267, 74, 23);
		frame.getContentPane().add(chckbxIrLaser);

		chckbxWeaponLights = new JCheckBox("Weapon Lights");
		chckbxWeaponLights.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!getWeapon(trooper).light) {
						gameWindow.conflictLog.addNewLine("This trooper does not have weapon lights.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.weaponLightOn = true;
					else
						trooper.weaponLightOn = false;

				}

			}
		});
		chckbxWeaponLights.setForeground(Color.BLACK);
		chckbxWeaponLights.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxWeaponLights.setBackground(Color.WHITE);
		chckbxWeaponLights.setBounds(479, 293, 142, 23);
		frame.getContentPane().add(chckbxWeaponLights);

		chckbxThermals = new JCheckBox("Thermals");
		chckbxThermals.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!bulkTrooper.trooper.thermalVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have thermal vision.");
						return;
					}

					if (chckbxThermals.isSelected())
						bulkTrooper.trooper.thermalVisionInUse = true;
					else
						bulkTrooper.trooper.thermalVisionInUse = false;

				}

			}
		});
		chckbxThermals.setForeground(Color.BLACK);
		chckbxThermals.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxThermals.setBackground(Color.WHITE);
		chckbxThermals.setBounds(639, 267, 129, 23);
		frame.getContentPane().add(chckbxThermals);

		JLabel label_13 = new JLabel("CA Bonus:");
		label_13.setForeground(Color.BLACK);
		label_13.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_13.setBounds(479, 567, 74, 31);
		frame.getContentPane().add(label_13);

		caBonusSpinner = new JSpinner();
		caBonusSpinner.setBounds(550, 572, 34, 20);
		frame.getContentPane().add(caBonusSpinner);

		JButton btnApply = new JButton("Apply");
		btnApply.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.CA += (int) caBonusSpinner.getValue();

				}

			}
		});
		btnApply.setForeground(Color.BLACK);
		btnApply.setBounds(596, 570, 114, 23);
		frame.getContentPane().add(btnApply);

		JLabel label_16 = new JLabel("Starting Aim T:");
		label_16.setBackground(Color.WHITE);
		label_16.setForeground(Color.BLACK);
		label_16.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16.setBounds(480, 442, 114, 31);
		frame.getContentPane().add(label_16);

		comboBoxAimTime = new JComboBox();
		comboBoxAimTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1)
					return;

				for (BulkTrooper trooper : selectedBulkTroopers) {

					Shoot shoot = trooper.shoot;

					if (shoot == null)
						continue;

					SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

						@Override
						protected Void doInBackground() throws Exception {

							if (comboBoxAimTime.getSelectedIndex() == 0)
								shoot.autoAim();
							else
								shoot.setAimTime(comboBoxAimTime.getSelectedIndex() - 1);

							if (comboBoxTargetZone.getSelectedIndex() > 0) {
								setCalledShotBounds(shoot);
							}

							return null;
						}

						@Override
						protected void done() {
							try {
								TimeUnit.SECONDS.sleep(1);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							guiUpdates();

						}

					};

					worker.execute();
				}

			}
		});
		comboBoxAimTime.setModel(new DefaultComboBoxModel(new String[] { "Auto", "0", "1", "2", "3", "4", "5", "6", "7",
				"8", "9", "10", "11", "12", "13", "14", "15" }));

		comboBoxAimTime.setBackground(Color.WHITE);
		comboBoxAimTime.setForeground(Color.BLACK);
		// comboBox_10.setSelectedIndex(0);
		comboBoxAimTime.setBounds(479, 470, 87, 20);
		frame.getContentPane().add(comboBoxAimTime);

		comboBoxTargetZone = new JComboBox();
		comboBoxTargetZone.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper trooper : selectedBulkTroopers) {
					try {
						setCalledShotBounds(trooper.shoot);
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}

				guiUpdates();

			}
		});
		comboBoxTargetZone.setModel(new DefaultComboBoxModel(new String[] { "Auto", "Head", "Body", "Legs" }));
		comboBoxTargetZone.setSelectedIndex(0);
		comboBoxTargetZone.setBackground(Color.WHITE);
		comboBoxTargetZone.setForeground(Color.BLACK);
		// comboBox_11.setSelectedIndex(0);
		comboBoxTargetZone.setBounds(596, 470, 113, 20);
		frame.getContentPane().add(comboBoxTargetZone);

		JLabel label_17 = new JLabel("Target Zone:");
		label_17.setBackground(Color.WHITE);
		label_17.setForeground(Color.BLACK);
		label_17.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_17.setBounds(596, 442, 114, 31);
		frame.getContentPane().add(label_17);

		spinnerEALBonus = new JSpinner();
		spinnerEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerEALBonus.setBackground(Color.WHITE);
		spinnerEALBonus.setForeground(Color.BLACK);
		spinnerEALBonus.setBounds(479, 536, 74, 20);
		frame.getContentPane().add(spinnerEALBonus);

		JLabel label_18 = new JLabel("EAL Bonus:");
		label_18.setBackground(Color.WHITE);
		label_18.setForeground(Color.BLACK);
		label_18.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18.setBounds(479, 497, 87, 31);
		frame.getContentPane().add(label_18);

		spinnerPercentBonus = new JSpinner();
		spinnerPercentBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerPercentBonus.setBackground(Color.WHITE);
		spinnerPercentBonus.setForeground(Color.BLACK);
		spinnerPercentBonus.setBounds(563, 536, 74, 20);
		frame.getContentPane().add(spinnerPercentBonus);

		JLabel label_19 = new JLabel("% Bonus:");
		label_19.setBackground(Color.WHITE);
		label_19.setForeground(Color.BLACK);
		label_19.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_19.setBounds(563, 497, 74, 31);
		frame.getContentPane().add(label_19);

		JButton button_10 = new JButton("Aim");
		button_10.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						
						for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
							
							int newAim = bulkTrooper.shoot.aimTime + (bulkTrooper.trooper.combatActions - bulkTrooper.shoot.spentCombatActions);

							newAim = newAim >= bulkTrooper.shoot.wep.aimTime.size() ? bulkTrooper.shoot.wep.aimTime.size() - 1 : newAim;

							bulkTrooper.shoot.spentCombatActions += newAim - bulkTrooper.shoot.aimTime;

							bulkTrooper.shoot.setAimTime(newAim);
							
							if (!chckbxFreeAction.isSelected() && bulkTrooper.shoot.spentCombatActions >= bulkTrooper.trooper.combatActions) {
								actionSpent(bulkTrooper.trooper);
							}
							bulkTrooper.shootReset = false;

						}
						
						return null;
					}

					@Override
					protected void done() {

						guiUpdates();
						refreshIndividualList();
					}

				};

				worker.execute();

			}
		});
		button_10.setForeground(Color.BLACK);
		button_10.setBounds(648, 535, 87, 23);
		frame.getContentPane().add(button_10);

		lblAimTime = new JLabel("Mean Aim Time:");
		lblAimTime.setBackground(Color.WHITE);
		lblAimTime.setForeground(Color.BLACK);
		lblAimTime.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblAimTime.setBounds(647, 501, 136, 23);
		frame.getContentPane().add(lblAimTime);

		JButton btnSingle = new JButton("Single");
		btnSingle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						InjuryLog.InjuryLog.addAlreadyInjured();

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								Shoot shoot = bulkTrooper.shoot;
								if (shoot == null)
									continue;

								es.submit(() -> {
									System.out.println("Single Fire");
									try {

										if (comboBoxTargetUnits.getSelectedIndex() > 0)
											shoot.suppressiveFire(shoot.wep.suppressiveROF);
										else if (chckbxFullAuto.isSelected())
											shoot.burst();
										else
											shoot.shot(chckbxGuided.isSelected());

										try {
											TimeUnit.MILLISECONDS.sleep(15);
										} catch (InterruptedException e) {
											e.printStackTrace();
										}
										
										valleyValidTargetCheck(shoot, bulkTrooper);
										
										GameWindow.gameWindow.conflictLog
												.addNewLineToQueue("Results: " + shoot.shotResults);
										//System.out.println("Supp results: "+shoot.shotResults);
										
										
									} catch (Exception e) {
										e.printStackTrace();
									}
								});

								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								
								bulkTrooper.shootReset = false;

							}

							try {
								TimeUnit.MILLISECONDS.sleep(250);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							
							es.shutdown();

						} catch (Exception e2) {
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(100);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						
						for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
							if (!freeAction() && ((bulkTrooper.shoot.spentCombatActions >= bulkTrooper.shoot.shooter.combatActions) 
									|| comboBoxTargetUnits.getSelectedIndex() > 0)) {
								System.out.println("Action spent suppress");
								actionSpent(bulkTrooper.trooper);
							}
						}
						
						guiUpdates();
						refreshIndividualList();
						InjuryLog.InjuryLog.printResultsToLog();
						gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		btnSingle.setForeground(Color.BLACK);
		btnSingle.setBounds(744, 535, 87, 23);
		frame.getContentPane().add(btnSingle);

		lblTn = new JLabel("Mean TN: 0");
		lblTn.setBackground(Color.WHITE);
		lblTn.setForeground(Color.BLACK);
		lblTn.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTn.setBounds(963, 501, 124, 23);
		frame.getContentPane().add(lblTn);

		chckbxFullAuto = new JCheckBox("Full Auto");
		chckbxFullAuto.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				guiUpdates();
				//refreshIndividualList();
			}
		});
		chckbxFullAuto.setForeground(Color.BLACK);
		chckbxFullAuto.setBackground(Color.WHITE);
		chckbxFullAuto.setBounds(715, 469, 74, 23);
		frame.getContentPane().add(chckbxFullAuto);

		comboBoxTargetUnits = new JComboBox();
		comboBoxTargetUnits.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								es.submit(() -> {
									System.out.println("Submit");
									try {
										if(comboBoxTargetUnits.getSelectedIndex() > 0) {
											bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
													bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
											
											if(bulkTrooper.shootReset) {
												bulkTrooper.shoot.spentCombatActions = 0; 
												bulkTrooper.shoot.previouslySpentCa = 0;
											}
											
											System.out.println("Create bulk suppressive shot: "+(bulkTrooper.shoot == null ? "is null" : "not null"));
										} else if(bulkTrooper.targetTroopers.size() > 0){
											setValidTarget(bulkTrooper);
										}

										if (comboBoxAimTime.getSelectedIndex() == 0 && bulkTrooper.shoot != null)
											bulkTrooper.shoot.autoAim();
										
										if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
											setCalledShotBounds(bulkTrooper.shoot);
										}

									} catch (Exception e) {
										e.printStackTrace();
									}
								});
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							try {
								TimeUnit.MILLISECONDS.sleep(150);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}

							es.shutdown();

							System.out.println("Finished Threads");

						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(250);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						gameWindow.conflictLog.addQueuedText();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Suppression Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();
				
			}
		});
		comboBoxTargetUnits.setForeground(Color.BLACK);
		// comboBox_12.setSelectedIndex(0);
		comboBoxTargetUnits.setBounds(479, 643, 178, 21);
		frame.getContentPane().add(comboBoxTargetUnits);

		JLabel label_23 = new JLabel("Taget Unit: ");
		label_23.setForeground(Color.BLACK);
		label_23.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_23.setBounds(479, 614, 125, 31);
		frame.getContentPane().add(label_23);

		JLabel label_27 = new JLabel("Suppressive Fire");
		label_27.setForeground(Color.BLACK);
		label_27.setFont(new Font("Calibri", Font.PLAIN, 18));
		label_27.setBounds(479, 596, 221, 23);
		frame.getContentPane().add(label_27);

		JLabel lblTargetedFire = new JLabel("Targeted Fire");
		lblTargetedFire.setForeground(Color.BLACK);
		lblTargetedFire.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblTargetedFire.setBounds(479, 422, 221, 23);
		frame.getContentPane().add(lblTargetedFire);

		JLabel lblBulkOperations = new JLabel("Bulk Operations");
		lblBulkOperations.setForeground(Color.BLACK);
		lblBulkOperations.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblBulkOperations.setBounds(10, 10, 221, 20);
		frame.getContentPane().add(lblBulkOperations);

		JLabel lblIndividuals = new JLabel("Individuals");
		lblIndividuals.setForeground(Color.BLACK);
		lblIndividuals.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblIndividuals.setBackground(Color.WHITE);
		lblIndividuals.setBounds(10, 59, 87, 23);
		frame.getContentPane().add(lblIndividuals);

		

		lblPossibleShots = new JLabel("Mean Possible Shots:");
		lblPossibleShots.setForeground(Color.BLACK);
		lblPossibleShots.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblPossibleShots.setBackground(Color.WHITE);
		lblPossibleShots.setBounds(784, 501, 178, 23);
		frame.getContentPane().add(lblPossibleShots);

		JButton btnVolley = new JButton("Volley");
		btnVolley.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				try {
					volley();
				} catch (Exception ecx) {
					ecx.printStackTrace();
				}

			}
		});
		btnVolley.setForeground(Color.BLACK);
		btnVolley.setBounds(841, 535, 87, 23);
		frame.getContentPane().add(btnVolley);

		JButton button_7_1 = new JButton("HD");
		button_7_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					if (!bulkTrooper.trooper.inCover) {
						gameWindow.conflictLog.addNewLine(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
								+ " is not in cover and can't hunker down.");
						continue;
					}

					if (bulkTrooper.trooper.HD)
						bulkTrooper.trooper.HD = false;
					else
						bulkTrooper.trooper.HD = true;

					if (!chckbxFreeAction.isSelected())
						actionSpent(bulkTrooper.trooper);

				}

				refreshIndividualList();

			}
		});
		button_7_1.setForeground(Color.BLACK);
		button_7_1.setBounds(479, 212, 136, 25);
		frame.getContentPane().add(button_7_1);

		targetedFireFocus = new JComboBox();
		targetedFireFocus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1 || targetFocusLock)
					return;

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								if (bulkTrooper.targetTroopers.size() > 0) {
									es.submit(() -> {
										System.out.println("Submit");
										try {
											setValidTarget(bulkTrooper);

											if (comboBoxAimTime.getSelectedIndex() == 0)
												bulkTrooper.shoot.autoAim();

											if (comboBoxTargetZone.getSelectedIndex() > 0) {
												setCalledShotBounds(bulkTrooper.shoot);
											}

										} catch (Exception e) {
											e.printStackTrace();
										}
									});
								}
								
								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							es.shutdown();

							System.out.println("Finished Threads");

							
						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.SECONDS.sleep(1);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						// System.out.println("Done");
						gameWindow.conflictLog.addQueuedText();
						// PCFireGuiUpdates();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();

			}
		});
		targetedFireFocus.setModel(new DefaultComboBoxModel(new String[] { "No Target Unit Focus" }));
		targetedFireFocus.setForeground(Color.BLACK);
		targetedFireFocus.setBackground(Color.WHITE);
		targetedFireFocus.setBounds(944, 535, 143, 20);
		frame.getContentPane().add(targetedFireFocus);

		JButton button_5_1 = new JButton("Select Fresh");
		button_5_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// System.out.println("Phase: "+game.getPhase()+", Action:
				// "+game.getCurrentAction());

				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
				// System.out.println("Set Indexes: "+indices.length);
			}
		});
		button_5_1.setForeground(Color.BLACK);
		button_5_1.setBounds(325, 57, 130, 23);
		frame.getContentPane().add(button_5_1);

		chckbxUnspottable = new JCheckBox("Unspottable");
		chckbxUnspottable.setForeground(Color.BLACK);
		chckbxUnspottable.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxUnspottable.setBackground(Color.WHITE);
		chckbxUnspottable.setBounds(864, 261, 92, 20);
		frame.getContentPane().add(chckbxUnspottable);

		JLabel label_18_1 = new JLabel("Spotting Difficulty:");
		label_18_1.setForeground(Color.BLACK);
		label_18_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_1.setBackground(Color.WHITE);
		label_18_1.setBounds(784, 244, 143, 20);
		frame.getContentPane().add(label_18_1);

		spinnerSpottingDifficulty = new JSpinner();
		spinnerSpottingDifficulty.setForeground(Color.BLACK);
		spinnerSpottingDifficulty.setBackground(Color.WHITE);
		spinnerSpottingDifficulty.setBounds(784, 260, 74, 20);
		frame.getContentPane().add(spinnerSpottingDifficulty);

		JButton btnSet = new JButton("Set");
		btnSet.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.trooper.spottingDifficulty = (int) spinnerSpottingDifficulty.getValue();
					bulkTrooper.trooper.unspottable = chckbxUnspottable.isSelected();

					if (bulkTrooper.trooper.unspottable) {

						for (Unit unit : gameWindow.initiativeOrder) {

							for (Trooper trooper : unit.individuals) {

								if (trooper == bulkTrooper.trooper)
									continue;

								for (Spot spot : trooper.spotted) {

									if (spot.spottedIndividuals.contains(bulkTrooper.trooper)) {
										spot.spottedIndividuals.remove(bulkTrooper.trooper);
									}

								}

							}

						}

					}

				}

			}
		});
		btnSet.setForeground(Color.BLACK);
		btnSet.setBounds(967, 259, 66, 23);
		frame.getContentPane().add(btnSet);

		JLabel label_18_2 = new JLabel("Consecutive EAL Bonus:");
		label_18_2.setForeground(Color.BLACK);
		label_18_2.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_2.setBackground(Color.WHITE);
		label_18_2.setBounds(720, 567, 162, 31);
		frame.getContentPane().add(label_18_2);

		spinnerConsecutiveEALBonus = new JSpinner();
		spinnerConsecutiveEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerConsecutiveEALBonus.setForeground(Color.BLACK);
		spinnerConsecutiveEALBonus.setBackground(Color.WHITE);
		spinnerConsecutiveEALBonus.setBounds(872, 571, 74, 20);
		frame.getContentPane().add(spinnerConsecutiveEALBonus);

		JLabel lblSetWeapons = new JLabel("Set Weapons");
		lblSetWeapons.setForeground(Color.BLACK);
		lblSetWeapons.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblSetWeapons.setBounds(479, 375, 162, 20);
		frame.getContentPane().add(lblSetWeapons);

		comboBoxWeapon = new JComboBox();
		comboBoxWeapon.setModel(new DefaultComboBoxModel(new String[] { "None", "DC15A", "DC15A-ion", "DC15LE", "DC15X",
				"DC15S", "DC17m", "DC17 Sniper", "Z6", "Westar M5", "E5", "E5S", "E5C", "MA37", "M392 DMR", "M739 SAW",
				"Type-51 Carbine", "Type-52 Rifle", "Type-52 Pistol" }));
		comboBoxWeapon.setForeground(Color.BLACK);
		comboBoxWeapon.setBounds(479, 395, 147, 23);
		frame.getContentPane().add(comboBoxWeapon);

		JButton btnSet_1 = new JButton("Set");
		btnSet_1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {

				if (comboBoxWeapon.getSelectedIndex() < 0) {
					return;
				}

				for (BulkTrooper trooper : selectedBulkTroopers) {

					trooper.trooper.wep = comboBoxWeapon.getSelectedItem().toString();
					
					if(trooper.shoot != null) {
						trooper.shoot.updateWeapon(trooper.trooper.wep);
					}

				}

				gameWindow.conflictLog.addNewLine("Weapons set");
				
				refreshIndividualList();
				
				if (openUnit != null)
					openUnit.refreshIndividuals();

			}
		});
		btnSet_1.setForeground(Color.BLACK);
		btnSet_1.setBounds(637, 395, 97, 23);
		frame.getContentPane().add(btnSet_1);

		textFieldCallsign = new JTextField();
		textFieldCallsign.setBounds(744, 396, 155, 20);
		frame.getContentPane().add(textFieldCallsign);
		textFieldCallsign.setColumns(10);

		JLabel lblJoinUnit = new JLabel("Transfer to Unit");
		lblJoinUnit.setForeground(Color.BLACK);
		lblJoinUnit.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblJoinUnit.setBounds(744, 375, 162, 20);
		frame.getContentPane().add(lblJoinUnit);

		JButton btnTransfer = new JButton("Transfer");
		btnTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnTransfer.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnTransfer.setForeground(Color.BLACK);
		btnTransfer.setBounds(954, 421, 97, 23);
		frame.getContentPane().add(btnTransfer);

		JButton btnClose = new JButton("Close");
		btnClose.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				if (gameWindow.cqbWindowOpen) {
					gameWindow.cqbWindowOpen = false;
				}

				for(BulkTrooper bulkTrooper : bulkTroopers) {
					
					if(GameWindow.gameWindow.game.getPhase() == 1) {
						if(bulkTrooper.trooper.spentPhase1 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					} else {
						if(bulkTrooper.trooper.spentPhase2 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					}
					
				}
				
				frame.dispose();

			}
		});
		btnClose.setBounds(998, 642, 89, 23);
		frame.getContentPane().add(btnClose);

		JButton btnClear = new JButton("Clear Aim");
		btnClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.storedAimTime.clear();
					bulkTrooper.targetTroopers.clear();
					bulkTrooper.setTargets();
				}
			}
		});
		btnClear.setForeground(Color.BLACK);
		btnClear.setBounds(954, 570, 97, 23);
		frame.getContentPane().add(btnClear);

		JButton btnResetFp = new JButton("Reset FP");
		btnResetFp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.fatigueSystem.fatiguePoints.set(0.0);
				}

				GameWindow.gameWindow.conflictLog.addNewLine("Reset FP for selected troopers.");

			}
		});
		btnResetFp.setForeground(Color.BLACK);
		btnResetFp.setBounds(883, 642, 111, 23);
		frame.getContentPane().add(btnResetFp);

		JButton btnPass = new JButton("Pass");
		btnPass.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					actionSpent(bulkTrooper.trooper);
				}
				refreshIndividualList();
			}
		});
		btnPass.setForeground(Color.BLACK);
		btnPass.setBounds(10, 30, 115, 23);
		frame.getContentPane().add(btnPass);

		JButton button_5_1_1 = new JButton("Select Shooters");
		button_5_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();
				
				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1.setForeground(Color.BLACK);
		button_5_1_1.setBounds(187, 57, 136, 23);
		frame.getContentPane().add(button_5_1_1);

		JButton button_5_1_1_1 = new JButton("Select Aiming");
		button_5_1_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1_1.setForeground(Color.BLACK);
		button_5_1_1_1.setBounds(187, 30, 136, 23);
		frame.getContentPane().add(button_5_1_1_1);

		JLabel lblLauncher = new JLabel("Launcher");
		lblLauncher.setForeground(Color.BLACK);
		lblLauncher.setFont(new Font("Calibri", Font.PLAIN, 16));
		lblLauncher.setBounds(10, 596, 136, 20);
		frame.getContentPane().add(lblLauncher);

		JLabel lblGrenade = new JLabel("Grenade: ");
		lblGrenade.setForeground(Color.BLACK);
		lblGrenade.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblGrenade.setBounds(10, 484, 136, 31);
		frame.getContentPane().add(lblGrenade);

		comboBoxGrenade = new JComboBox();
		comboBoxGrenade.setBounds(10, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenade);

		comboBoxGrenadeTargets = new JComboBox();
		comboBoxGrenadeTargets.setBounds(157, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenadeTargets);

		JLabel label_16_1 = new JLabel("Taget Individual: ");
		label_16_1.setForeground(Color.BLACK);
		label_16_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16_1.setBounds(157, 484, 121, 31);
		frame.getContentPane().add(label_16_1);

		JLabel lblOr = new JLabel("OR");
		lblOr.setForeground(Color.BLACK);
		lblOr.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblOr.setBounds(20, 533, 16, 31);
		frame.getContentPane().add(lblOr);

		JLabel lblX = new JLabel("X:");
		lblX.setForeground(Color.BLACK);
		lblX.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblX.setBounds(71, 536, 16, 31);
		frame.getContentPane().add(lblX);

		spinnerGrenadeX = new JSpinner();
		spinnerGrenadeX.setBounds(86, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeX);

		JLabel lblY = new JLabel("Y:");
		lblY.setForeground(Color.BLACK);
		lblY.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblY.setBounds(135, 536, 16, 31);
		frame.getContentPane().add(lblY);

		spinnerGrenadeY = new JSpinner();
		spinnerGrenadeY.setBounds(150, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeY);

		JLabel lblHex = new JLabel("Hex:");
		lblHex.setForeground(Color.BLACK);
		lblHex.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblHex.setBounds(38, 533, 40, 31);
		frame.getContentPane().add(lblHex);

		JLabel label_10_1 = new JLabel("OR");
		label_10_1.setForeground(Color.BLACK);
		label_10_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10_1.setBounds(200, 533, 16, 31);
		frame.getContentPane().add(label_10_1);

		comboBoxBuilding = new JComboBox();
		comboBoxBuilding.setSelectedIndex(-1);
		comboBoxBuilding.setBounds(298, 538, 136, 20);
		frame.getContentPane().add(comboBoxBuilding);

		JLabel lblBuilding_1 = new JLabel("Building:");
		lblBuilding_1.setForeground(Color.BLACK);
		lblBuilding_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblBuilding_1.setBounds(226, 533, 62, 31);
		frame.getContentPane().add(lblBuilding_1);

		spinnerTargetRoom = new JSpinner();
		spinnerTargetRoom.setBounds(71, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetRoom);

		JLabel lblTargetRoom = new JLabel("Room:");
		lblTargetRoom.setForeground(Color.BLACK);
		lblTargetRoom.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTargetRoom.setBounds(10, 567, 53, 31);
		frame.getContentPane().add(lblTargetRoom);

		spinnerTargetFloor = new JSpinner();
		spinnerTargetFloor.setBounds(170, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetFloor);

		JLabel lblFloor = new JLabel("Floor:");
		lblFloor.setForeground(Color.BLACK);
		lblFloor.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblFloor.setBounds(123, 569, 53, 31);
		frame.getContentPane().add(lblFloor);

		JButton btnThrow = new JButton("Throw");
		btnThrow.setBounds(303, 505, 125, 23);
		frame.getContentPane().add(btnThrow);

		spinnerThrowBonus = new JSpinner();
		spinnerThrowBonus.setBounds(308, 570, 40, 20);
		frame.getContentPane().add(spinnerThrowBonus);

		spinnerThrowEALBonus = new JSpinner();
		spinnerThrowEALBonus.setBounds(430, 570, 39, 20);
		frame.getContentPane().add(spinnerThrowEALBonus);

		JLabel label_15 = new JLabel("Other Bonus:");
		label_15.setForeground(Color.BLACK);
		label_15.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_15.setBounds(226, 567, 87, 31);
		frame.getContentPane().add(label_15);

		JLabel lblEalBonus = new JLabel("EAL Bonus:");
		lblEalBonus.setForeground(Color.BLACK);
		lblEalBonus.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblEalBonus.setBounds(354, 567, 80, 31);
		frame.getContentPane().add(lblEalBonus);

		JComboBox comboBoxLauncher = new JComboBox();
		comboBoxLauncher.setBounds(10, 617, 136, 20);
		frame.getContentPane().add(comboBoxLauncher);

		spinnerLauncherBonus = new JSpinner();
		spinnerLauncherBonus.setBounds(157, 617, 74, 20);
		frame.getContentPane().add(spinnerLauncherBonus);

		JLabel label_20 = new JLabel("X:");
		label_20.setForeground(Color.BLACK);
		label_20.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_20.setBounds(236, 614, 16, 31);
		frame.getContentPane().add(label_20);

		spinnerLauncherX = new JSpinner();
		spinnerLauncherX.setBounds(251, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherX);

		JLabel label_21 = new JLabel("Y:");
		label_21.setForeground(Color.BLACK);
		label_21.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_21.setBounds(300, 614, 16, 31);
		frame.getContentPane().add(label_21);

		spinnerLauncherY = new JSpinner();
		spinnerLauncherY.setBounds(315, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherY);

		JLabel label_22 = new JLabel("Target Hex:");
		label_22.setForeground(Color.BLACK);
		label_22.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_22.setBounds(261, 597, 87, 23);
		frame.getContentPane().add(label_22);

		JLabel label_19_1 = new JLabel("Other Bonus:");
		label_19_1.setForeground(Color.BLACK);
		label_19_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_19_1.setBounds(154, 593, 87, 23);
		frame.getContentPane().add(label_19_1);

		JButton btnShootHex = new JButton("Shoot Hex");
		btnShootHex.setBounds(364, 616, 89, 23);
		frame.getContentPane().add(btnShootHex);

		JComboBox comboBoxAmmoTypeLauncher = new JComboBox();
		comboBoxAmmoTypeLauncher.setSelectedIndex(-1);
		comboBoxAmmoTypeLauncher.setBounds(10, 644, 136, 20);
		frame.getContentPane().add(comboBoxAmmoTypeLauncher);

		JComboBox comboBoxLauncherConcealment = new JComboBox();
		comboBoxLauncherConcealment.setBounds(152, 644, 136, 20);
		frame.getContentPane().add(comboBoxLauncherConcealment);

		chckbxGuided = new JCheckBox("Guided");
		chckbxGuided.setForeground(Color.WHITE);
		chckbxGuided.setBackground(Color.DARK_GRAY);
		chckbxGuided.setBounds(796, 469, 80, 23);
		frame.getContentPane().add(chckbxGuided);
		
		JButton btnCreateTransfer = new JButton("Create & Transfer");
		btnCreateTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Adds new unit 
				// Splits unit 
				ArrayList<Trooper> individuals = new ArrayList<Trooper>();
				generateSquad squad = new generateSquad("Clone Trooper Phase 1", "Empty");
				individuals = squad.getSquad();
				Unit newUnit = new Unit(textFieldCallsign.getText(), 0, 0, individuals, 100, 0, 100, 0, 0, 20, 0, unit.behavior);
				
				//Unit newUnit = unit.copyUnit(unit); 
				newUnit.side = unit.side;
				newUnit.initiative = unit.initiative;
				newUnit.organization = unit.organization;
				unit.organization = unit.organization; 
				
				newUnit.concealment = unit.concealment;
				newUnit.suppression = unit.suppression;
				newUnit.moral = unit.moral;
				newUnit.cohesion = unit.cohesion;
				newUnit.company = unit.company;
				newUnit.X = unit.X;
				newUnit.Y = unit.Y;
				newUnit.behavior = unit.behavior;
				newUnit.lineOfSight = new ArrayList<Unit>(unit.lineOfSight);
				//Collections.copy(newUnit.lineOfSight, unit.lineOfSight);
				//newUnit.lineOfSight = Collections.copy(unit.lineOfSight);
				gameWindow.initiativeOrder.add(newUnit);
				
				gameWindow.rollInitiativeOrder();
				gameWindow.refreshInitiativeOrder();
				
				// Loops through initiative order
				// Finds units that have LOS with this unit 
				// Adds new unit to the spotting units LOS
				
				for(Unit initUnit : gameWindow.initiativeOrder) {
					
					if(initUnit.lineOfSight.contains(unit)) {
						initUnit.lineOfSight.add(newUnit);
					}
					
				}
				
				
				// Finds newUnit's company 
				// Adds unit to company 
				for(int i = 0; i < gameWindow.companies.size(); i++) {
					
					if(gameWindow.companies.get(i).getName().equals(newUnit.company) && gameWindow.companies.get(i).getSide().equals(newUnit.side)) {
						gameWindow.companies.get(i).updateUnit(unit);
						gameWindow.companies.get(i).addUnit(newUnit);
						// Adds companies to setupWindow
						gameWindow.confirmCompany(gameWindow.companies.get(i), i);
						//f.dispose();
						
					}
					
				}
				
				
				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnCreateTransfer.setForeground(Color.BLACK);
		btnCreateTransfer.setBounds(909, 395, 142, 23);
		frame.getContentPane().add(btnCreateTransfer);
		frame.setVisible(true);
	}

	public boolean trooperAlreadyAdded(Trooper trooper) {

		for (BulkTrooper bulkTrooper : bulkTroopers) {

			if (bulkTrooper.trooper.compareTo(trooper))
				return true;

		}

		return false;
	}

	// Creates bulk trooper classes and populates the arraylist
	public void setIndividuals() {

		for (Trooper trooper : unit.individuals) {
			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Sets bulk troopers for those in CQB
	public void setIndividuals(ArrayList<Trooper> cqbt) {

		for (Trooper trooper : cqbt) {

			// System.out.println("Trooper: "+trooper.name+", Code:
			// "+System.identityHashCode(trooper));
			// System.out.println("CQB Target: "+trooper.closeCombatTarget.name+", Code:
			// "+System.identityHashCode(trooper.closeCombatTarget));

			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Updates all combo boxes
	public void setComboBoxes() {

		// Adds sup targets to dropdown menu
		setSuppressiveFireTargets();

		// Spotting Combo Boxes
		setSpottingUnits();

		// Set focus unit
		setTargetFocus();

	}

	public void setTargetFocus() {
		targetFocusLock = true; 

		targetedFireFocus.removeAllItems();
		targetedFireFocus.addItem("None");

		for (Unit unit : getValidTargetUnits()) {
			targetedFireFocus.addItem(unit.callsign);
		}

		targetedFireFocus.setSelectedIndex(0);
		
		targetFocusLock = false;
	}

	public ArrayList<Unit> getValidTargetUnits() {
		ArrayList<Unit> validTargetUnits = new ArrayList<>();

		for (Unit unit : targetUnits) {

			boolean validTarget = true;

			for (BulkTrooper trooper : getSelectedBulkTroopers()) {

				boolean hasValidTarget = false;

				for (Trooper targetTrooper : unit.individuals) {

					if (trooper.targetTroopers.contains(targetTrooper)) {
						hasValidTarget = true;
					}
				}

				if (!hasValidTarget) {
					validTarget = false;
				}

			}

			if (validTarget && !validTargetUnits.contains(unit)) {
				validTargetUnits.add(unit);
			}

		}

		return validTargetUnits;
	}

	// Sets spotting combo boxes
	public void setSpottingUnits() {

		for (Unit losUnit : targetUnits) {

			comboBoxSpottingUnits.addItem(losUnit.callsign);

		}

	}

	public void setSuppressiveFireTargets() {

		comboBoxTargetUnits.removeAllItems();
		comboBoxTargetUnits.addItem("None");
		if (unit.lineOfSight.size() < 1)
			return;

		for (Unit unit : targetUnits) {

			comboBoxTargetUnits.addItem(unit.callsign);
		}

		comboBoxTargetUnits.setSelectedIndex(0);

	}

	public int getRWSSuppressive(Trooper trooper) {
		// System.out.println("Get rws");
		int rws = 0;
		if (trooper == null) {
			// System.out.println("Trooper is null");
			return rws;
		}

		String weaponType = new Weapons().findWeapon(trooper.wep).type;

		if (weaponType.equals("Rifle")) {
			// System.out.println("Match: Trooper rifle rws: " + trooper.rifleRWS);
			rws = trooper.getSkill("Rifle");
		} else if (weaponType.equals("Heavy")) {
			// System.out.println("Match: Trooper Heavy rws: " + trooper.heavyRWS);
			rws = trooper.getSkill("Heavy");
		} else if (weaponType.equals("Subgun")) {
			rws = trooper.getSkill("Subgun");
		} else if (weaponType.equals("Launcher")) {
			rws = trooper.getSkill("Launcher");
		} else if (weaponType.equals("Pistol")) {
			rws = trooper.getSkill("Pistol");
		}

		// Apply GURPS missing arm penalty
		if (trooper.disabledArms > 0) {
			rws -= 20;
		}

		return rws;
	}

	// Suppressive fire action
	public void fireSuppressive(Trooper trooper) {
		// System.out.println("Line 750, suppression pass");
		Weapons weapon = new Weapons().findWeapon(trooper.wep);
		Unit targetUnit = unit.lineOfSight.get(comboBoxTargetUnits.getSelectedIndex());
		Random rand = new Random();

		int shots = weapon.suppressiveROF;
		boolean canShoot;
		canShoot = trooper.inventory.fireShots(shots, new Weapons().findWeapon(trooper.wep));

		// Checks for out of ammo
		if (!canShoot) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			// textPaneSuppressiveFire.setText("OUT OF AMMO");
			return;
		}

		int RWS = 0;
		RWS = getRWSSuppressive(trooper);

		if (RWS < 5) {
			RWS = 5;
		}

		int bonus = 0;

		// Subtracts ammo
		if (trooper.ammo < shots) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			return;
		}

		if (shots == 0) {
			gameWindow.conflictLog.addNewLineToQueue("Select shots!");
			return;
		}

		Trooper target = null;
		// System.out.println("Line 783, suppression pass");

		// Gets target from selected unit
		if (targetUnit.getTroopers() == null || targetUnit.getSize() < 1 || allDead(targetUnit)) {
			gameWindow.conflictLog.addNewLineToQueue("No Targets in Unit");
			return;
		}

		boolean rolling = true;
		while (rolling) {
			// System.out.println("Line 794, rolling pass");
			int roll = rand.nextInt(targetUnit.getSize());
			target = targetUnit.getTroopers().get(roll);
			if (target.alive) {
				rolling = false;
			}
		}

		if (target != null) {

			// System.out.println("Line 808, suppression pass");
			// Sets target unit
			targetUnit = null;

			// Loops through intiiative order units and then individuals
			// Finds target's unit
			for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
				Unit tempUnit = gameWindow.initiativeOrder.get(i);
				ArrayList<Trooper> tempTroopers = tempUnit.getTroopers();
				for (int j = 0; j < tempUnit.getSize(); j++) {
					if (tempTroopers.get(j).compareTo(target)) {
						targetUnit = tempUnit;
					}
				}
			}

			if (targetUnit == null) {
				return;
			}

			if (weapon.tracers) {
				trooper.firedTracers = true;
			} else {
				trooper.firedTracers = false;
			}

			// System.out.println("Weapon: "+weapon);
			// System.out.println("RWS: "+RWS);
			TargetedFire targetedFire = new TargetedFire(RWS, bonus, weapon, shots, target, trooper, targetUnit, unit,
					true);

			// Get hits
			if (targetedFire != null) {

				int hits = targetedFire.getHits();
				int TN = targetedFire.getTN();

				// System.out.println("Line 849, suppression pass");

				gameWindow.conflictLog.addNewLineToQueue("SUPPRESSIVE FIRE: " + unit.side + "::  " + unit.callsign
						+ " to " + targetUnit.side + "::  " + targetUnit.callsign
						+ "\nSuppressive Fire Results:\nHITS: " + hits + "\n" + "TN: " + TN);
				// Subtracts suppression, moral and organization
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
					if (gameWindow.initiativeOrder.get(i).compareTo(targetUnit)) {
						// System.out.println("Pass suppression");
						Unit tempUnit = gameWindow.initiativeOrder.get(i);

						int x = tempUnit.X;
						int y = tempUnit.Y;

						for (Unit potentialTarget : gameWindow.initiativeOrder) {

							if (potentialTarget.X == x && potentialTarget.Y == y) {
								if (potentialTarget.suppression + hits / 2 < 100) {
									potentialTarget.suppression += hits / 2;
								} else {
									potentialTarget.suppression = 100;
								}
								if (potentialTarget.organization - hits > 0) {
									potentialTarget.organization -= hits;
								} else {
									potentialTarget.organization = 0;
								}
							}

						}

						if (tempUnit.suppression + hits / 2 < 100) {
							tempUnit.suppression += hits / 2;
						} else {
							tempUnit.suppression = 100;
						}
						if (tempUnit.organization - hits > 0) {
							tempUnit.organization -= hits;
						} else {
							tempUnit.organization = 0;
						}
						/*
						 * if (tempUnit.moral - hits > 0) { tempUnit.moral -= hits; } else {
						 * tempUnit.moral = 0; }
						 */

						for (Unit collateralUnit : GameWindow.gameWindow.initiativeOrder) {

							if (collateralUnit.X != tempUnit.X || collateralUnit.Y != tempUnit.Y
									|| tempUnit.compareTo(collateralUnit)) {
								continue;
							}

							if (collateralUnit.suppression + hits / 2 < 100) {
								collateralUnit.suppression += hits / 2;
							} else {
								collateralUnit.suppression = 100;
							}
							if (collateralUnit.organization - hits > 0) {
								collateralUnit.organization -= hits;
							} else {
								collateralUnit.organization = 0;
							}

						}

						int trooperHits = 0;
						// Checks each hit for a strike against a individual in the target unit
						for (int j = 0; j < hits; j++) {
							int roll = rand.nextInt(100) + 1;
							int hitTN = 1;

							if (target.getBuilding() != null && target.getBuilding().getHexSize() < 200) {
								hitTN = 11;
							} else if (target.getBuilding() != null && target.getBuilding().getHexSize() < 400) {
								hitTN = 6;
							}

							if (roll <= hitTN) {
								trooperHits++;
							}
						}

						if (trooperHits > 0) {
							// System.out.println("pass trooper hits");
							ResolveHits resolveHits = new ResolveHits(target, trooperHits, weapon,
									gameWindow.conflictLog, tempUnit, unit, gameWindow);
							resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
							target = resolveHits.returnTarget();

						}

						tempUnit.setIndividual(target, target.number);

						gameWindow.initiativeOrder.set(i, tempUnit);

					}
				}

			}

			trooper.ammo -= shots;

			// System.out.println("Line 926, suppression pass");

			if (shots > 10) {
				int roll = rand.nextInt(8);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			} else {
				int roll = rand.nextInt(6);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			}

			// window.openUnit.troopers.set(index, trooper);

			// window.openUnit.refreshIndividuals();

			// Adds action point, if it is not a free action
			if (!chckbxFreeAction.isSelected()) {
				actionSpent(trooper);
			}

		}

	}

	public void actionSpent(Trooper trooper) {
		
		System.out.println("Action spent");
		
		if (game.getPhase() == 1)
			trooper.spentPhase1++;
		else
			trooper.spentPhase2++;

	}

	// Gets selected individuals from bulk trooper
	public ArrayList<Trooper> getSelectedTroopers() {

		ArrayList<Trooper> troopers = new ArrayList<Trooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals 2, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index).trooper);

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	public ArrayList<BulkTrooper> getSelectedBulkTroopers() {

		ArrayList<BulkTrooper> troopers = new ArrayList<BulkTrooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index));

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	// Gets trooper and returns trooper from the trooper's number
	// Might not work
	/*
	 * public Trooper findTrooperFromString(String trooperString) {
	 * 
	 * String value = trooperString; String numString = "";
	 * System.out.println("Find Trooper from string 1"); for(int i = 0; i <
	 * value.length() - 1; i++) {
	 * System.out.println("Find Trooper from string loop"); char c =
	 * value.charAt(i); if(c == ';') break; else if(Character.isDigit(c)) {
	 * numString += c; } }
	 * 
	 * 
	 * Trooper trooper = unit.individuals.get(Integer.parseInt(numString) - 1);
	 * System.out.println("Find Trooper from string 2, trooper: "+trooper.toString()
	 * ); return trooper; }
	 */

	public boolean allDead(Unit unit) {

		boolean allDead = true;

		for (Trooper trooper : unit.individuals)
			if (trooper.alive)
				allDead = false;

		return allDead;

	}

	// Refreshes front end changes to the troopers
	public void refreshIndividualList() {
		individualListLock = true; 
		
		int[] indices = individualsList.getSelectedIndices();

		individualsList.removeAll();

		DefaultListModel listModel = new DefaultListModel();

		for (BulkTrooper individual : bulkTroopers) {

			listModel.addElement(individual.bulkToString());

		}

		individualsList.setModel(listModel);

		individualsList.setSelectedIndices(indices);

		if (openUnit != null)
			openUnit.refreshIndividuals();
		
		individualListLock = false;
	}

	private class BulkTrooper {
		public Trooper trooper;
		public int spentCA;
		public int CA;
		public ArrayList<Trooper> targetTroopers = new ArrayList<Trooper>();
		public Trooper bestTargetTrooper = null;
		public TargetedFire tempTF;
		public TargetedFire targetedFire;
		public boolean possibleShots = true;
		public String wepPercent;
		public int sl;
		public Shoot shoot;
		public boolean shootReset = true;

		public BulkTrooper(Trooper trooper) {
			// System.out.println("Constructor");
			this.trooper = trooper;
			spentCA = 0;
			setAction();
			setTargets();

			this.CA = trooper.combatActions;
			this.wepPercent = trooper.weaponPercent;
			this.sl = trooper.sl;

		}

		// Returns a string for the individual output in the individuals list
		// Shows things like spent ca and ca
		public String bulkToString() {

			String rslt = "";
			rslt += trooper.number + "; " + trooper.name + " ";

			if (targetedFire != null && !targetedFire.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + targetedFire.fullAutoResults + ", ";
			} else if (tempTF != null && !tempTF.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + tempTF.fullAutoResults + ", ";
			}

			if (trooper.storedAimTime.size() > 0)
				rslt += "AIMING: ";

			if (trooper.HD) {
				rslt += "HUNKERED DOWN: ";
			}

			if (trooper.inCover) {
				rslt += "IN COVER: ";
			}

			if (trooper.disabledLegs > 1) {
				rslt += "IMOBALIZED: ";
			} else if (trooper.disabledLegs > 0) {
				rslt += "CRIP-LEG: ";
			}

			if (!trooper.conscious) {
				rslt += "UNCONSCIOUS: ";
			}

			if (trooper.personalShield != null)
				rslt += "CSS: " + trooper.personalShield.currentShieldStrength + " ";

			if (trooper.physicalDamage > 0)
				rslt += "PD: " + trooper.physicalDamage + ", ";

			if (trooper.ionDamage > 0)
				rslt += "ID: " + trooper.ionDamage + ", ";
			rslt += "P1: " + trooper.spentPhase1 + "/" + trooper.P1 + ", P2: " + trooper.spentPhase2 + "/" + trooper.P2
					+ " ";
			rslt += "CA: " + spentCA + "/" + CA + ", ";

			ArrayList<Trooper> spotted = new ArrayList<>();

			for (Spot spot : trooper.spotted) {

				for (Trooper trooper : spot.spottedIndividuals) {

					if (validTarget(trooper) && !spotted.contains(trooper)) {
						spotted.add(trooper);
					}

				}

			}

			rslt += "SC: " + spotted.size() + ", ";
			rslt += wepPercent + "%, SL: " + sl + ", ";
			rslt += "Ammo: " + trooper.ammo + ", ";
			rslt += "Weapon: " + trooper.wep;

			if (game.getPhase() == 1) {
				if (trooper.spentPhase1 >= trooper.P1 || trooper.spentPhase1 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			} else {
				if (trooper.spentPhase2 >= trooper.P2 || trooper.spentPhase2 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			}
			trooper.returnTrooperUnit(GameWindow.gameWindow).callsign +":: "
			String leaderType = trooper.leaderType == LeaderType.NONE ? "" : trooper.leaderType.toString()+":: ";
			
			return leaderType+ rslt;

		}

		public void setTargets() {

			targetTroopers.clear();

			for (Spot spot : trooper.spotted) {

				for (Trooper spottedTrooper : spot.spottedIndividuals)
					if (validTarget(spottedTrooper) && !targetTroopers.contains(spottedTrooper))
						targetTroopers.add(spottedTrooper);

			}

		}

		public void setAction() {

			trooper.setPCStats();
			CA = trooper.combatActions;
		}

	}

	public void aim(BulkTrooper bulkTrooper, int aimTime, Trooper targetTrooper) {
		// System.out.println("Target: "+targetTrooper.name);
		Trooper trooper = bulkTrooper.trooper;
		int maxAim = new Weapons().findWeapon(trooper.wep).aimTime.size();
		// System.out.println("Trooper Stored Aim Size:
		// "+bulkTrooper.trooper.storedAimTime.size());
		// Get stored aim time
		Hashtable<Trooper, Integer> storedAim;

		// If set to auto, uses maximum amount of remaining aim
		if (aimTime <= 0) {

			if (trooper.storedAimTime.containsKey(targetTrooper)) {
				// System.out.println("Pass 1");
				int additionalAim = bulkTrooper.CA - bulkTrooper.spentCA;
				int currentAim = trooper.storedAimTime.get(targetTrooper);
				int newAim;

				if (currentAim + additionalAim > maxAim - 1) {
					// System.out.println("Pass 1-1");
					newAim = maxAim;
					bulkTrooper.spentCA += maxAim - currentAim;
				} else {
					// System.out.println("Pass 1-2");
					newAim = currentAim += additionalAim;
					bulkTrooper.spentCA += additionalAim;
				}

				trooper.storedAimTime.put(targetTrooper, newAim);
			} else {
				// System.out.println("Pass 2");
				trooper.storedAimTime.clear();
				int newAim = bulkTrooper.CA - bulkTrooper.spentCA;
				trooper.storedAimTime.put(targetTrooper, newAim);
				bulkTrooper.spentCA += newAim;
			}

		}
		// Otherwise, goes to specified aim
		else {
			// System.out.println("Pass 3");
			trooper.storedAimTime.clear();
			trooper.storedAimTime.put(targetTrooper, aimTime - 1);
			bulkTrooper.spentCA += aimTime - 1;
		}

	}

	public void setValidTarget(BulkTrooper bulkTrooper) throws Exception {
		Trooper targetTrooper;

		targetTrooper = getTargetTrooper(bulkTrooper);

		if (validTarget(targetTrooper)) {
			// PCShots(bulkTrooper, targetTrooper);
			bulkTrooper.shoot = ShootUtility.setTarget(bulkTrooper.trooper.returnTrooperUnit(GameWindow.gameWindow), targetTrooper.returnTrooperUnit(gameWindow),
					bulkTrooper.shoot, bulkTrooper.trooper, targetTrooper, bulkTrooper.trooper.wep, -1);
			if(bulkTrooper.shootReset) {
				bulkTrooper.shoot.spentCombatActions = 0; 
				bulkTrooper.shoot.previouslySpentCa = 0;
			}
		} else {
			// SC: # displayed in list could be spotted troopers 
			// Multithreading could be leading to errors where ui doesn't get set or lists don't get updated / cleared 
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " no valid target");
		}

	}

	public void bulkTrooperShoot(BulkTrooper bulkTrooper) throws Exception {

		Trooper targetTrooper;

		if (bulkTrooper.targetedFire != null) {
			targetTrooper = bulkTrooper.targetedFire.targetTrooper;
		} else if (bulkTrooper.tempTF != null) {
			targetTrooper = bulkTrooper.tempTF.targetTrooper;
		} else {
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " trooper shot no valid target exception.");
		}

		if (validTarget(targetTrooper))
			PCFire(bulkTrooper, targetTrooper);
		else {
			bulkTrooper.targetedFire = null;
			bulkTrooper.tempTF = null;
			GameWindow.gameWindow.conflictLog.addNewLineToQueue("No valid target. Ending string of fire.");
			return;
		}

		if (bulkTrooper.targetedFire == null)
			return;
		else
			bulkTrooper.targetedFire.EAL += (int) spinnerConsecutiveEALBonus.getValue();

		if (bulkTrooper.targetedFire.TN < 0 || !validTarget(targetTrooper)) {

			// bulkTrooper.targetTroopers.remove(targetTrooper);
			GameWindow.gameWindow.conflictLog
					.addNewLineToQueue("TN less than 1, target may be dead. Ending string of fire.");
			bulkTrooper.targetTroopers.clear();
			bulkTrooper.setTargets();
			bulkTrooper.targetedFire = null;
			bulkTrooper.bestTargetTrooper = null;
			bulkTrooper.tempTF = null;

			for (BulkTrooper t : bulkTroopers) {
				t.targetTroopers.clear();
				t.setTargets();
			}

			bulkTrooper.trooper.storedAimTime.clear();
			if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
				bulkTrooper.trooper.storedAimTime.clear();
				actionSpent(bulkTrooper.trooper);

			}
			return;
		} else {
			// PCShots(bulkTrooper, targetTrooper);
		}

		if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
			bulkTrooper.trooper.storedAimTime.clear();
			actionSpent(bulkTrooper.trooper);

		}
	}

	// Loops through units in initiaitive order
	// Looks for unit containing indvididual
	// Returns unit
	public Unit findTrooperUnit(Trooper trooper) {
		ArrayList<Unit> units = gameWindow.initiativeOrder;

		for (Unit unit : units) {

			for (Trooper trooper1 : unit.getTroopers()) {

				if (trooper1.compareTo(trooper)) {
					// System.out.println("Found Unit: "+unit.callsign);
					return unit;
				}

			}

		}

		return null;

	}

	public boolean validTarget(Trooper target) {

		if (target == null || !target.alive || !target.conscious || target.HD) {
			return false;
		}

		return true;
	}

	public Trooper getTargetTrooper(BulkTrooper bulkTrooper) throws Exception {
		if(bulkTrooper.trooper.storedAimTime.size() > 0) {
			
			for(Trooper target : bulkTrooper.targetTroopers) {
				if(bulkTrooper.trooper.storedAimTime.containsKey(target)) {
					return target;
				}
			}
			
		}
		
		if (bulkTrooper.bestTargetTrooper != null && validTarget(bulkTrooper.bestTargetTrooper))
			return bulkTrooper.bestTargetTrooper;
		else
			bulkTrooper.bestTargetTrooper = null;

		/**/
		// Sets random target trooper
		// System.out.println("Target Troopers size:
		// "+bulkTrooper.targetTroopers.size());
		// shuffleList(bulkTrooper.targetTroopers);

		Trooper targetTrooper = null;

		Unit targetUnit = null;

		Unit trooperUnit = GameWindow.gameWindow.findTrooperUnit(bulkTrooper.trooper);

		for (Unit unit : GameWindow.gameWindow.initiativeOrder) {
			if (unit.side.equals(trooperUnit.side) || unit.individuals.size() < 1)
				continue;

			boolean validTargets = false;

			for (Trooper trooper : unit.individuals) {
				if (validTarget(trooper) && bulkTrooper.targetTroopers.contains(trooper)) {
					// System.out.println("Valid Targets");
					validTargets = true;
					break;
				}
			}

			if (!validTargets)
				continue;

			if (targetUnit == null) {
				targetUnit = unit;
			} else if (GameWindow.hexDif(targetUnit, trooperUnit) > GameWindow.hexDif(unit, trooperUnit)) {
				targetUnit = unit;
			}

		}

		if (targetedFireFocus.getSelectedIndex() > 0 && getValidTargetUnits().size() > 0) {
			targetUnit = getValidTargetUnits().get(targetedFireFocus.getSelectedIndex() - 1);
			System.out.println("Focus Target Unit: " + targetUnit.callsign);
		}

		if (targetUnit == null)
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " getTargetTrooper Target Unit is Null");

		ArrayList<Trooper> targetTrooperArray = new ArrayList<Trooper>();
		for (Trooper trooper : targetUnit.individuals) {
			if (bulkTrooper.targetTroopers.contains(trooper)) {
				targetTrooperArray.add(trooper);
			}
		}

		if (targetTrooperArray.size() == 0) {
			throw new Exception(
					bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " targetTrooperArray is empty.");
		}

		targetTrooper = targetTrooperArray.get(DiceRoller.randInt(0, targetTrooperArray.size() - 1));

		for (Trooper trooper : targetUnit.individuals) {
			if (!targetTrooper.inCover)
				break;

			if (!bulkTrooper.targetTroopers.contains(trooper))
				continue;

			targetTrooper = trooper;
		}

		bulkTrooper.bestTargetTrooper = targetTrooper;
		return targetTrooper;

	}

	public void PCFireGuiUpdates() {
		if (getSelectedBulkTroopers().size() < 1)
			return;

		int meanTN = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				meanTN += bulkTrooper.targetedFire.TN;
			else if (bulkTrooper.tempTF != null)
				meanTN += bulkTrooper.tempTF.TN;

		}
		meanTN /= getSelectedBulkTroopers().size();
		lblTn.setText("Mean TN: " + meanTN);

		int aimTime = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				aimTime += bulkTrooper.targetedFire.spentAimTime;
			else if (bulkTrooper.tempTF != null)
				aimTime += bulkTrooper.tempTF.spentAimTime;

		}
		aimTime /= getSelectedBulkTroopers().size();
		lblAimTime.setText("Mean Aim Time: " + aimTime);

		int possibleShots = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.targetedFire.possibleShots - bulkTrooper.targetedFire.shotsTaken;

			} else if (bulkTrooper.tempTF != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.tempTF.possibleShots - bulkTrooper.tempTF.shotsTaken;

			}

		}
		possibleShots /= getSelectedBulkTroopers().size();
		lblPossibleShots.setText("Mean Possible Shots: " + possibleShots);

		// lblAmmo.setText("Ammo: "+bulkTrooper.trooper.ammo);
		// lblCombatActions.setText("TF CA: "+bulkTrooper.CA);
		gameWindow.conflictLog.addQueuedText();
		gameWindow.refreshInitiativeOrder();
		// refreshTargets();

	}

	public void PCFire(BulkTrooper bulkTrooper, Trooper targetTrooper) {
		// TargetedFire tempTF = bulkTrooper.tempTF;

		Trooper trooper = bulkTrooper.trooper;

		boolean shots;

		if (chckbxFullAuto.isSelected()) {
			shots = trooper.inventory.fireShots(new Weapons().findWeapon(trooper.wep).fullAutoROF,
					new Weapons().findWeapon(trooper.wep));
		} else {
			int roll = new Random().nextInt(3) + 1;
			shots = trooper.inventory.fireShots(roll, new Weapons().findWeapon(trooper.wep));
		}

		// Checks for out of ammo
		if (!shots) {
			// textPaneTargetedFire.setText("OUT OF AMMO");
			gameWindow.conflictLog
					.addNewLineToQueue("Trooper: " + trooper.number + ": " + trooper.name + " is out of ammo");
			return;
		}

		if (new Weapons().findWeapon(trooper.wep).fullAutoROF == 0 && chckbxFullAuto.isSelected()) {
			gameWindow.conflictLog.addNewLineToQueue(
					"Trooper: " + trooper.number + ": " + trooper.name + "'s weapon is not full auto capable.");
		}

		Trooper shooterTrooper = trooper;

		Unit targetUnit = findTrooperUnit(targetTrooper);
		Unit shooterUnit = findTrooperUnit(shooterTrooper);

		for (Trooper t : bulkTrooper.targetTroopers) {
			if (shooterTrooper.storedAimTime.containsKey(t)) {
				targetTrooper = t;
				break;
			}
		}

		int maxAim = comboBoxAimTime.getSelectedIndex() - 1;

		TargetedFire tf = new TargetedFire(shooterTrooper, targetTrooper, shooterUnit, targetUnit, gameWindow, maxAim,
				bulkTrooper.CA - bulkTrooper.spentCA,
				(int) spinnerEALBonus.getValue() + (int) spinnerConsecutiveEALBonus.getValue(),
				(int) spinnerPercentBonus.getValue(), 0, shooterTrooper.wep);

		tf.spentCA = bulkTrooper.spentCA;

		if (bulkTrooper.targetedFire == null) {
			bulkTrooper.targetedFire = tf;
			// reaction = null;
			bulkTrooper.possibleShots = true;
		} else if (!tf.targetTrooper.compareTo(bulkTrooper.targetedFire.targetTrooper)) {
			bulkTrooper.targetedFire = tf;
		}

		bulkTrooper.targetedFire.PCHits = 0;

		if (bulkTrooper.possibleShots) {

			if (chckbxFullAuto.isSelected()) {
				bulkTrooper.targetedFire.fullAutoBurst(true);
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				} else if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 2;
				}
			} else {
				bulkTrooper.targetedFire.shot(comboBoxTargetZone.getSelectedIndex());
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				}
			}

			// System.out.println("TARGETED FIRE: ");
			// System.out.println("targetedFire.shotsTaken:
			// "+bulkTrooper.targetedFire.shotsTaken);
			// System.out.println("targetedFire.timeToReaction:
			// "+bulkTrooper.targetedFire.timeToReaction);
			/*
			 * if(targetedFire.shotsTaken >= targetedFire.timeToReaction &&
			 * targetedFire.shotsTaken != 0 && this.reaction == null && targetTrooper.alive
			 * && targetTrooper.conscious && targetTrooper.canAct(gameWindow.game)) { //
			 * React System.out.println("REACTION"); //ReactionToFireWindow reaction = new
			 * ReactionToFireWindow(shooterTrooper, targetTrooper, windowOpenTrooper,
			 * gameWindow); //this.reaction = reaction;
			 * 
			 * }
			 */
		}

		if (bulkTrooper.targetedFire.PCHits > 0) {
			ResolveHits resolveHits = new ResolveHits(targetTrooper, bulkTrooper.targetedFire.PCHits,
					new Weapons().findWeapon(shooterTrooper.wep), gameWindow.conflictLog,
					targetTrooper.returnTrooperUnit(gameWindow), shooterUnit, gameWindow);

			if (bulkTrooper.targetedFire.calledShot) {
				resolveHits.calledShot = true;
				resolveHits.calledShotBounds = bulkTrooper.targetedFire.calledShotBounds;

			}

			if (targetTrooper.returnTrooperUnit(gameWindow).suppression + bulkTrooper.targetedFire.PCHits < 100) {
				targetTrooper.returnTrooperUnit(gameWindow).suppression += bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).suppression = 100;
			}
			if (targetTrooper.returnTrooperUnit(gameWindow).organization - bulkTrooper.targetedFire.PCHits > 0) {
				targetTrooper.returnTrooperUnit(gameWindow).organization -= bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).organization = 0;
			}

			resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
			InjuryLog.InjuryLog.addTrooper(targetTrooper);
		}

		if (bulkTrooper.targetedFire.possibleShots <= bulkTrooper.targetedFire.shotsTaken) {
			// Shot ends
			/*
			 * lblPossibleShots.setText("Possible Shots: None");
			 * lblAimTime.setText("Aim Time: N/A"); lblTN.setText("Target Number: N/A");
			 */
			// reaction = null;
			bulkTrooper.possibleShots = false;
			// bulkTrooper.targetedFire = null;
			// PCShots(bulkTrooper);
		}

		if (chckbxFullAuto.isSelected()) {

			bulkTrooper.spentCA += 2;
		} else {

			bulkTrooper.spentCA++;
		}

		/*
		 * if(!targetTrooper.alive) {
		 * 
		 * if(chckbxMultipleTargets.isSelected()) {
		 * 
		 * targetedFire = null; possibleShots = true; reaction = null; PCShots(); } else
		 * { // Performed after swing worker is done actionSpent(openUnit, index);
		 * openUnit.openNext(true); f.dispose(); }
		 * 
		 * 
		 * }
		 */

		// setDetails(openTrooper);

	}

	// Gets weapon
	public Weapons getWeapon(Trooper trooper) {

		return new Weapons().findWeapon(trooper.wep);
	}

	public Unit findUnit(String callsign) {

		for (Unit unit : gameWindow.initiativeOrder)
			if (unit.callsign.equals(callsign))
				return unit;

		return null;
	}

	// Spot test
	public void spotTest(String targetCallsign, Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		// Find target unit
		Unit targetUnit = findUnit(targetCallsign);

		Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
				comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
				gameWindow);

		// Print results
		spotAction.displayResultsQueue(gameWindow, spotAction);

		// Set results in trooper
		trooper.spotted.add(spotAction);
		// Refresh trooper
		// refreshTrooper(trooper);
		// window.openUnit.troopers.set(index, trooper);

	}

	// Spot test
	public void spotTestAll(Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		for (Unit targetUnit : unit.lineOfSight) {

			Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
					comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
					gameWindow);

			spotAction.displayResultsQueue(gameWindow, spotAction);

			// Set results in trooper
			trooper.spotted.add(spotAction);
		}

	}

	public boolean hasTargets(BulkTrooper bulkTrooper) {

		return true;

	}

	public boolean freeAction() {
		return chckbxFreeAction.isSelected();
	}

	public void volley() {

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {

				InjuryLog.InjuryLog.addAlreadyInjured();
				ArrayList<BulkTrooper> troops = selectedBulkTroopers;

				ExecutorService es = Executors.newFixedThreadPool(16);

				for (BulkTrooper bulkTrooper : troops) {

					Shoot shoot = bulkTrooper.shoot;

					if (shoot == null)
						continue;

					es.submit(() -> {
						System.out.println("Submit");
						try {

							
							int shots = 1; 
							while (shoot.spentCombatActions < shoot.shooter.combatActions && 
									(validTarget(shoot.target) || comboBoxTargetUnits.getSelectedIndex() > 0)
									&& !shoot.outOfAmmo) {

								System.out.println("volley shot: "+shots);
								
								if (comboBoxTargetUnits.getSelectedIndex() > 0)
									shoot.suppressiveFire(shoot.wep.suppressiveROF);
								else if (chckbxFullAuto.isSelected())
									shoot.burst();
								else
									shoot.shot(chckbxGuided.isSelected());

								GameWindow.gameWindow.conflictLog.addNewLineToQueue("Results: " + shoot.shotResults);

								valleyValidTargetCheck(shoot, bulkTrooper);
								shots++;
								System.out.println("Volley CA test: "+(shoot.spentCombatActions < shoot.shooter.combatActions));
								System.out.println("Volley Valid Target Test: "+validTarget(shoot.target));
								System.out.println("Volley Valid Supp Target Test: "+(comboBoxTargetUnits.getSelectedIndex() > 0));
								System.out.println("Volley Out of Ammo Test: "+(!shoot.outOfAmmo));
							}
							
							
							
						} catch (Exception e) {
							e.printStackTrace();
						}
					});
					
					try {
						TimeUnit.MILLISECONDS.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				try {
					TimeUnit.MILLISECONDS.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				es.shutdown();

				return null;
			}

			@Override
			protected void done() {

				try {
					TimeUnit.MILLISECONDS.sleep(250);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
					if(!chckbxFreeAction.isSelected()) {
						System.out.println("volley action spent");
						actionSpent(bulkTrooper.trooper);
					}
				}
				
				System.out.println("volley gui updates");
				guiUpdates();
				refreshIndividualList();
				InjuryLog.InjuryLog.printResultsToLog();
				gameWindow.conflictLog.addQueuedText();
				// individualsList.setSelectedIndex(-1);

			}

		};

		worker.execute();

	}

	public void valleyValidTargetCheck(Shoot shoot, BulkTrooper bulkTrooper) throws Exception {
		if (!validTarget(shoot.target)) {
			bulkTrooper.setTargets();

			if (bulkTrooper.targetTroopers.size() > 0) {
				setValidTarget(bulkTrooper);

				if (comboBoxAimTime.getSelectedIndex() == 0)
					bulkTrooper.shoot.autoAim();

				if (comboBoxTargetZone.getSelectedIndex() > 0) {
					setCalledShotBounds(bulkTrooper.shoot);
				}
			}

		}
	}

	public void ordnanceComboboxes() {
		/*
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None"); Hex hex
		 * = GameWindow.gameWindow.findHex(trooperUnit.X, trooperUnit.Y); if
		 * (trooperBuilding == null && hex != null) { for (Building building :
		 * hex.buildings) {
		 * 
		 * comboBoxBuilding.addItem(building.name);
		 * 
		 * } comboBoxBuilding.setSelectedIndex(0); } else if (hex != null) {
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None");
		 * comboBoxBuilding.addItem("ALREADY INSIDE");
		 * comboBoxBuilding.setSelectedIndex(1); }
		 */
	}

	public void guiUpdates() {

		ArrayList<Shoot> shots = new ArrayList<>();

		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2");
				continue;
			}
			shots.add(bulkTrooper.shoot);
		}

		ShootUtility.shootGuiUpdate(lblPossibleShots, lblAimTime, lblTn, null, null, null, chckbxFullAuto, shots);
	}

	public void setCalledShotBounds(Shoot shoot) {
		if (shoot == null) {
			System.out.println("shoot is null set called shot bounds");
			return;
		}

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {
					int index = comboBoxTargetZone.getSelectedIndex();
					System.out.println("Size ALM Pre: " + shoot.sizeALM);
					if (index == 0) {
						System.out.println("Clear called shot");
						shoot.calledShotBounds.clear();
						shoot.calledShotLocation = "";
					} else {
						System.out.println("set called shot");
						shoot.setCalledShotBounds(comboBoxTargetZone.getSelectedIndex());
					}
					System.out.println("Size ALM POST: " + shoot.sizeALM);
					shoot.setALM();
					shoot.setEAL();
					shoot.setSingleTn();
					shoot.setFullAutoTn();
					shoot.setSuppressiveTn();
				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {

				guiUpdates();

			}

		};

		worker.execute();
	}

	public void bonuses() {

		for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2 bonuses");
				continue;
			}
			bulkTrooper.shoot.setBonuses((int) spinnerPercentBonus.getValue(), (int) spinnerEALBonus.getValue(),
					(int) spinnerConsecutiveEALBonus.getValue());
		}

		guiUpdates();

	}

	public void selected() {
		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {

					ExecutorService es = Executors.newFixedThreadPool(16);

					ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
					ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

					for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
						if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
							removeTrooper.add(bulkTrooper);
						}
					}

					for (BulkTrooper bulkTrooper : removeTrooper) {
						selectedBulkTroopers.remove(bulkTrooper);
					}

					for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
						if (selectedBulkTroopers.contains(bulkTrooper))
							continue;

						if (bulkTrooper.targetTroopers.size() > 0) {
							es.submit(() -> {
								System.out.println("Submit");
								try {
									
									if(comboBoxTargetUnits.getSelectedIndex() > 0)
										bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
												bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
									else 
										setValidTarget(bulkTrooper);

									if (comboBoxAimTime.getSelectedIndex() == 0)
										bulkTrooper.shoot.autoAim();

									if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
										setCalledShotBounds(bulkTrooper.shoot);
									}

								} catch (Exception e) {
									e.printStackTrace();
								}
							});
						}
						
						if(!selectedBulkTroopers.contains(bulkTrooper))
							selectedBulkTroopers.add(bulkTrooper);
					}

					/*
					 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					 * if(bulkTrooper.targetTroopers.size() < 1) { continue; }
					 * 
					 * 
					 * es.submit(() -> { System.out.println("Submit"); try {
					 * setValidTarget(bulkTrooper); } catch (Exception e) { e.printStackTrace(); }
					 * }); }
					 */

					es.shutdown();

					System.out.println("Finished Threads");

				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {
				/*
				 * targetedFireFocus.removeAllItems();
				 * targetedFireFocus.addItem("Targeted Fire Focus"); targetUnits.clear();
				 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
				 * 
				 * for(Trooper targetTrooper : bulkTrooper.targetTroopers) { Unit targetUnit =
				 * findTrooperUnit(targetTrooper);
				 * 
				 * if(targetUnits.contains(targetUnit)) continue;
				 * 
				 * targetUnits.add(targetUnit);
				 * targetedFireFocus.addItem(findTrooperUnit(targetTrooper).callsign);
				 * 
				 * }
				 * 
				 * }
				 */

				// System.out.println("Done");
				
				
				selectedGuiUpdates();
			}

		};

		worker.execute();
	}
	
	public void selectedGuiUpdates() {
		try {
			TimeUnit.MILLISECONDS.sleep(250);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		setTargetFocus();
		gameWindow.conflictLog.addQueuedText();
		// PCFireGuiUpdates();
		guiUpdates();
		System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-03-11 15:16:10.069
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-03-11 15:16:10.069
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-03-11 15:16:10.105
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Conflict;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.SwingWorker;

import Trooper.Trooper;
import Trooper.generateSquad;
import Unit.Unit;
import UtilityClasses.DiceRoller;
import UtilityClasses.ShootUtility;

import javax.swing.JButton;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;

import javax.swing.JSpinner;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.JList;
import javax.swing.JCheckBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionListener;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.util.SystemOutLogger;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import Actions.ReactionToFireWindow;
import Actions.Spot;
import Actions.TargetedFire;
import Company.Formation.LeaderType;
import Hexes.Building;
import Hexes.Hex;
import Injuries.Injuries;
import Injuries.ResolveHits;
import Items.Weapons;
import Shoot.Shoot;

import javax.swing.event.ListSelectionEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class BulkWindow {

	private String path = System.getProperty("user.dir") + "\\";
	// My vars

	public boolean targetFocusLock = false;
	public boolean individualListLock = false;
	public GameWindow gameWindow;
	public Game game;
	public ArrayList<BulkTrooper> bulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<BulkTrooper> selectedBulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<Unit> targetUnits = new ArrayList<Unit>();
	public Unit unit;
	public ArrayList<String> callsigns = new ArrayList<String>();
	public OpenUnit openUnit;

	// Jframe gui vars
	private JFrame frame;
	private JTextField textFieldDC;
	private JList individualsList;
	private JComboBox comboBoxTargetUnits;
	private JCheckBox chckbxFreeAction;
	private JSpinner caBonusSpinner;
	private JSpinner spinnerEALBonus;
	private JSpinner spinnerPercentBonus;
	private JComboBox comboBoxAimTime;
	private JCheckBox chckbxFullAuto;
	private JLabel lblAimTime;
	private JLabel lblTn;
	private JLabel lblPossibleShots;
	private JCheckBox chckbxLaser;
	private JCheckBox chckbxIrLaser;
	private JCheckBox chckbxThermals;
	private JCheckBox chckbxWeaponLights;
	private JCheckBox chckbxManualStance;
	private JComboBox comboBoxStance;
	private JSpinner spinnerNVGGen;
	private JTextField textFieldPen;
	private JComboBox comboBoxOF;
	private JComboBox comboBoxSpottingUnits;
	private JComboBox comboBoxScanArea;
	private JComboBox comboBoxAddUnit;
	private JList listSpottedUnitsArray;
	private JComboBox targetedFireFocus;
	private JCheckBox chckbxUnspottable;
	private JSpinner spinnerSpottingDifficulty;
	private JSpinner spinnerConsecutiveEALBonus;
	private JComboBox comboBoxWeapon;
	private JTextField textFieldCallsign;
	private JComboBox comboBoxTargetZone;
	private JComboBox comboBoxBuilding;
	private JComboBox comboBoxGrenadeTargets;
	private JComboBox comboBoxGrenade;
	private JSpinner spinnerGrenadeX;
	private JSpinner spinnerGrenadeY;
	private JSpinner spinnerTargetRoom;
	private JSpinner spinnerTargetFloor;
	private JSpinner spinnerThrowBonus;
	private JSpinner spinnerThrowEALBonus;
	private JSpinner spinnerLauncherBonus;
	private JSpinner spinnerLauncherX;
	private JSpinner spinnerLauncherY;
	private JCheckBox chckbxGuided;

	/**
	 * Create the application.
	 * 
	 * @wbp.parser.constructor
	 */
	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;

		initializeWindow();
		setIndividuals();
		refreshIndividualList();
		setComboBoxes();
	}

	public BulkWindow(ArrayList<Unit> units) {

		this.unit = units.get(0);
		this.gameWindow = GameWindow.gameWindow;
		this.game = GameWindow.gameWindow.game;
		this.openUnit = null;

		ArrayList<String> sides = new ArrayList<>();
		
		ArrayList<Trooper> troopers = new ArrayList<>();

		for (Unit unit : units) {
			if(!sides.contains(unit.side)) {
				sides.add(unit.side);
			}
			
			
			for (Trooper trooper : unit.individuals) {
				troopers.add(trooper);
			}
		}
		
		if(sides.size() > 1) {
			System.out.println("Sort troopers");
			for(Trooper trooper : troopers) {
				trooper.kills = DiceRoller.randInt(0, 9);
			}
			Collections.sort(troopers, new Comparator<Trooper>() {
				   public int compare(Trooper b1, Trooper b2) {
					   
					   System.out.println("b1 CA: "+((b1.combatActions+ b1.sl) - b1.kills)+", b2 CA: "+((b2.combatActions + b2.sl) - b2.kills));
					   if((b1.combatActions+ b1.sl) - b1.kills < (b2.combatActions + b2.sl) - b2.kills)
						   return 1;
					   else if((b1.combatActions+ b1.sl) - b1.kills > (b2.combatActions + b2.sl) - b2.kills)
						   return -1;
					   else 
						   return 0;
				   }
			});
		}
		

		initializeWindow();
		setIndividuals(troopers);
		refreshIndividualList();
		setComboBoxes();
	}
	
	

	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit, ArrayList<Trooper> cqbt) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;
		initializeWindow();
		setIndividuals(cqbt);
		refreshIndividualList();
		setComboBoxes();
	}

	private void initializeWindow() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1113, 712);
		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		frame.setVisible(true);

		// Get the screen size
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Dimension screenSize = toolkit.getScreenSize();
		// Calculate the frame location
		int x = (screenSize.width - frame.getWidth()) / 2;
		int y = (screenSize.height - frame.getHeight()) / 2;

		// Set the new frame location
		frame.setLocation(x, y);

		JButton btnClearSpotted = new JButton("Remove All Spotted");
		btnClearSpotted.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnClearSpotted.setBounds(784, 211, 249, 23);
		btnClearSpotted.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						// System.out.println("Clear Spot1");

						for (Trooper trooper : unit.individuals) {

							trooper.spotted.clear();

						}

						// System.out.println("Clear Spot2");
						return null;
					}

				};

				worker.execute();

			}
		});

		JComboBox comboBox = new JComboBox();
		comboBox.setBounds(784, 149, 143, 20);
		comboBox.setForeground(Color.BLACK);
		// comboBox.setSelectedIndex(0);

		JLabel label = new JLabel("Remove Spotted");
		label.setBounds(782, 123, 226, 31);
		label.setForeground(Color.BLACK);
		label.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton button = new JButton("Remove");
		button.setBounds(944, 148, 89, 23);
		button.setForeground(Color.BLACK);

		JButton button_1 = new JButton("Spot Hex");
		button_1.setBounds(944, 104, 89, 23);
		button_1.setForeground(Color.BLACK);

		JComboBox comboBox_1 = new JComboBox();
		comboBox_1.setBounds(944, 74, 89, 20);
		comboBox_1.setForeground(Color.BLACK);
		// comboBox_1.setSelectedIndex(0);

		JSpinner spinner = new JSpinner();
		spinner.setBounds(882, 105, 40, 20);
		spinner.setForeground(Color.BLACK);

		JSpinner spinner_1 = new JSpinner();
		spinner_1.setBounds(808, 105, 40, 20);
		spinner_1.setForeground(Color.BLACK);

		JLabel label_1 = new JLabel("Y: ");
		label_1.setBounds(858, 100, 30, 31);
		label_1.setForeground(Color.BLACK);
		label_1.setFont(new Font("Calibri", Font.PLAIN, 12));

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 84, 445, 389);
		frame.getContentPane().add(scrollPane);
		individualsList = new JList();
		individualsList.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseMoved(MouseEvent e) {

				JList theList = (JList) e.getSource();
				int index = theList.locationToIndex(e.getPoint());
				if (index > -1) {
					theList.setToolTipText(null);
					String text = "<html>";
					// System.out.println("Target Paint");
					for (Trooper trooper : bulkTroopers.get(index).targetTroopers) {
						text += trooper.findTargetUnit(gameWindow) + ":: " + trooper.number + ":: " + trooper.name;
						// System.out.println("Loop");
						if (!trooper.compareTo(bulkTroopers.get(index).targetTroopers
								.get(bulkTroopers.get(index).targetTroopers.size() - 1)))
							text += "<br>";

					}

					if (text.equals("<html>"))
						theList.setToolTipText(null);
					else
						theList.setToolTipText(text + "</html>");
				}

			}
		});
		individualsList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0) {

				if (arg0.getValueIsAdjusting() || individualsList.getSelectedIndices().length < 1 || individualListLock)
					return;

				selected();

				// System.out.println("Entry Count:
				// "+individualsList.getSelectedValuesList().size());
			}
		});
		
		
		
		individualsList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		scrollPane.setViewportView(individualsList);
		
		
		comboBoxAddUnit = new JComboBox();
		comboBoxAddUnit.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxAddUnit.setSelectedIndex(0);
		comboBoxAddUnit.setBounds(784, 74, 143, 20);
		comboBoxAddUnit.setForeground(Color.BLACK);
		// comboBox_2.setSelectedIndex(0);

		JLabel label_2 = new JLabel("X: ");
		label_2.setBounds(784, 100, 30, 31);
		label_2.setForeground(Color.BLACK);
		label_2.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton btnAddSpotted = new JButton("Add Individual");
		btnAddSpotted.setBounds(784, 180, 115, 23);
		btnAddSpotted.setForeground(Color.BLACK);

		JButton button_3 = new JButton("Add Whole Unit");
		button_3.setBounds(909, 180, 124, 23);
		button_3.setForeground(Color.BLACK);

		JLabel label_3 = new JLabel("Individual");
		label_3.setBounds(944, 43, 143, 31);
		label_3.setForeground(Color.BLACK);
		label_3.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_4 = new JLabel("Unit");
		label_4.setBounds(784, 43, 143, 31);
		label_4.setForeground(Color.BLACK);
		label_4.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_5 = new JLabel("Add Spotted");
		label_5.setBounds(784, 11, 162, 31);
		label_5.setForeground(Color.BLACK);
		label_5.setFont(new Font("Calibri", Font.PLAIN, 14));
		frame.getContentPane().setLayout(null);
		frame.getContentPane().add(btnClearSpotted);
		frame.getContentPane().add(label_5);
		frame.getContentPane().add(label_4);
		frame.getContentPane().add(comboBoxAddUnit);
		frame.getContentPane().add(label_3);
		frame.getContentPane().add(comboBox_1);
		frame.getContentPane().add(btnAddSpotted);
		frame.getContentPane().add(button_3);
		frame.getContentPane().add(spinner_1);
		frame.getContentPane().add(label_2);
		frame.getContentPane().add(label_1);
		frame.getContentPane().add(spinner);
		frame.getContentPane().add(button_1);
		frame.getContentPane().add(comboBox);
		frame.getContentPane().add(label);
		frame.getContentPane().add(button);

		JLabel label_6 = new JLabel("PEN");
		label_6.setForeground(Color.BLACK);
		label_6.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_6.setDoubleBuffered(true);
		label_6.setBounds(784, 311, 30, 31);
		frame.getContentPane().add(label_6);

		textFieldPen = new JTextField();
		textFieldPen.setForeground(Color.BLACK);
		textFieldPen.setColumns(10);
		textFieldPen.setBounds(814, 316, 34, 20);
		frame.getContentPane().add(textFieldPen);

		JLabel label_7 = new JLabel("DC");
		label_7.setForeground(Color.BLACK);
		label_7.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_7.setDoubleBuffered(true);
		label_7.setBounds(858, 311, 30, 31);
		frame.getContentPane().add(label_7);

		textFieldDC = new JTextField();
		textFieldDC.setForeground(Color.BLACK);
		textFieldDC.setColumns(10);
		textFieldDC.setBounds(882, 316, 40, 20);
		frame.getContentPane().add(textFieldDC);

		comboBoxOF = new JComboBox();
		comboBoxOF.setModel(new DefaultComboBoxModel(new String[] { "Open", "Fire" }));
		comboBoxOF.setSelectedIndex(0);
		comboBoxOF.setForeground(Color.BLACK);
		// comboBox_3.setSelectedIndex(0);
		comboBoxOF.setBounds(967, 316, 62, 20);
		frame.getContentPane().add(comboBoxOF);

		JLabel label_8 = new JLabel("O/F");
		label_8.setForeground(Color.BLACK);
		label_8.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_8.setDoubleBuffered(true);
		label_8.setBounds(932, 311, 30, 31);
		frame.getContentPane().add(label_8);

		JButton button_4 = new JButton("Add Injury");
		button_4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					ResolveHits resolveHits = new ResolveHits(trooper);

					Injuries newInjury = resolveHits.getPCHitsManual(Integer.parseInt(textFieldPen.getText()),
							Integer.parseInt(textFieldDC.getText()), comboBoxOF.getSelectedIndex());

					if (newInjury == null) {
						gameWindow.conflictLog.addNewLine("EPEN < 0.5");
					}

				}

			}
		});
		button_4.setForeground(Color.BLACK);
		button_4.setBounds(882, 347, 147, 23);
		frame.getContentPane().add(button_4);

		JComboBox comboBox_4 = new JComboBox();
		comboBox_4.setModel(new DefaultComboBoxModel(new String[] { "Random Loc." }));
		comboBox_4.setSelectedIndex(0);
		comboBox_4.setForeground(Color.BLACK);
		// comboBox_4.setSelectedIndex(0);
		comboBox_4.setBounds(784, 348, 92, 20);
		frame.getContentPane().add(comboBox_4);

		JLabel lblAddInjuries = new JLabel("Add Injuries");
		lblAddInjuries.setForeground(Color.BLACK);
		lblAddInjuries.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblAddInjuries.setBounds(784, 293, 162, 23);
		frame.getContentPane().add(lblAddInjuries);

		listSpottedUnitsArray = new JList();
		listSpottedUnitsArray.setForeground(Color.BLACK);
		listSpottedUnitsArray.setBackground(Color.WHITE);
		listSpottedUnitsArray.setBounds(625, 43, 143, 160);
		frame.getContentPane().add(listSpottedUnitsArray);

		JLabel label_9 = new JLabel("Spotting Units");
		label_9.setForeground(Color.BLACK);
		label_9.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_9.setBounds(625, 11, 369, 31);
		frame.getContentPane().add(label_9);

		spinnerNVGGen = new JSpinner();
		spinnerNVGGen.setForeground(Color.BLACK);
		spinnerNVGGen.setBounds(625, 320, 34, 20);
		frame.getContentPane().add(spinnerNVGGen);

		JLabel label_10 = new JLabel("Gen:");
		label_10.setForeground(Color.BLACK);
		label_10.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10.setBounds(596, 317, 40, 28);
		frame.getContentPane().add(label_10);

		JButton button_2 = new JButton("Add Thermals");
		button_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					trooper.thermalVision = true;

				}

			}
		});
		button_2.setForeground(Color.BLACK);
		button_2.setBounds(669, 319, 97, 23);
		frame.getContentPane().add(button_2);

		JButton button_5 = new JButton("Add NVGs");
		button_5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if ((int) spinnerNVGGen.getValue() < 1 || (int) spinnerNVGGen.getValue() > 5) {
						gameWindow.conflictLog.addNewLine("NVG Gen not a value from 1 to 5.");
						return;
					}

					trooper.nightVision = true;
					trooper.nightVisionEffectiveness = (int) spinnerNVGGen.getValue();

				}

			}
		});
		button_5.setForeground(Color.BLACK);
		button_5.setBounds(479, 322, 114, 23);
		frame.getContentPane().add(button_5);

		JCheckBox checkBox = new JCheckBox("NVGs");
		checkBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!trooper.nightVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have night vision.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.nightVisionInUse = true;
					else
						trooper.nightVisionInUse = false;

				}

			}
		});
		checkBox.setForeground(Color.BLACK);
		checkBox.setFont(new Font("Calibri", Font.BOLD, 12));
		checkBox.setBackground(Color.WHITE);
		checkBox.setBounds(625, 293, 143, 23);
		frame.getContentPane().add(checkBox);

		JButton button_6 = new JButton("Clear");
		button_6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				listSpottedUnitsArray.removeAll();
				callsigns.clear();

				DefaultListModel listSpottedUnits = new DefaultListModel();

				for (int i = 0; i < callsigns.size(); i++) {
					listSpottedUnits.addElement(callsigns.get(i));

				}

				listSpottedUnitsArray.setModel(listSpottedUnits);

			}
		});
		button_6.setForeground(Color.BLACK);
		button_6.setBounds(479, 126, 136, 25);
		frame.getContentPane().add(button_6);

		JButton button_7 = new JButton("Spot All");
		button_7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						ExecutorService es = Executors.newFixedThreadPool(16);
						
						try {
							
							
							
							for (Trooper trooper : getSelectedTroopers()) {

								
								es.submit(() -> {
									// System.out.println("Spot Test All 1");
									spotTestAll(trooper, unit);
									// System.out.println("Spot Test All 2");

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

							}

							es.shutdown();
							
							// refreshTargets();
						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						
						GameWindow.gameWindow.conflictLog.addQueuedText();

					}

				};

				worker.execute();

			}
		});
		button_7.setForeground(Color.BLACK);
		button_7.setBounds(479, 154, 136, 25);
		frame.getContentPane().add(button_7);

		chckbxFreeAction = new JCheckBox("Free Action");
		chckbxFreeAction.setForeground(Color.BLACK);
		chckbxFreeAction.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxFreeAction.setBackground(Color.WHITE);
		chckbxFreeAction.setBounds(84, 57, 97, 27);
		frame.getContentPane().add(chckbxFreeAction);

		comboBoxScanArea = new JComboBox();
		comboBoxScanArea
				.setModel(new DefaultComboBoxModel(new String[] { "60 Degrees", "180 Degrees", "20 Yard Hex" }));
		comboBoxScanArea.setSelectedIndex(0);
		// comboBox_5.setSelectedIndex(0);
		comboBoxScanArea.setForeground(Color.BLACK);
		comboBoxScanArea.setBounds(479, 183, 136, 20);
		frame.getContentPane().add(comboBoxScanArea);

		JButton button_8 = new JButton("Roll Spot");
		button_8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);
							
							for (Trooper trooper : getSelectedTroopers()) {

								es.submit(() -> {
									// Loops through all signs, performs spotting test
									for (int i = 0; i < callsigns.size(); i++) {
										// System.out.println("Spot Test 1");
										spotTest(callsigns.get(i), trooper, unit);
										// System.out.println("Spot Test 2");
									}

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
				

							}
							
							es.shutdown();
							
							

						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						// refreshTargets();
						GameWindow.gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		button_8.setForeground(Color.BLACK);
		button_8.setBounds(479, 99, 136, 25);
		frame.getContentPane().add(button_8);

		JButton button_9 = new JButton("Add Unit");
		button_9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (comboBoxSpottingUnits.getSelectedIndex() > 0) {

					String callsign = comboBoxSpottingUnits.getSelectedItem().toString();

					if (!callsigns.contains(callsign)) {
						callsigns.add(callsign);
					}

					listSpottedUnitsArray.removeAll();

					DefaultListModel listSpottedUnits = new DefaultListModel();

					for (int i = 0; i < callsigns.size(); i++) {
						listSpottedUnits.addElement(callsigns.get(i));

					}

					listSpottedUnitsArray.setModel(listSpottedUnits);

				}

			}
		});
		button_9.setForeground(Color.BLACK);
		button_9.setBounds(479, 71, 136, 25);
		frame.getContentPane().add(button_9);

		comboBoxSpottingUnits = new JComboBox();
		comboBoxSpottingUnits.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxSpottingUnits.setSelectedIndex(0);
		comboBoxSpottingUnits.setForeground(Color.BLACK);
		// comboBox_6.setSelectedIndex(0);
		comboBoxSpottingUnits.setBounds(479, 43, 136, 23);
		frame.getContentPane().add(comboBoxSpottingUnits);

		JLabel label_11 = new JLabel("Spot");
		label_11.setForeground(Color.BLACK);
		label_11.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_11.setBounds(479, 11, 53, 31);
		frame.getContentPane().add(label_11);

		comboBoxStance = new JComboBox();
		comboBoxStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (comboBoxStance.getSelectedItem().toString().equals(trooper.stance)) {
						return;
					}

					// System.out.println("Changing Stance, Trooper Stance: |"+trooper.stance+"| Box
					// Stance: |"+ comboBoxStance.getSelectedItem().toString()+"|");
					trooper.stance = comboBoxStance.getSelectedItem().toString();

					if (bulkTrooper.targetedFire != null) {
						bulkTrooper.targetedFire.spentCA++;
					} else {

						bulkTrooper.spentCA++;
					}

					try {
						// PCShots(bulkTrooper, getTargetTrooper(bulkTrooper));
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				}

				PCFireGuiUpdates();

			}
		});
		comboBoxStance.setModel(new DefaultComboBoxModel(new String[] { "Standing ", "Crouched", "Prone" }));
		comboBoxStance.setForeground(Color.BLACK);
		comboBoxStance.setBounds(479, 347, 147, 23);
		frame.getContentPane().add(comboBoxStance);

		JLabel label_12 = new JLabel("Misc.");
		label_12.setForeground(Color.BLACK);
		label_12.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_12.setBounds(479, 235, 146, 31);
		frame.getContentPane().add(label_12);

		chckbxManualStance = new JCheckBox("Manual Stance");
		chckbxManualStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (chckbxManualStance.isSelected())
						trooper.manualStance = true;
					else
						trooper.manualStance = false;

				}

			}
		});
		chckbxManualStance.setForeground(Color.BLACK);
		chckbxManualStance.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxManualStance.setBackground(Color.WHITE);
		chckbxManualStance.setBounds(637, 348, 131, 23);
		frame.getContentPane().add(chckbxManualStance);

		chckbxLaser = new JCheckBox("Laser");
		chckbxLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).laser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a laser pointer.");
						return;
					}

					if (chckbxLaser.isSelected())
						bulkTrooper.trooper.weaponLaserOn = true;
					else
						bulkTrooper.trooper.weaponLaserOn = false;

				}

			}
		});
		chckbxLaser.setForeground(Color.BLACK);
		chckbxLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxLaser.setBackground(Color.WHITE);
		chckbxLaser.setBounds(479, 267, 74, 23);
		frame.getContentPane().add(chckbxLaser);

		chckbxIrLaser = new JCheckBox("IR Laser");
		chckbxIrLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).irLaser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a IR laser pointer.");
						return;
					}

					if (chckbxIrLaser.isSelected())
						bulkTrooper.trooper.weaponIRLaserOn = true;
					else
						bulkTrooper.trooper.weaponIRLaserOn = false;

				}

			}
		});
		chckbxIrLaser.setForeground(Color.BLACK);
		chckbxIrLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxIrLaser.setBackground(Color.WHITE);
		chckbxIrLaser.setBounds(559, 267, 74, 23);
		frame.getContentPane().add(chckbxIrLaser);

		chckbxWeaponLights = new JCheckBox("Weapon Lights");
		chckbxWeaponLights.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!getWeapon(trooper).light) {
						gameWindow.conflictLog.addNewLine("This trooper does not have weapon lights.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.weaponLightOn = true;
					else
						trooper.weaponLightOn = false;

				}

			}
		});
		chckbxWeaponLights.setForeground(Color.BLACK);
		chckbxWeaponLights.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxWeaponLights.setBackground(Color.WHITE);
		chckbxWeaponLights.setBounds(479, 293, 142, 23);
		frame.getContentPane().add(chckbxWeaponLights);

		chckbxThermals = new JCheckBox("Thermals");
		chckbxThermals.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!bulkTrooper.trooper.thermalVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have thermal vision.");
						return;
					}

					if (chckbxThermals.isSelected())
						bulkTrooper.trooper.thermalVisionInUse = true;
					else
						bulkTrooper.trooper.thermalVisionInUse = false;

				}

			}
		});
		chckbxThermals.setForeground(Color.BLACK);
		chckbxThermals.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxThermals.setBackground(Color.WHITE);
		chckbxThermals.setBounds(639, 267, 129, 23);
		frame.getContentPane().add(chckbxThermals);

		JLabel label_13 = new JLabel("CA Bonus:");
		label_13.setForeground(Color.BLACK);
		label_13.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_13.setBounds(479, 567, 74, 31);
		frame.getContentPane().add(label_13);

		caBonusSpinner = new JSpinner();
		caBonusSpinner.setBounds(550, 572, 34, 20);
		frame.getContentPane().add(caBonusSpinner);

		JButton btnApply = new JButton("Apply");
		btnApply.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.CA += (int) caBonusSpinner.getValue();

				}

			}
		});
		btnApply.setForeground(Color.BLACK);
		btnApply.setBounds(596, 570, 114, 23);
		frame.getContentPane().add(btnApply);

		JLabel label_16 = new JLabel("Starting Aim T:");
		label_16.setBackground(Color.WHITE);
		label_16.setForeground(Color.BLACK);
		label_16.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16.setBounds(480, 442, 114, 31);
		frame.getContentPane().add(label_16);

		comboBoxAimTime = new JComboBox();
		comboBoxAimTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1)
					return;

				for (BulkTrooper trooper : selectedBulkTroopers) {

					Shoot shoot = trooper.shoot;

					if (shoot == null)
						continue;

					SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

						@Override
						protected Void doInBackground() throws Exception {

							if (comboBoxAimTime.getSelectedIndex() == 0)
								shoot.autoAim();
							else
								shoot.setAimTime(comboBoxAimTime.getSelectedIndex() - 1);

							if (comboBoxTargetZone.getSelectedIndex() > 0) {
								setCalledShotBounds(shoot);
							}

							return null;
						}

						@Override
						protected void done() {
							try {
								TimeUnit.SECONDS.sleep(1);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							guiUpdates();

						}

					};

					worker.execute();
				}

			}
		});
		comboBoxAimTime.setModel(new DefaultComboBoxModel(new String[] { "Auto", "0", "1", "2", "3", "4", "5", "6", "7",
				"8", "9", "10", "11", "12", "13", "14", "15" }));

		comboBoxAimTime.setBackground(Color.WHITE);
		comboBoxAimTime.setForeground(Color.BLACK);
		// comboBox_10.setSelectedIndex(0);
		comboBoxAimTime.setBounds(479, 470, 87, 20);
		frame.getContentPane().add(comboBoxAimTime);

		comboBoxTargetZone = new JComboBox();
		comboBoxTargetZone.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper trooper : selectedBulkTroopers) {
					try {
						setCalledShotBounds(trooper.shoot);
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}

				guiUpdates();

			}
		});
		comboBoxTargetZone.setModel(new DefaultComboBoxModel(new String[] { "Auto", "Head", "Body", "Legs" }));
		comboBoxTargetZone.setSelectedIndex(0);
		comboBoxTargetZone.setBackground(Color.WHITE);
		comboBoxTargetZone.setForeground(Color.BLACK);
		// comboBox_11.setSelectedIndex(0);
		comboBoxTargetZone.setBounds(596, 470, 113, 20);
		frame.getContentPane().add(comboBoxTargetZone);

		JLabel label_17 = new JLabel("Target Zone:");
		label_17.setBackground(Color.WHITE);
		label_17.setForeground(Color.BLACK);
		label_17.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_17.setBounds(596, 442, 114, 31);
		frame.getContentPane().add(label_17);

		spinnerEALBonus = new JSpinner();
		spinnerEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerEALBonus.setBackground(Color.WHITE);
		spinnerEALBonus.setForeground(Color.BLACK);
		spinnerEALBonus.setBounds(479, 536, 74, 20);
		frame.getContentPane().add(spinnerEALBonus);

		JLabel label_18 = new JLabel("EAL Bonus:");
		label_18.setBackground(Color.WHITE);
		label_18.setForeground(Color.BLACK);
		label_18.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18.setBounds(479, 497, 87, 31);
		frame.getContentPane().add(label_18);

		spinnerPercentBonus = new JSpinner();
		spinnerPercentBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerPercentBonus.setBackground(Color.WHITE);
		spinnerPercentBonus.setForeground(Color.BLACK);
		spinnerPercentBonus.setBounds(563, 536, 74, 20);
		frame.getContentPane().add(spinnerPercentBonus);

		JLabel label_19 = new JLabel("% Bonus:");
		label_19.setBackground(Color.WHITE);
		label_19.setForeground(Color.BLACK);
		label_19.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_19.setBounds(563, 497, 74, 31);
		frame.getContentPane().add(label_19);

		JButton button_10 = new JButton("Aim");
		button_10.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						
						for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
							
							int newAim = bulkTrooper.shoot.aimTime + (bulkTrooper.trooper.combatActions - bulkTrooper.shoot.spentCombatActions);

							newAim = newAim >= bulkTrooper.shoot.wep.aimTime.size() ? bulkTrooper.shoot.wep.aimTime.size() - 1 : newAim;

							bulkTrooper.shoot.spentCombatActions += newAim - bulkTrooper.shoot.aimTime;

							bulkTrooper.shoot.setAimTime(newAim);
							
							if (!chckbxFreeAction.isSelected() && bulkTrooper.shoot.spentCombatActions >= bulkTrooper.trooper.combatActions) {
								actionSpent(bulkTrooper.trooper);
							}
							bulkTrooper.shootReset = false;

						}
						
						return null;
					}

					@Override
					protected void done() {

						guiUpdates();
						refreshIndividualList();
					}

				};

				worker.execute();

			}
		});
		button_10.setForeground(Color.BLACK);
		button_10.setBounds(648, 535, 87, 23);
		frame.getContentPane().add(button_10);

		lblAimTime = new JLabel("Mean Aim Time:");
		lblAimTime.setBackground(Color.WHITE);
		lblAimTime.setForeground(Color.BLACK);
		lblAimTime.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblAimTime.setBounds(647, 501, 136, 23);
		frame.getContentPane().add(lblAimTime);

		JButton btnSingle = new JButton("Single");
		btnSingle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						InjuryLog.InjuryLog.addAlreadyInjured();

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								Shoot shoot = bulkTrooper.shoot;
								if (shoot == null)
									continue;

								es.submit(() -> {
									System.out.println("Single Fire");
									try {

										if (comboBoxTargetUnits.getSelectedIndex() > 0)
											shoot.suppressiveFire(shoot.wep.suppressiveROF);
										else if (chckbxFullAuto.isSelected())
											shoot.burst();
										else
											shoot.shot(chckbxGuided.isSelected());

										try {
											TimeUnit.MILLISECONDS.sleep(15);
										} catch (InterruptedException e) {
											e.printStackTrace();
										}
										
										valleyValidTargetCheck(shoot, bulkTrooper);
										
										GameWindow.gameWindow.conflictLog
												.addNewLineToQueue("Results: " + shoot.shotResults);
										//System.out.println("Supp results: "+shoot.shotResults);
										
										
									} catch (Exception e) {
										e.printStackTrace();
									}
								});

								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								
								bulkTrooper.shootReset = false;

							}

							try {
								TimeUnit.MILLISECONDS.sleep(250);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							
							es.shutdown();

						} catch (Exception e2) {
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(100);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						
						for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
							if (!freeAction() && ((bulkTrooper.shoot.spentCombatActions >= bulkTrooper.shoot.shooter.combatActions) 
									|| comboBoxTargetUnits.getSelectedIndex() > 0)) {
								System.out.println("Action spent suppress");
								actionSpent(bulkTrooper.trooper);
							}
						}
						
						guiUpdates();
						refreshIndividualList();
						InjuryLog.InjuryLog.printResultsToLog();
						gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		btnSingle.setForeground(Color.BLACK);
		btnSingle.setBounds(744, 535, 87, 23);
		frame.getContentPane().add(btnSingle);

		lblTn = new JLabel("Mean TN: 0");
		lblTn.setBackground(Color.WHITE);
		lblTn.setForeground(Color.BLACK);
		lblTn.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTn.setBounds(963, 501, 124, 23);
		frame.getContentPane().add(lblTn);

		chckbxFullAuto = new JCheckBox("Full Auto");
		chckbxFullAuto.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				guiUpdates();
				//refreshIndividualList();
			}
		});
		chckbxFullAuto.setForeground(Color.BLACK);
		chckbxFullAuto.setBackground(Color.WHITE);
		chckbxFullAuto.setBounds(715, 469, 74, 23);
		frame.getContentPane().add(chckbxFullAuto);

		comboBoxTargetUnits = new JComboBox();
		comboBoxTargetUnits.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								es.submit(() -> {
									System.out.println("Submit");
									try {
										if(comboBoxTargetUnits.getSelectedIndex() > 0) {
											bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
													bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
											
											if(bulkTrooper.shootReset) {
												bulkTrooper.shoot.spentCombatActions = 0; 
												bulkTrooper.shoot.previouslySpentCa = 0;
											}
											
											System.out.println("Create bulk suppressive shot: "+(bulkTrooper.shoot == null ? "is null" : "not null"));
										} else if(bulkTrooper.targetTroopers.size() > 0){
											setValidTarget(bulkTrooper);
										}

										if (comboBoxAimTime.getSelectedIndex() == 0 && bulkTrooper.shoot != null)
											bulkTrooper.shoot.autoAim();
										
										if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
											setCalledShotBounds(bulkTrooper.shoot);
										}

									} catch (Exception e) {
										e.printStackTrace();
									}
								});
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							try {
								TimeUnit.MILLISECONDS.sleep(150);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}

							es.shutdown();

							System.out.println("Finished Threads");

						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(250);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						gameWindow.conflictLog.addQueuedText();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Suppression Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();
				
			}
		});
		comboBoxTargetUnits.setForeground(Color.BLACK);
		// comboBox_12.setSelectedIndex(0);
		comboBoxTargetUnits.setBounds(479, 643, 178, 21);
		frame.getContentPane().add(comboBoxTargetUnits);

		JLabel label_23 = new JLabel("Taget Unit: ");
		label_23.setForeground(Color.BLACK);
		label_23.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_23.setBounds(479, 614, 125, 31);
		frame.getContentPane().add(label_23);

		JLabel label_27 = new JLabel("Suppressive Fire");
		label_27.setForeground(Color.BLACK);
		label_27.setFont(new Font("Calibri", Font.PLAIN, 18));
		label_27.setBounds(479, 596, 221, 23);
		frame.getContentPane().add(label_27);

		JLabel lblTargetedFire = new JLabel("Targeted Fire");
		lblTargetedFire.setForeground(Color.BLACK);
		lblTargetedFire.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblTargetedFire.setBounds(479, 422, 221, 23);
		frame.getContentPane().add(lblTargetedFire);

		JLabel lblBulkOperations = new JLabel("Bulk Operations");
		lblBulkOperations.setForeground(Color.BLACK);
		lblBulkOperations.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblBulkOperations.setBounds(10, 10, 221, 20);
		frame.getContentPane().add(lblBulkOperations);

		JLabel lblIndividuals = new JLabel("Individuals");
		lblIndividuals.setForeground(Color.BLACK);
		lblIndividuals.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblIndividuals.setBackground(Color.WHITE);
		lblIndividuals.setBounds(10, 59, 87, 23);
		frame.getContentPane().add(lblIndividuals);

		

		lblPossibleShots = new JLabel("Mean Possible Shots:");
		lblPossibleShots.setForeground(Color.BLACK);
		lblPossibleShots.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblPossibleShots.setBackground(Color.WHITE);
		lblPossibleShots.setBounds(784, 501, 178, 23);
		frame.getContentPane().add(lblPossibleShots);

		JButton btnVolley = new JButton("Volley");
		btnVolley.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				try {
					volley();
				} catch (Exception ecx) {
					ecx.printStackTrace();
				}

			}
		});
		btnVolley.setForeground(Color.BLACK);
		btnVolley.setBounds(841, 535, 87, 23);
		frame.getContentPane().add(btnVolley);

		JButton button_7_1 = new JButton("HD");
		button_7_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					if (!bulkTrooper.trooper.inCover) {
						gameWindow.conflictLog.addNewLine(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
								+ " is not in cover and can't hunker down.");
						continue;
					}

					if (bulkTrooper.trooper.HD)
						bulkTrooper.trooper.HD = false;
					else
						bulkTrooper.trooper.HD = true;

					if (!chckbxFreeAction.isSelected())
						actionSpent(bulkTrooper.trooper);

				}

				refreshIndividualList();

			}
		});
		button_7_1.setForeground(Color.BLACK);
		button_7_1.setBounds(479, 212, 136, 25);
		frame.getContentPane().add(button_7_1);

		targetedFireFocus = new JComboBox();
		targetedFireFocus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1 || targetFocusLock)
					return;

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								if (bulkTrooper.targetTroopers.size() > 0) {
									es.submit(() -> {
										System.out.println("Submit");
										try {
											setValidTarget(bulkTrooper);

											if (comboBoxAimTime.getSelectedIndex() == 0)
												bulkTrooper.shoot.autoAim();

											if (comboBoxTargetZone.getSelectedIndex() > 0) {
												setCalledShotBounds(bulkTrooper.shoot);
											}

										} catch (Exception e) {
											e.printStackTrace();
										}
									});
								}
								
								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							es.shutdown();

							System.out.println("Finished Threads");

							
						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.SECONDS.sleep(1);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						// System.out.println("Done");
						gameWindow.conflictLog.addQueuedText();
						// PCFireGuiUpdates();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();

			}
		});
		targetedFireFocus.setModel(new DefaultComboBoxModel(new String[] { "No Target Unit Focus" }));
		targetedFireFocus.setForeground(Color.BLACK);
		targetedFireFocus.setBackground(Color.WHITE);
		targetedFireFocus.setBounds(944, 535, 143, 20);
		frame.getContentPane().add(targetedFireFocus);

		JButton button_5_1 = new JButton("Select Fresh");
		button_5_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// System.out.println("Phase: "+game.getPhase()+", Action:
				// "+game.getCurrentAction());

				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
				// System.out.println("Set Indexes: "+indices.length);
			}
		});
		button_5_1.setForeground(Color.BLACK);
		button_5_1.setBounds(325, 57, 130, 23);
		frame.getContentPane().add(button_5_1);

		chckbxUnspottable = new JCheckBox("Unspottable");
		chckbxUnspottable.setForeground(Color.BLACK);
		chckbxUnspottable.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxUnspottable.setBackground(Color.WHITE);
		chckbxUnspottable.setBounds(864, 261, 92, 20);
		frame.getContentPane().add(chckbxUnspottable);

		JLabel label_18_1 = new JLabel("Spotting Difficulty:");
		label_18_1.setForeground(Color.BLACK);
		label_18_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_1.setBackground(Color.WHITE);
		label_18_1.setBounds(784, 244, 143, 20);
		frame.getContentPane().add(label_18_1);

		spinnerSpottingDifficulty = new JSpinner();
		spinnerSpottingDifficulty.setForeground(Color.BLACK);
		spinnerSpottingDifficulty.setBackground(Color.WHITE);
		spinnerSpottingDifficulty.setBounds(784, 260, 74, 20);
		frame.getContentPane().add(spinnerSpottingDifficulty);

		JButton btnSet = new JButton("Set");
		btnSet.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.trooper.spottingDifficulty = (int) spinnerSpottingDifficulty.getValue();
					bulkTrooper.trooper.unspottable = chckbxUnspottable.isSelected();

					if (bulkTrooper.trooper.unspottable) {

						for (Unit unit : gameWindow.initiativeOrder) {

							for (Trooper trooper : unit.individuals) {

								if (trooper == bulkTrooper.trooper)
									continue;

								for (Spot spot : trooper.spotted) {

									if (spot.spottedIndividuals.contains(bulkTrooper.trooper)) {
										spot.spottedIndividuals.remove(bulkTrooper.trooper);
									}

								}

							}

						}

					}

				}

			}
		});
		btnSet.setForeground(Color.BLACK);
		btnSet.setBounds(967, 259, 66, 23);
		frame.getContentPane().add(btnSet);

		JLabel label_18_2 = new JLabel("Consecutive EAL Bonus:");
		label_18_2.setForeground(Color.BLACK);
		label_18_2.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_2.setBackground(Color.WHITE);
		label_18_2.setBounds(720, 567, 162, 31);
		frame.getContentPane().add(label_18_2);

		spinnerConsecutiveEALBonus = new JSpinner();
		spinnerConsecutiveEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerConsecutiveEALBonus.setForeground(Color.BLACK);
		spinnerConsecutiveEALBonus.setBackground(Color.WHITE);
		spinnerConsecutiveEALBonus.setBounds(872, 571, 74, 20);
		frame.getContentPane().add(spinnerConsecutiveEALBonus);

		JLabel lblSetWeapons = new JLabel("Set Weapons");
		lblSetWeapons.setForeground(Color.BLACK);
		lblSetWeapons.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblSetWeapons.setBounds(479, 375, 162, 20);
		frame.getContentPane().add(lblSetWeapons);

		comboBoxWeapon = new JComboBox();
		comboBoxWeapon.setModel(new DefaultComboBoxModel(new String[] { "None", "DC15A", "DC15A-ion", "DC15LE", "DC15X",
				"DC15S", "DC17m", "DC17 Sniper", "Z6", "Westar M5", "E5", "E5S", "E5C", "MA37", "M392 DMR", "M739 SAW",
				"Type-51 Carbine", "Type-52 Rifle", "Type-52 Pistol" }));
		comboBoxWeapon.setForeground(Color.BLACK);
		comboBoxWeapon.setBounds(479, 395, 147, 23);
		frame.getContentPane().add(comboBoxWeapon);

		JButton btnSet_1 = new JButton("Set");
		btnSet_1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {

				if (comboBoxWeapon.getSelectedIndex() < 0) {
					return;
				}

				for (BulkTrooper trooper : selectedBulkTroopers) {

					trooper.trooper.wep = comboBoxWeapon.getSelectedItem().toString();
					
					if(trooper.shoot != null) {
						trooper.shoot.updateWeapon(trooper.trooper.wep);
					}

				}

				gameWindow.conflictLog.addNewLine("Weapons set");
				
				refreshIndividualList();
				
				if (openUnit != null)
					openUnit.refreshIndividuals();

			}
		});
		btnSet_1.setForeground(Color.BLACK);
		btnSet_1.setBounds(637, 395, 97, 23);
		frame.getContentPane().add(btnSet_1);

		textFieldCallsign = new JTextField();
		textFieldCallsign.setBounds(744, 396, 155, 20);
		frame.getContentPane().add(textFieldCallsign);
		textFieldCallsign.setColumns(10);

		JLabel lblJoinUnit = new JLabel("Transfer to Unit");
		lblJoinUnit.setForeground(Color.BLACK);
		lblJoinUnit.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblJoinUnit.setBounds(744, 375, 162, 20);
		frame.getContentPane().add(lblJoinUnit);

		JButton btnTransfer = new JButton("Transfer");
		btnTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnTransfer.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnTransfer.setForeground(Color.BLACK);
		btnTransfer.setBounds(954, 421, 97, 23);
		frame.getContentPane().add(btnTransfer);

		JButton btnClose = new JButton("Close");
		btnClose.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				if (gameWindow.cqbWindowOpen) {
					gameWindow.cqbWindowOpen = false;
				}

				for(BulkTrooper bulkTrooper : bulkTroopers) {
					
					if(GameWindow.gameWindow.game.getPhase() == 1) {
						if(bulkTrooper.trooper.spentPhase1 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					} else {
						if(bulkTrooper.trooper.spentPhase2 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					}
					
				}
				
				frame.dispose();

			}
		});
		btnClose.setBounds(998, 642, 89, 23);
		frame.getContentPane().add(btnClose);

		JButton btnClear = new JButton("Clear Aim");
		btnClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.storedAimTime.clear();
					bulkTrooper.targetTroopers.clear();
					bulkTrooper.setTargets();
				}
			}
		});
		btnClear.setForeground(Color.BLACK);
		btnClear.setBounds(954, 570, 97, 23);
		frame.getContentPane().add(btnClear);

		JButton btnResetFp = new JButton("Reset FP");
		btnResetFp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.fatigueSystem.fatiguePoints.set(0.0);
				}

				GameWindow.gameWindow.conflictLog.addNewLine("Reset FP for selected troopers.");

			}
		});
		btnResetFp.setForeground(Color.BLACK);
		btnResetFp.setBounds(883, 642, 111, 23);
		frame.getContentPane().add(btnResetFp);

		JButton btnPass = new JButton("Pass");
		btnPass.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					actionSpent(bulkTrooper.trooper);
				}
				refreshIndividualList();
			}
		});
		btnPass.setForeground(Color.BLACK);
		btnPass.setBounds(10, 30, 115, 23);
		frame.getContentPane().add(btnPass);

		JButton button_5_1_1 = new JButton("Select Shooters");
		button_5_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();
				
				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1.setForeground(Color.BLACK);
		button_5_1_1.setBounds(187, 57, 136, 23);
		frame.getContentPane().add(button_5_1_1);

		JButton button_5_1_1_1 = new JButton("Select Aiming");
		button_5_1_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1_1.setForeground(Color.BLACK);
		button_5_1_1_1.setBounds(187, 30, 136, 23);
		frame.getContentPane().add(button_5_1_1_1);

		JLabel lblLauncher = new JLabel("Launcher");
		lblLauncher.setForeground(Color.BLACK);
		lblLauncher.setFont(new Font("Calibri", Font.PLAIN, 16));
		lblLauncher.setBounds(10, 596, 136, 20);
		frame.getContentPane().add(lblLauncher);

		JLabel lblGrenade = new JLabel("Grenade: ");
		lblGrenade.setForeground(Color.BLACK);
		lblGrenade.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblGrenade.setBounds(10, 484, 136, 31);
		frame.getContentPane().add(lblGrenade);

		comboBoxGrenade = new JComboBox();
		comboBoxGrenade.setBounds(10, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenade);

		comboBoxGrenadeTargets = new JComboBox();
		comboBoxGrenadeTargets.setBounds(157, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenadeTargets);

		JLabel label_16_1 = new JLabel("Taget Individual: ");
		label_16_1.setForeground(Color.BLACK);
		label_16_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16_1.setBounds(157, 484, 121, 31);
		frame.getContentPane().add(label_16_1);

		JLabel lblOr = new JLabel("OR");
		lblOr.setForeground(Color.BLACK);
		lblOr.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblOr.setBounds(20, 533, 16, 31);
		frame.getContentPane().add(lblOr);

		JLabel lblX = new JLabel("X:");
		lblX.setForeground(Color.BLACK);
		lblX.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblX.setBounds(71, 536, 16, 31);
		frame.getContentPane().add(lblX);

		spinnerGrenadeX = new JSpinner();
		spinnerGrenadeX.setBounds(86, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeX);

		JLabel lblY = new JLabel("Y:");
		lblY.setForeground(Color.BLACK);
		lblY.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblY.setBounds(135, 536, 16, 31);
		frame.getContentPane().add(lblY);

		spinnerGrenadeY = new JSpinner();
		spinnerGrenadeY.setBounds(150, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeY);

		JLabel lblHex = new JLabel("Hex:");
		lblHex.setForeground(Color.BLACK);
		lblHex.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblHex.setBounds(38, 533, 40, 31);
		frame.getContentPane().add(lblHex);

		JLabel label_10_1 = new JLabel("OR");
		label_10_1.setForeground(Color.BLACK);
		label_10_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10_1.setBounds(200, 533, 16, 31);
		frame.getContentPane().add(label_10_1);

		comboBoxBuilding = new JComboBox();
		comboBoxBuilding.setSelectedIndex(-1);
		comboBoxBuilding.setBounds(298, 538, 136, 20);
		frame.getContentPane().add(comboBoxBuilding);

		JLabel lblBuilding_1 = new JLabel("Building:");
		lblBuilding_1.setForeground(Color.BLACK);
		lblBuilding_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblBuilding_1.setBounds(226, 533, 62, 31);
		frame.getContentPane().add(lblBuilding_1);

		spinnerTargetRoom = new JSpinner();
		spinnerTargetRoom.setBounds(71, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetRoom);

		JLabel lblTargetRoom = new JLabel("Room:");
		lblTargetRoom.setForeground(Color.BLACK);
		lblTargetRoom.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTargetRoom.setBounds(10, 567, 53, 31);
		frame.getContentPane().add(lblTargetRoom);

		spinnerTargetFloor = new JSpinner();
		spinnerTargetFloor.setBounds(170, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetFloor);

		JLabel lblFloor = new JLabel("Floor:");
		lblFloor.setForeground(Color.BLACK);
		lblFloor.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblFloor.setBounds(123, 569, 53, 31);
		frame.getContentPane().add(lblFloor);

		JButton btnThrow = new JButton("Throw");
		btnThrow.setBounds(303, 505, 125, 23);
		frame.getContentPane().add(btnThrow);

		spinnerThrowBonus = new JSpinner();
		spinnerThrowBonus.setBounds(308, 570, 40, 20);
		frame.getContentPane().add(spinnerThrowBonus);

		spinnerThrowEALBonus = new JSpinner();
		spinnerThrowEALBonus.setBounds(430, 570, 39, 20);
		frame.getContentPane().add(spinnerThrowEALBonus);

		JLabel label_15 = new JLabel("Other Bonus:");
		label_15.setForeground(Color.BLACK);
		label_15.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_15.setBounds(226, 567, 87, 31);
		frame.getContentPane().add(label_15);

		JLabel lblEalBonus = new JLabel("EAL Bonus:");
		lblEalBonus.setForeground(Color.BLACK);
		lblEalBonus.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblEalBonus.setBounds(354, 567, 80, 31);
		frame.getContentPane().add(lblEalBonus);

		JComboBox comboBoxLauncher = new JComboBox();
		comboBoxLauncher.setBounds(10, 617, 136, 20);
		frame.getContentPane().add(comboBoxLauncher);

		spinnerLauncherBonus = new JSpinner();
		spinnerLauncherBonus.setBounds(157, 617, 74, 20);
		frame.getContentPane().add(spinnerLauncherBonus);

		JLabel label_20 = new JLabel("X:");
		label_20.setForeground(Color.BLACK);
		label_20.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_20.setBounds(236, 614, 16, 31);
		frame.getContentPane().add(label_20);

		spinnerLauncherX = new JSpinner();
		spinnerLauncherX.setBounds(251, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherX);

		JLabel label_21 = new JLabel("Y:");
		label_21.setForeground(Color.BLACK);
		label_21.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_21.setBounds(300, 614, 16, 31);
		frame.getContentPane().add(label_21);

		spinnerLauncherY = new JSpinner();
		spinnerLauncherY.setBounds(315, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherY);

		JLabel label_22 = new JLabel("Target Hex:");
		label_22.setForeground(Color.BLACK);
		label_22.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_22.setBounds(261, 597, 87, 23);
		frame.getContentPane().add(label_22);

		JLabel label_19_1 = new JLabel("Other Bonus:");
		label_19_1.setForeground(Color.BLACK);
		label_19_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_19_1.setBounds(154, 593, 87, 23);
		frame.getContentPane().add(label_19_1);

		JButton btnShootHex = new JButton("Shoot Hex");
		btnShootHex.setBounds(364, 616, 89, 23);
		frame.getContentPane().add(btnShootHex);

		JComboBox comboBoxAmmoTypeLauncher = new JComboBox();
		comboBoxAmmoTypeLauncher.setSelectedIndex(-1);
		comboBoxAmmoTypeLauncher.setBounds(10, 644, 136, 20);
		frame.getContentPane().add(comboBoxAmmoTypeLauncher);

		JComboBox comboBoxLauncherConcealment = new JComboBox();
		comboBoxLauncherConcealment.setBounds(152, 644, 136, 20);
		frame.getContentPane().add(comboBoxLauncherConcealment);

		chckbxGuided = new JCheckBox("Guided");
		chckbxGuided.setForeground(Color.WHITE);
		chckbxGuided.setBackground(Color.DARK_GRAY);
		chckbxGuided.setBounds(796, 469, 80, 23);
		frame.getContentPane().add(chckbxGuided);
		
		JButton btnCreateTransfer = new JButton("Create & Transfer");
		btnCreateTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Adds new unit 
				// Splits unit 
				ArrayList<Trooper> individuals = new ArrayList<Trooper>();
				generateSquad squad = new generateSquad("Clone Trooper Phase 1", "Empty");
				individuals = squad.getSquad();
				Unit newUnit = new Unit(textFieldCallsign.getText(), 0, 0, individuals, 100, 0, 100, 0, 0, 20, 0, unit.behavior);
				
				//Unit newUnit = unit.copyUnit(unit); 
				newUnit.side = unit.side;
				newUnit.initiative = unit.initiative;
				newUnit.organization = unit.organization;
				unit.organization = unit.organization; 
				
				newUnit.concealment = unit.concealment;
				newUnit.suppression = unit.suppression;
				newUnit.moral = unit.moral;
				newUnit.cohesion = unit.cohesion;
				newUnit.company = unit.company;
				newUnit.X = unit.X;
				newUnit.Y = unit.Y;
				newUnit.behavior = unit.behavior;
				newUnit.lineOfSight = new ArrayList<Unit>(unit.lineOfSight);
				//Collections.copy(newUnit.lineOfSight, unit.lineOfSight);
				//newUnit.lineOfSight = Collections.copy(unit.lineOfSight);
				gameWindow.initiativeOrder.add(newUnit);
				
				gameWindow.rollInitiativeOrder();
				gameWindow.refreshInitiativeOrder();
				
				// Loops through initiative order
				// Finds units that have LOS with this unit 
				// Adds new unit to the spotting units LOS
				
				for(Unit initUnit : gameWindow.initiativeOrder) {
					
					if(initUnit.lineOfSight.contains(unit)) {
						initUnit.lineOfSight.add(newUnit);
					}
					
				}
				
				
				// Finds newUnit's company 
				// Adds unit to company 
				for(int i = 0; i < gameWindow.companies.size(); i++) {
					
					if(gameWindow.companies.get(i).getName().equals(newUnit.company) && gameWindow.companies.get(i).getSide().equals(newUnit.side)) {
						gameWindow.companies.get(i).updateUnit(unit);
						gameWindow.companies.get(i).addUnit(newUnit);
						// Adds companies to setupWindow
						gameWindow.confirmCompany(gameWindow.companies.get(i), i);
						//f.dispose();
						
					}
					
				}
				
				
				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnCreateTransfer.setForeground(Color.BLACK);
		btnCreateTransfer.setBounds(909, 395, 142, 23);
		frame.getContentPane().add(btnCreateTransfer);
		frame.setVisible(true);
	}

	public boolean trooperAlreadyAdded(Trooper trooper) {

		for (BulkTrooper bulkTrooper : bulkTroopers) {

			if (bulkTrooper.trooper.compareTo(trooper))
				return true;

		}

		return false;
	}

	// Creates bulk trooper classes and populates the arraylist
	public void setIndividuals() {

		for (Trooper trooper : unit.individuals) {
			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Sets bulk troopers for those in CQB
	public void setIndividuals(ArrayList<Trooper> cqbt) {

		for (Trooper trooper : cqbt) {

			// System.out.println("Trooper: "+trooper.name+", Code:
			// "+System.identityHashCode(trooper));
			// System.out.println("CQB Target: "+trooper.closeCombatTarget.name+", Code:
			// "+System.identityHashCode(trooper.closeCombatTarget));

			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Updates all combo boxes
	public void setComboBoxes() {

		// Adds sup targets to dropdown menu
		setSuppressiveFireTargets();

		// Spotting Combo Boxes
		setSpottingUnits();

		// Set focus unit
		setTargetFocus();

	}

	public void setTargetFocus() {
		targetFocusLock = true; 

		targetedFireFocus.removeAllItems();
		targetedFireFocus.addItem("None");

		for (Unit unit : getValidTargetUnits()) {
			targetedFireFocus.addItem(unit.callsign);
		}

		targetedFireFocus.setSelectedIndex(0);
		
		targetFocusLock = false;
	}

	public ArrayList<Unit> getValidTargetUnits() {
		ArrayList<Unit> validTargetUnits = new ArrayList<>();

		for (Unit unit : targetUnits) {

			boolean validTarget = true;

			for (BulkTrooper trooper : getSelectedBulkTroopers()) {

				boolean hasValidTarget = false;

				for (Trooper targetTrooper : unit.individuals) {

					if (trooper.targetTroopers.contains(targetTrooper)) {
						hasValidTarget = true;
					}
				}

				if (!hasValidTarget) {
					validTarget = false;
				}

			}

			if (validTarget && !validTargetUnits.contains(unit)) {
				validTargetUnits.add(unit);
			}

		}

		return validTargetUnits;
	}

	// Sets spotting combo boxes
	public void setSpottingUnits() {

		for (Unit losUnit : targetUnits) {

			comboBoxSpottingUnits.addItem(losUnit.callsign);

		}

	}

	public void setSuppressiveFireTargets() {

		comboBoxTargetUnits.removeAllItems();
		comboBoxTargetUnits.addItem("None");
		if (unit.lineOfSight.size() < 1)
			return;

		for (Unit unit : targetUnits) {

			comboBoxTargetUnits.addItem(unit.callsign);
		}

		comboBoxTargetUnits.setSelectedIndex(0);

	}

	public int getRWSSuppressive(Trooper trooper) {
		// System.out.println("Get rws");
		int rws = 0;
		if (trooper == null) {
			// System.out.println("Trooper is null");
			return rws;
		}

		String weaponType = new Weapons().findWeapon(trooper.wep).type;

		if (weaponType.equals("Rifle")) {
			// System.out.println("Match: Trooper rifle rws: " + trooper.rifleRWS);
			rws = trooper.getSkill("Rifle");
		} else if (weaponType.equals("Heavy")) {
			// System.out.println("Match: Trooper Heavy rws: " + trooper.heavyRWS);
			rws = trooper.getSkill("Heavy");
		} else if (weaponType.equals("Subgun")) {
			rws = trooper.getSkill("Subgun");
		} else if (weaponType.equals("Launcher")) {
			rws = trooper.getSkill("Launcher");
		} else if (weaponType.equals("Pistol")) {
			rws = trooper.getSkill("Pistol");
		}

		// Apply GURPS missing arm penalty
		if (trooper.disabledArms > 0) {
			rws -= 20;
		}

		return rws;
	}

	// Suppressive fire action
	public void fireSuppressive(Trooper trooper) {
		// System.out.println("Line 750, suppression pass");
		Weapons weapon = new Weapons().findWeapon(trooper.wep);
		Unit targetUnit = unit.lineOfSight.get(comboBoxTargetUnits.getSelectedIndex());
		Random rand = new Random();

		int shots = weapon.suppressiveROF;
		boolean canShoot;
		canShoot = trooper.inventory.fireShots(shots, new Weapons().findWeapon(trooper.wep));

		// Checks for out of ammo
		if (!canShoot) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			// textPaneSuppressiveFire.setText("OUT OF AMMO");
			return;
		}

		int RWS = 0;
		RWS = getRWSSuppressive(trooper);

		if (RWS < 5) {
			RWS = 5;
		}

		int bonus = 0;

		// Subtracts ammo
		if (trooper.ammo < shots) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			return;
		}

		if (shots == 0) {
			gameWindow.conflictLog.addNewLineToQueue("Select shots!");
			return;
		}

		Trooper target = null;
		// System.out.println("Line 783, suppression pass");

		// Gets target from selected unit
		if (targetUnit.getTroopers() == null || targetUnit.getSize() < 1 || allDead(targetUnit)) {
			gameWindow.conflictLog.addNewLineToQueue("No Targets in Unit");
			return;
		}

		boolean rolling = true;
		while (rolling) {
			// System.out.println("Line 794, rolling pass");
			int roll = rand.nextInt(targetUnit.getSize());
			target = targetUnit.getTroopers().get(roll);
			if (target.alive) {
				rolling = false;
			}
		}

		if (target != null) {

			// System.out.println("Line 808, suppression pass");
			// Sets target unit
			targetUnit = null;

			// Loops through intiiative order units and then individuals
			// Finds target's unit
			for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
				Unit tempUnit = gameWindow.initiativeOrder.get(i);
				ArrayList<Trooper> tempTroopers = tempUnit.getTroopers();
				for (int j = 0; j < tempUnit.getSize(); j++) {
					if (tempTroopers.get(j).compareTo(target)) {
						targetUnit = tempUnit;
					}
				}
			}

			if (targetUnit == null) {
				return;
			}

			if (weapon.tracers) {
				trooper.firedTracers = true;
			} else {
				trooper.firedTracers = false;
			}

			// System.out.println("Weapon: "+weapon);
			// System.out.println("RWS: "+RWS);
			TargetedFire targetedFire = new TargetedFire(RWS, bonus, weapon, shots, target, trooper, targetUnit, unit,
					true);

			// Get hits
			if (targetedFire != null) {

				int hits = targetedFire.getHits();
				int TN = targetedFire.getTN();

				// System.out.println("Line 849, suppression pass");

				gameWindow.conflictLog.addNewLineToQueue("SUPPRESSIVE FIRE: " + unit.side + "::  " + unit.callsign
						+ " to " + targetUnit.side + "::  " + targetUnit.callsign
						+ "\nSuppressive Fire Results:\nHITS: " + hits + "\n" + "TN: " + TN);
				// Subtracts suppression, moral and organization
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
					if (gameWindow.initiativeOrder.get(i).compareTo(targetUnit)) {
						// System.out.println("Pass suppression");
						Unit tempUnit = gameWindow.initiativeOrder.get(i);

						int x = tempUnit.X;
						int y = tempUnit.Y;

						for (Unit potentialTarget : gameWindow.initiativeOrder) {

							if (potentialTarget.X == x && potentialTarget.Y == y) {
								if (potentialTarget.suppression + hits / 2 < 100) {
									potentialTarget.suppression += hits / 2;
								} else {
									potentialTarget.suppression = 100;
								}
								if (potentialTarget.organization - hits > 0) {
									potentialTarget.organization -= hits;
								} else {
									potentialTarget.organization = 0;
								}
							}

						}

						if (tempUnit.suppression + hits / 2 < 100) {
							tempUnit.suppression += hits / 2;
						} else {
							tempUnit.suppression = 100;
						}
						if (tempUnit.organization - hits > 0) {
							tempUnit.organization -= hits;
						} else {
							tempUnit.organization = 0;
						}
						/*
						 * if (tempUnit.moral - hits > 0) { tempUnit.moral -= hits; } else {
						 * tempUnit.moral = 0; }
						 */

						for (Unit collateralUnit : GameWindow.gameWindow.initiativeOrder) {

							if (collateralUnit.X != tempUnit.X || collateralUnit.Y != tempUnit.Y
									|| tempUnit.compareTo(collateralUnit)) {
								continue;
							}

							if (collateralUnit.suppression + hits / 2 < 100) {
								collateralUnit.suppression += hits / 2;
							} else {
								collateralUnit.suppression = 100;
							}
							if (collateralUnit.organization - hits > 0) {
								collateralUnit.organization -= hits;
							} else {
								collateralUnit.organization = 0;
							}

						}

						int trooperHits = 0;
						// Checks each hit for a strike against a individual in the target unit
						for (int j = 0; j < hits; j++) {
							int roll = rand.nextInt(100) + 1;
							int hitTN = 1;

							if (target.getBuilding() != null && target.getBuilding().getHexSize() < 200) {
								hitTN = 11;
							} else if (target.getBuilding() != null && target.getBuilding().getHexSize() < 400) {
								hitTN = 6;
							}

							if (roll <= hitTN) {
								trooperHits++;
							}
						}

						if (trooperHits > 0) {
							// System.out.println("pass trooper hits");
							ResolveHits resolveHits = new ResolveHits(target, trooperHits, weapon,
									gameWindow.conflictLog, tempUnit, unit, gameWindow);
							resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
							target = resolveHits.returnTarget();

						}

						tempUnit.setIndividual(target, target.number);

						gameWindow.initiativeOrder.set(i, tempUnit);

					}
				}

			}

			trooper.ammo -= shots;

			// System.out.println("Line 926, suppression pass");

			if (shots > 10) {
				int roll = rand.nextInt(8);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			} else {
				int roll = rand.nextInt(6);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			}

			// window.openUnit.troopers.set(index, trooper);

			// window.openUnit.refreshIndividuals();

			// Adds action point, if it is not a free action
			if (!chckbxFreeAction.isSelected()) {
				actionSpent(trooper);
			}

		}

	}

	public void actionSpent(Trooper trooper) {
		
		System.out.println("Action spent");
		
		if (game.getPhase() == 1)
			trooper.spentPhase1++;
		else
			trooper.spentPhase2++;

	}

	// Gets selected individuals from bulk trooper
	public ArrayList<Trooper> getSelectedTroopers() {

		ArrayList<Trooper> troopers = new ArrayList<Trooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals 2, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index).trooper);

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	public ArrayList<BulkTrooper> getSelectedBulkTroopers() {

		ArrayList<BulkTrooper> troopers = new ArrayList<BulkTrooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index));

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	// Gets trooper and returns trooper from the trooper's number
	// Might not work
	/*
	 * public Trooper findTrooperFromString(String trooperString) {
	 * 
	 * String value = trooperString; String numString = "";
	 * System.out.println("Find Trooper from string 1"); for(int i = 0; i <
	 * value.length() - 1; i++) {
	 * System.out.println("Find Trooper from string loop"); char c =
	 * value.charAt(i); if(c == ';') break; else if(Character.isDigit(c)) {
	 * numString += c; } }
	 * 
	 * 
	 * Trooper trooper = unit.individuals.get(Integer.parseInt(numString) - 1);
	 * System.out.println("Find Trooper from string 2, trooper: "+trooper.toString()
	 * ); return trooper; }
	 */

	public boolean allDead(Unit unit) {

		boolean allDead = true;

		for (Trooper trooper : unit.individuals)
			if (trooper.alive)
				allDead = false;

		return allDead;

	}

	// Refreshes front end changes to the troopers
	public void refreshIndividualList() {
		individualListLock = true; 
		
		int[] indices = individualsList.getSelectedIndices();

		individualsList.removeAll();

		DefaultListModel listModel = new DefaultListModel();

		for (BulkTrooper individual : bulkTroopers) {

			listModel.addElement(individual.bulkToString());

		}

		individualsList.setModel(listModel);

		individualsList.setSelectedIndices(indices);

		if (openUnit != null)
			openUnit.refreshIndividuals();
		
		individualListLock = false;
	}

	private class BulkTrooper {
		public Trooper trooper;
		public int spentCA;
		public int CA;
		public ArrayList<Trooper> targetTroopers = new ArrayList<Trooper>();
		public Trooper bestTargetTrooper = null;
		public TargetedFire tempTF;
		public TargetedFire targetedFire;
		public boolean possibleShots = true;
		public String wepPercent;
		public int sl;
		public Shoot shoot;
		public boolean shootReset = true;

		public BulkTrooper(Trooper trooper) {
			// System.out.println("Constructor");
			this.trooper = trooper;
			spentCA = 0;
			setAction();
			setTargets();

			this.CA = trooper.combatActions;
			this.wepPercent = trooper.weaponPercent;
			this.sl = trooper.sl;

		}

		// Returns a string for the individual output in the individuals list
		// Shows things like spent ca and ca
		public String bulkToString() {

			String rslt = "";
			rslt += trooper.number + "; " + trooper.name + " ";

			if (targetedFire != null && !targetedFire.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + targetedFire.fullAutoResults + ", ";
			} else if (tempTF != null && !tempTF.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + tempTF.fullAutoResults + ", ";
			}

			if (trooper.storedAimTime.size() > 0)
				rslt += "AIMING: ";

			if (trooper.HD) {
				rslt += "HUNKERED DOWN: ";
			}

			if (trooper.inCover) {
				rslt += "IN COVER: ";
			}

			if (trooper.disabledLegs > 1) {
				rslt += "IMOBALIZED: ";
			} else if (trooper.disabledLegs > 0) {
				rslt += "CRIP-LEG: ";
			}

			if (!trooper.conscious) {
				rslt += "UNCONSCIOUS: ";
			}

			if (trooper.personalShield != null)
				rslt += "CSS: " + trooper.personalShield.currentShieldStrength + " ";

			if (trooper.physicalDamage > 0)
				rslt += "PD: " + trooper.physicalDamage + ", ";

			if (trooper.ionDamage > 0)
				rslt += "ID: " + trooper.ionDamage + ", ";
			rslt += "P1: " + trooper.spentPhase1 + "/" + trooper.P1 + ", P2: " + trooper.spentPhase2 + "/" + trooper.P2
					+ " ";
			rslt += "CA: " + spentCA + "/" + CA + ", ";

			ArrayList<Trooper> spotted = new ArrayList<>();

			for (Spot spot : trooper.spotted) {

				for (Trooper trooper : spot.spottedIndividuals) {

					if (validTarget(trooper) && !spotted.contains(trooper)) {
						spotted.add(trooper);
					}

				}

			}

			rslt += "SC: " + spotted.size() + ", ";
			rslt += wepPercent + "%, SL: " + sl + ", ";
			rslt += "Ammo: " + trooper.ammo + ", ";
			rslt += "Weapon: " + trooper.wep;

			if (game.getPhase() == 1) {
				if (trooper.spentPhase1 >= trooper.P1 || trooper.spentPhase1 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			} else {
				if (trooper.spentPhase2 >= trooper.P2 || trooper.spentPhase2 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			}
			trooper.returnTrooperUnit(GameWindow.gameWindow).callsign +":: "
			String leaderType = trooper.leaderType == LeaderType.NONE ? "" : trooper.leaderType.toString()+":: ";
			
			return leaderType+ rslt;

		}

		public void setTargets() {

			targetTroopers.clear();

			for (Spot spot : trooper.spotted) {

				for (Trooper spottedTrooper : spot.spottedIndividuals)
					if (validTarget(spottedTrooper) && !targetTroopers.contains(spottedTrooper))
						targetTroopers.add(spottedTrooper);

			}

		}

		public void setAction() {

			trooper.setPCStats();
			CA = trooper.combatActions;
		}

	}

	public void aim(BulkTrooper bulkTrooper, int aimTime, Trooper targetTrooper) {
		// System.out.println("Target: "+targetTrooper.name);
		Trooper trooper = bulkTrooper.trooper;
		int maxAim = new Weapons().findWeapon(trooper.wep).aimTime.size();
		// System.out.println("Trooper Stored Aim Size:
		// "+bulkTrooper.trooper.storedAimTime.size());
		// Get stored aim time
		Hashtable<Trooper, Integer> storedAim;

		// If set to auto, uses maximum amount of remaining aim
		if (aimTime <= 0) {

			if (trooper.storedAimTime.containsKey(targetTrooper)) {
				// System.out.println("Pass 1");
				int additionalAim = bulkTrooper.CA - bulkTrooper.spentCA;
				int currentAim = trooper.storedAimTime.get(targetTrooper);
				int newAim;

				if (currentAim + additionalAim > maxAim - 1) {
					// System.out.println("Pass 1-1");
					newAim = maxAim;
					bulkTrooper.spentCA += maxAim - currentAim;
				} else {
					// System.out.println("Pass 1-2");
					newAim = currentAim += additionalAim;
					bulkTrooper.spentCA += additionalAim;
				}

				trooper.storedAimTime.put(targetTrooper, newAim);
			} else {
				// System.out.println("Pass 2");
				trooper.storedAimTime.clear();
				int newAim = bulkTrooper.CA - bulkTrooper.spentCA;
				trooper.storedAimTime.put(targetTrooper, newAim);
				bulkTrooper.spentCA += newAim;
			}

		}
		// Otherwise, goes to specified aim
		else {
			// System.out.println("Pass 3");
			trooper.storedAimTime.clear();
			trooper.storedAimTime.put(targetTrooper, aimTime - 1);
			bulkTrooper.spentCA += aimTime - 1;
		}

	}

	public void setValidTarget(BulkTrooper bulkTrooper) throws Exception {
		Trooper targetTrooper;

		targetTrooper = getTargetTrooper(bulkTrooper);

		if (validTarget(targetTrooper)) {
			// PCShots(bulkTrooper, targetTrooper);
			bulkTrooper.shoot = ShootUtility.setTarget(bulkTrooper.trooper.returnTrooperUnit(GameWindow.gameWindow), targetTrooper.returnTrooperUnit(gameWindow),
					bulkTrooper.shoot, bulkTrooper.trooper, targetTrooper, bulkTrooper.trooper.wep, -1);
			if(bulkTrooper.shootReset) {
				bulkTrooper.shoot.spentCombatActions = 0; 
				bulkTrooper.shoot.previouslySpentCa = 0;
			}
		} else {
			// SC: # displayed in list could be spotted troopers 
			// Multithreading could be leading to errors where ui doesn't get set or lists don't get updated / cleared 
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " no valid target");
		}

	}

	public void bulkTrooperShoot(BulkTrooper bulkTrooper) throws Exception {

		Trooper targetTrooper;

		if (bulkTrooper.targetedFire != null) {
			targetTrooper = bulkTrooper.targetedFire.targetTrooper;
		} else if (bulkTrooper.tempTF != null) {
			targetTrooper = bulkTrooper.tempTF.targetTrooper;
		} else {
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " trooper shot no valid target exception.");
		}

		if (validTarget(targetTrooper))
			PCFire(bulkTrooper, targetTrooper);
		else {
			bulkTrooper.targetedFire = null;
			bulkTrooper.tempTF = null;
			GameWindow.gameWindow.conflictLog.addNewLineToQueue("No valid target. Ending string of fire.");
			return;
		}

		if (bulkTrooper.targetedFire == null)
			return;
		else
			bulkTrooper.targetedFire.EAL += (int) spinnerConsecutiveEALBonus.getValue();

		if (bulkTrooper.targetedFire.TN < 0 || !validTarget(targetTrooper)) {

			// bulkTrooper.targetTroopers.remove(targetTrooper);
			GameWindow.gameWindow.conflictLog
					.addNewLineToQueue("TN less than 1, target may be dead. Ending string of fire.");
			bulkTrooper.targetTroopers.clear();
			bulkTrooper.setTargets();
			bulkTrooper.targetedFire = null;
			bulkTrooper.bestTargetTrooper = null;
			bulkTrooper.tempTF = null;

			for (BulkTrooper t : bulkTroopers) {
				t.targetTroopers.clear();
				t.setTargets();
			}

			bulkTrooper.trooper.storedAimTime.clear();
			if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
				bulkTrooper.trooper.storedAimTime.clear();
				actionSpent(bulkTrooper.trooper);

			}
			return;
		} else {
			// PCShots(bulkTrooper, targetTrooper);
		}

		if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
			bulkTrooper.trooper.storedAimTime.clear();
			actionSpent(bulkTrooper.trooper);

		}
	}

	// Loops through units in initiaitive order
	// Looks for unit containing indvididual
	// Returns unit
	public Unit findTrooperUnit(Trooper trooper) {
		ArrayList<Unit> units = gameWindow.initiativeOrder;

		for (Unit unit : units) {

			for (Trooper trooper1 : unit.getTroopers()) {

				if (trooper1.compareTo(trooper)) {
					// System.out.println("Found Unit: "+unit.callsign);
					return unit;
				}

			}

		}

		return null;

	}

	public boolean validTarget(Trooper target) {

		if (target == null || !target.alive || !target.conscious || target.HD) {
			return false;
		}

		return true;
	}

	public Trooper getTargetTrooper(BulkTrooper bulkTrooper) throws Exception {
		if(bulkTrooper.trooper.storedAimTime.size() > 0) {
			
			for(Trooper target : bulkTrooper.targetTroopers) {
				if(bulkTrooper.trooper.storedAimTime.containsKey(target)) {
					return target;
				}
			}
			
		}
		
		if (bulkTrooper.bestTargetTrooper != null && validTarget(bulkTrooper.bestTargetTrooper))
			return bulkTrooper.bestTargetTrooper;
		else
			bulkTrooper.bestTargetTrooper = null;

		/**/
		// Sets random target trooper
		// System.out.println("Target Troopers size:
		// "+bulkTrooper.targetTroopers.size());
		// shuffleList(bulkTrooper.targetTroopers);

		Trooper targetTrooper = null;

		Unit targetUnit = null;

		Unit trooperUnit = GameWindow.gameWindow.findTrooperUnit(bulkTrooper.trooper);

		for (Unit unit : GameWindow.gameWindow.initiativeOrder) {
			if (unit.side.equals(trooperUnit.side) || unit.individuals.size() < 1)
				continue;

			boolean validTargets = false;

			for (Trooper trooper : unit.individuals) {
				if (validTarget(trooper) && bulkTrooper.targetTroopers.contains(trooper)) {
					// System.out.println("Valid Targets");
					validTargets = true;
					break;
				}
			}

			if (!validTargets)
				continue;

			if (targetUnit == null) {
				targetUnit = unit;
			} else if (GameWindow.hexDif(targetUnit, trooperUnit) > GameWindow.hexDif(unit, trooperUnit)) {
				targetUnit = unit;
			}

		}

		if (targetedFireFocus.getSelectedIndex() > 0 && getValidTargetUnits().size() > 0) {
			targetUnit = getValidTargetUnits().get(targetedFireFocus.getSelectedIndex() - 1);
			System.out.println("Focus Target Unit: " + targetUnit.callsign);
		}

		if (targetUnit == null)
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " getTargetTrooper Target Unit is Null");

		ArrayList<Trooper> targetTrooperArray = new ArrayList<Trooper>();
		for (Trooper trooper : targetUnit.individuals) {
			if (bulkTrooper.targetTroopers.contains(trooper)) {
				targetTrooperArray.add(trooper);
			}
		}

		if (targetTrooperArray.size() == 0) {
			throw new Exception(
					bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " targetTrooperArray is empty.");
		}

		targetTrooper = targetTrooperArray.get(DiceRoller.randInt(0, targetTrooperArray.size() - 1));

		for (Trooper trooper : targetUnit.individuals) {
			if (!targetTrooper.inCover)
				break;

			if (!bulkTrooper.targetTroopers.contains(trooper))
				continue;

			targetTrooper = trooper;
		}

		bulkTrooper.bestTargetTrooper = targetTrooper;
		return targetTrooper;

	}

	public void PCFireGuiUpdates() {
		if (getSelectedBulkTroopers().size() < 1)
			return;

		int meanTN = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				meanTN += bulkTrooper.targetedFire.TN;
			else if (bulkTrooper.tempTF != null)
				meanTN += bulkTrooper.tempTF.TN;

		}
		meanTN /= getSelectedBulkTroopers().size();
		lblTn.setText("Mean TN: " + meanTN);

		int aimTime = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				aimTime += bulkTrooper.targetedFire.spentAimTime;
			else if (bulkTrooper.tempTF != null)
				aimTime += bulkTrooper.tempTF.spentAimTime;

		}
		aimTime /= getSelectedBulkTroopers().size();
		lblAimTime.setText("Mean Aim Time: " + aimTime);

		int possibleShots = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.targetedFire.possibleShots - bulkTrooper.targetedFire.shotsTaken;

			} else if (bulkTrooper.tempTF != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.tempTF.possibleShots - bulkTrooper.tempTF.shotsTaken;

			}

		}
		possibleShots /= getSelectedBulkTroopers().size();
		lblPossibleShots.setText("Mean Possible Shots: " + possibleShots);

		// lblAmmo.setText("Ammo: "+bulkTrooper.trooper.ammo);
		// lblCombatActions.setText("TF CA: "+bulkTrooper.CA);
		gameWindow.conflictLog.addQueuedText();
		gameWindow.refreshInitiativeOrder();
		// refreshTargets();

	}

	public void PCFire(BulkTrooper bulkTrooper, Trooper targetTrooper) {
		// TargetedFire tempTF = bulkTrooper.tempTF;

		Trooper trooper = bulkTrooper.trooper;

		boolean shots;

		if (chckbxFullAuto.isSelected()) {
			shots = trooper.inventory.fireShots(new Weapons().findWeapon(trooper.wep).fullAutoROF,
					new Weapons().findWeapon(trooper.wep));
		} else {
			int roll = new Random().nextInt(3) + 1;
			shots = trooper.inventory.fireShots(roll, new Weapons().findWeapon(trooper.wep));
		}

		// Checks for out of ammo
		if (!shots) {
			// textPaneTargetedFire.setText("OUT OF AMMO");
			gameWindow.conflictLog
					.addNewLineToQueue("Trooper: " + trooper.number + ": " + trooper.name + " is out of ammo");
			return;
		}

		if (new Weapons().findWeapon(trooper.wep).fullAutoROF == 0 && chckbxFullAuto.isSelected()) {
			gameWindow.conflictLog.addNewLineToQueue(
					"Trooper: " + trooper.number + ": " + trooper.name + "'s weapon is not full auto capable.");
		}

		Trooper shooterTrooper = trooper;

		Unit targetUnit = findTrooperUnit(targetTrooper);
		Unit shooterUnit = findTrooperUnit(shooterTrooper);

		for (Trooper t : bulkTrooper.targetTroopers) {
			if (shooterTrooper.storedAimTime.containsKey(t)) {
				targetTrooper = t;
				break;
			}
		}

		int maxAim = comboBoxAimTime.getSelectedIndex() - 1;

		TargetedFire tf = new TargetedFire(shooterTrooper, targetTrooper, shooterUnit, targetUnit, gameWindow, maxAim,
				bulkTrooper.CA - bulkTrooper.spentCA,
				(int) spinnerEALBonus.getValue() + (int) spinnerConsecutiveEALBonus.getValue(),
				(int) spinnerPercentBonus.getValue(), 0, shooterTrooper.wep);

		tf.spentCA = bulkTrooper.spentCA;

		if (bulkTrooper.targetedFire == null) {
			bulkTrooper.targetedFire = tf;
			// reaction = null;
			bulkTrooper.possibleShots = true;
		} else if (!tf.targetTrooper.compareTo(bulkTrooper.targetedFire.targetTrooper)) {
			bulkTrooper.targetedFire = tf;
		}

		bulkTrooper.targetedFire.PCHits = 0;

		if (bulkTrooper.possibleShots) {

			if (chckbxFullAuto.isSelected()) {
				bulkTrooper.targetedFire.fullAutoBurst(true);
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				} else if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 2;
				}
			} else {
				bulkTrooper.targetedFire.shot(comboBoxTargetZone.getSelectedIndex());
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				}
			}

			// System.out.println("TARGETED FIRE: ");
			// System.out.println("targetedFire.shotsTaken:
			// "+bulkTrooper.targetedFire.shotsTaken);
			// System.out.println("targetedFire.timeToReaction:
			// "+bulkTrooper.targetedFire.timeToReaction);
			/*
			 * if(targetedFire.shotsTaken >= targetedFire.timeToReaction &&
			 * targetedFire.shotsTaken != 0 && this.reaction == null && targetTrooper.alive
			 * && targetTrooper.conscious && targetTrooper.canAct(gameWindow.game)) { //
			 * React System.out.println("REACTION"); //ReactionToFireWindow reaction = new
			 * ReactionToFireWindow(shooterTrooper, targetTrooper, windowOpenTrooper,
			 * gameWindow); //this.reaction = reaction;
			 * 
			 * }
			 */
		}

		if (bulkTrooper.targetedFire.PCHits > 0) {
			ResolveHits resolveHits = new ResolveHits(targetTrooper, bulkTrooper.targetedFire.PCHits,
					new Weapons().findWeapon(shooterTrooper.wep), gameWindow.conflictLog,
					targetTrooper.returnTrooperUnit(gameWindow), shooterUnit, gameWindow);

			if (bulkTrooper.targetedFire.calledShot) {
				resolveHits.calledShot = true;
				resolveHits.calledShotBounds = bulkTrooper.targetedFire.calledShotBounds;

			}

			if (targetTrooper.returnTrooperUnit(gameWindow).suppression + bulkTrooper.targetedFire.PCHits < 100) {
				targetTrooper.returnTrooperUnit(gameWindow).suppression += bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).suppression = 100;
			}
			if (targetTrooper.returnTrooperUnit(gameWindow).organization - bulkTrooper.targetedFire.PCHits > 0) {
				targetTrooper.returnTrooperUnit(gameWindow).organization -= bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).organization = 0;
			}

			resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
			InjuryLog.InjuryLog.addTrooper(targetTrooper);
		}

		if (bulkTrooper.targetedFire.possibleShots <= bulkTrooper.targetedFire.shotsTaken) {
			// Shot ends
			/*
			 * lblPossibleShots.setText("Possible Shots: None");
			 * lblAimTime.setText("Aim Time: N/A"); lblTN.setText("Target Number: N/A");
			 */
			// reaction = null;
			bulkTrooper.possibleShots = false;
			// bulkTrooper.targetedFire = null;
			// PCShots(bulkTrooper);
		}

		if (chckbxFullAuto.isSelected()) {

			bulkTrooper.spentCA += 2;
		} else {

			bulkTrooper.spentCA++;
		}

		/*
		 * if(!targetTrooper.alive) {
		 * 
		 * if(chckbxMultipleTargets.isSelected()) {
		 * 
		 * targetedFire = null; possibleShots = true; reaction = null; PCShots(); } else
		 * { // Performed after swing worker is done actionSpent(openUnit, index);
		 * openUnit.openNext(true); f.dispose(); }
		 * 
		 * 
		 * }
		 */

		// setDetails(openTrooper);

	}

	// Gets weapon
	public Weapons getWeapon(Trooper trooper) {

		return new Weapons().findWeapon(trooper.wep);
	}

	public Unit findUnit(String callsign) {

		for (Unit unit : gameWindow.initiativeOrder)
			if (unit.callsign.equals(callsign))
				return unit;

		return null;
	}

	// Spot test
	public void spotTest(String targetCallsign, Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		// Find target unit
		Unit targetUnit = findUnit(targetCallsign);

		Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
				comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
				gameWindow);

		// Print results
		spotAction.displayResultsQueue(gameWindow, spotAction);

		// Set results in trooper
		trooper.spotted.add(spotAction);
		// Refresh trooper
		// refreshTrooper(trooper);
		// window.openUnit.troopers.set(index, trooper);

	}

	// Spot test
	public void spotTestAll(Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		for (Unit targetUnit : unit.lineOfSight) {

			Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
					comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
					gameWindow);

			spotAction.displayResultsQueue(gameWindow, spotAction);

			// Set results in trooper
			trooper.spotted.add(spotAction);
		}

	}

	public boolean hasTargets(BulkTrooper bulkTrooper) {

		return true;

	}

	public boolean freeAction() {
		return chckbxFreeAction.isSelected();
	}

	public void volley() {

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {

				InjuryLog.InjuryLog.addAlreadyInjured();
				ArrayList<BulkTrooper> troops = selectedBulkTroopers;

				ExecutorService es = Executors.newFixedThreadPool(16);

				for (BulkTrooper bulkTrooper : troops) {

					Shoot shoot = bulkTrooper.shoot;

					if (shoot == null)
						continue;

					es.submit(() -> {
						System.out.println("Submit");
						try {

							
							int shots = 1; 
							while (shoot.spentCombatActions < shoot.shooter.combatActions && 
									(validTarget(shoot.target) || comboBoxTargetUnits.getSelectedIndex() > 0)
									&& !shoot.outOfAmmo) {

								System.out.println("volley shot: "+shots);
								
								if (comboBoxTargetUnits.getSelectedIndex() > 0)
									shoot.suppressiveFire(shoot.wep.suppressiveROF);
								else if (chckbxFullAuto.isSelected())
									shoot.burst();
								else
									shoot.shot(chckbxGuided.isSelected());

								GameWindow.gameWindow.conflictLog.addNewLineToQueue("Results: " + shoot.shotResults);

								valleyValidTargetCheck(shoot, bulkTrooper);
								shots++;
								System.out.println("Volley CA test: "+(shoot.spentCombatActions < shoot.shooter.combatActions));
								System.out.println("Volley Valid Target Test: "+validTarget(shoot.target));
								System.out.println("Volley Valid Supp Target Test: "+(comboBoxTargetUnits.getSelectedIndex() > 0));
								System.out.println("Volley Out of Ammo Test: "+(!shoot.outOfAmmo));
							}
							
							
							
						} catch (Exception e) {
							e.printStackTrace();
						}
					});
					
					try {
						TimeUnit.MILLISECONDS.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				try {
					TimeUnit.MILLISECONDS.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				es.shutdown();

				return null;
			}

			@Override
			protected void done() {

				try {
					TimeUnit.MILLISECONDS.sleep(250);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
					if(!chckbxFreeAction.isSelected()) {
						System.out.println("volley action spent");
						actionSpent(bulkTrooper.trooper);
					}
				}
				
				System.out.println("volley gui updates");
				guiUpdates();
				refreshIndividualList();
				InjuryLog.InjuryLog.printResultsToLog();
				gameWindow.conflictLog.addQueuedText();
				// individualsList.setSelectedIndex(-1);

			}

		};

		worker.execute();

	}

	public void valleyValidTargetCheck(Shoot shoot, BulkTrooper bulkTrooper) throws Exception {
		if (!validTarget(shoot.target)) {
			bulkTrooper.setTargets();

			if (bulkTrooper.targetTroopers.size() > 0) {
				setValidTarget(bulkTrooper);

				if (comboBoxAimTime.getSelectedIndex() == 0)
					bulkTrooper.shoot.autoAim();

				if (comboBoxTargetZone.getSelectedIndex() > 0) {
					setCalledShotBounds(bulkTrooper.shoot);
				}
			}

		}
	}

	public void ordnanceComboboxes() {
		/*
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None"); Hex hex
		 * = GameWindow.gameWindow.findHex(trooperUnit.X, trooperUnit.Y); if
		 * (trooperBuilding == null && hex != null) { for (Building building :
		 * hex.buildings) {
		 * 
		 * comboBoxBuilding.addItem(building.name);
		 * 
		 * } comboBoxBuilding.setSelectedIndex(0); } else if (hex != null) {
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None");
		 * comboBoxBuilding.addItem("ALREADY INSIDE");
		 * comboBoxBuilding.setSelectedIndex(1); }
		 */
	}

	public void guiUpdates() {

		ArrayList<Shoot> shots = new ArrayList<>();

		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2");
				continue;
			}
			shots.add(bulkTrooper.shoot);
		}

		ShootUtility.shootGuiUpdate(lblPossibleShots, lblAimTime, lblTn, null, null, null, chckbxFullAuto, shots);
	}

	public void setCalledShotBounds(Shoot shoot) {
		if (shoot == null) {
			System.out.println("shoot is null set called shot bounds");
			return;
		}

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {
					int index = comboBoxTargetZone.getSelectedIndex();
					System.out.println("Size ALM Pre: " + shoot.sizeALM);
					if (index == 0) {
						System.out.println("Clear called shot");
						shoot.calledShotBounds.clear();
						shoot.calledShotLocation = "";
					} else {
						System.out.println("set called shot");
						shoot.setCalledShotBounds(comboBoxTargetZone.getSelectedIndex());
					}
					System.out.println("Size ALM POST: " + shoot.sizeALM);
					shoot.setALM();
					shoot.setEAL();
					shoot.setSingleTn();
					shoot.setFullAutoTn();
					shoot.setSuppressiveTn();
				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {

				guiUpdates();

			}

		};

		worker.execute();
	}

	public void bonuses() {

		for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2 bonuses");
				continue;
			}
			bulkTrooper.shoot.setBonuses((int) spinnerPercentBonus.getValue(), (int) spinnerEALBonus.getValue(),
					(int) spinnerConsecutiveEALBonus.getValue());
		}

		guiUpdates();

	}

	public void selected() {
		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {

					ExecutorService es = Executors.newFixedThreadPool(16);

					ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
					ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

					for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
						if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
							removeTrooper.add(bulkTrooper);
						}
					}

					for (BulkTrooper bulkTrooper : removeTrooper) {
						selectedBulkTroopers.remove(bulkTrooper);
					}

					for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
						if (selectedBulkTroopers.contains(bulkTrooper))
							continue;

						if (bulkTrooper.targetTroopers.size() > 0) {
							es.submit(() -> {
								System.out.println("Submit");
								try {
									
									if(comboBoxTargetUnits.getSelectedIndex() > 0)
										bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
												bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
									else 
										setValidTarget(bulkTrooper);

									if (comboBoxAimTime.getSelectedIndex() == 0)
										bulkTrooper.shoot.autoAim();

									if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
										setCalledShotBounds(bulkTrooper.shoot);
									}

								} catch (Exception e) {
									e.printStackTrace();
								}
							});
						}
						
						if(!selectedBulkTroopers.contains(bulkTrooper))
							selectedBulkTroopers.add(bulkTrooper);
					}

					/*
					 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					 * if(bulkTrooper.targetTroopers.size() < 1) { continue; }
					 * 
					 * 
					 * es.submit(() -> { System.out.println("Submit"); try {
					 * setValidTarget(bulkTrooper); } catch (Exception e) { e.printStackTrace(); }
					 * }); }
					 */

					es.shutdown();

					System.out.println("Finished Threads");

				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {
				/*
				 * targetedFireFocus.removeAllItems();
				 * targetedFireFocus.addItem("Targeted Fire Focus"); targetUnits.clear();
				 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
				 * 
				 * for(Trooper targetTrooper : bulkTrooper.targetTroopers) { Unit targetUnit =
				 * findTrooperUnit(targetTrooper);
				 * 
				 * if(targetUnits.contains(targetUnit)) continue;
				 * 
				 * targetUnits.add(targetUnit);
				 * targetedFireFocus.addItem(findTrooperUnit(targetTrooper).callsign);
				 * 
				 * }
				 * 
				 * }
				 */

				// System.out.println("Done");
				
				
				selectedGuiUpdates();
			}

		};

		worker.execute();
	}
	
	public void selectedGuiUpdates() {
		try {
			TimeUnit.MILLISECONDS.sleep(250);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		setTargetFocus();
		gameWindow.conflictLog.addQueuedText();
		// PCFireGuiUpdates();
		guiUpdates();
		System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-03-11 15:16:10.105
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-03-11 15:16:10.106
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-03-11 15:16:10.140
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Conflict;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.SwingWorker;

import Trooper.Trooper;
import Trooper.generateSquad;
import Unit.Unit;
import UtilityClasses.DiceRoller;
import UtilityClasses.ShootUtility;

import javax.swing.JButton;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;

import javax.swing.JSpinner;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.JList;
import javax.swing.JCheckBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionListener;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.util.SystemOutLogger;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import Actions.ReactionToFireWindow;
import Actions.Spot;
import Actions.TargetedFire;
import Company.Formation.LeaderType;
import Hexes.Building;
import Hexes.Hex;
import Injuries.Injuries;
import Injuries.ResolveHits;
import Items.Weapons;
import Shoot.Shoot;

import javax.swing.event.ListSelectionEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class BulkWindow {

	private String path = System.getProperty("user.dir") + "\\";
	// My vars

	public boolean targetFocusLock = false;
	public boolean individualListLock = false;
	public GameWindow gameWindow;
	public Game game;
	public ArrayList<BulkTrooper> bulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<BulkTrooper> selectedBulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<Unit> targetUnits = new ArrayList<Unit>();
	public Unit unit;
	public ArrayList<String> callsigns = new ArrayList<String>();
	public OpenUnit openUnit;

	// Jframe gui vars
	private JFrame frame;
	private JTextField textFieldDC;
	private JList individualsList;
	private JComboBox comboBoxTargetUnits;
	private JCheckBox chckbxFreeAction;
	private JSpinner caBonusSpinner;
	private JSpinner spinnerEALBonus;
	private JSpinner spinnerPercentBonus;
	private JComboBox comboBoxAimTime;
	private JCheckBox chckbxFullAuto;
	private JLabel lblAimTime;
	private JLabel lblTn;
	private JLabel lblPossibleShots;
	private JCheckBox chckbxLaser;
	private JCheckBox chckbxIrLaser;
	private JCheckBox chckbxThermals;
	private JCheckBox chckbxWeaponLights;
	private JCheckBox chckbxManualStance;
	private JComboBox comboBoxStance;
	private JSpinner spinnerNVGGen;
	private JTextField textFieldPen;
	private JComboBox comboBoxOF;
	private JComboBox comboBoxSpottingUnits;
	private JComboBox comboBoxScanArea;
	private JComboBox comboBoxAddUnit;
	private JList listSpottedUnitsArray;
	private JComboBox targetedFireFocus;
	private JCheckBox chckbxUnspottable;
	private JSpinner spinnerSpottingDifficulty;
	private JSpinner spinnerConsecutiveEALBonus;
	private JComboBox comboBoxWeapon;
	private JTextField textFieldCallsign;
	private JComboBox comboBoxTargetZone;
	private JComboBox comboBoxBuilding;
	private JComboBox comboBoxGrenadeTargets;
	private JComboBox comboBoxGrenade;
	private JSpinner spinnerGrenadeX;
	private JSpinner spinnerGrenadeY;
	private JSpinner spinnerTargetRoom;
	private JSpinner spinnerTargetFloor;
	private JSpinner spinnerThrowBonus;
	private JSpinner spinnerThrowEALBonus;
	private JSpinner spinnerLauncherBonus;
	private JSpinner spinnerLauncherX;
	private JSpinner spinnerLauncherY;
	private JCheckBox chckbxGuided;

	/**
	 * Create the application.
	 * 
	 * @wbp.parser.constructor
	 */
	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;

		initializeWindow();
		setIndividuals();
		refreshIndividualList();
		setComboBoxes();
	}

	public BulkWindow(ArrayList<Unit> units) {

		this.unit = units.get(0);
		this.gameWindow = GameWindow.gameWindow;
		this.game = GameWindow.gameWindow.game;
		this.openUnit = null;

		ArrayList<String> sides = new ArrayList<>();
		
		ArrayList<Trooper> troopers = new ArrayList<>();

		for (Unit unit : units) {
			if(!sides.contains(unit.side)) {
				sides.add(unit.side);
			}
			
			
			for (Trooper trooper : unit.individuals) {
				troopers.add(trooper);
			}
		}
		
		if(sides.size() > 1) {
			System.out.println("Sort troopers");
			for(Trooper trooper : troopers) {
				trooper.kills = DiceRoller.randInt(0, 9);
			}
			Collections.sort(troopers, new Comparator<Trooper>() {
				   public int compare(Trooper b1, Trooper b2) {
					   
					   System.out.println("b1 CA: "+((b1.combatActions+ b1.sl) - b1.kills)+", b2 CA: "+((b2.combatActions + b2.sl) - b2.kills));
					   if((b1.combatActions+ b1.sl) - b1.kills < (b2.combatActions + b2.sl) - b2.kills)
						   return 1;
					   else if((b1.combatActions+ b1.sl) - b1.kills > (b2.combatActions + b2.sl) - b2.kills)
						   return -1;
					   else 
						   return 0;
				   }
			});
		}
		

		initializeWindow();
		setIndividuals(troopers);
		refreshIndividualList();
		setComboBoxes();
	}
	
	

	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit, ArrayList<Trooper> cqbt) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;
		initializeWindow();
		setIndividuals(cqbt);
		refreshIndividualList();
		setComboBoxes();
	}

	private void initializeWindow() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1113, 712);
		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		frame.setVisible(true);

		// Get the screen size
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Dimension screenSize = toolkit.getScreenSize();
		// Calculate the frame location
		int x = (screenSize.width - frame.getWidth()) / 2;
		int y = (screenSize.height - frame.getHeight()) / 2;

		// Set the new frame location
		frame.setLocation(x, y);

		JButton btnClearSpotted = new JButton("Remove All Spotted");
		btnClearSpotted.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnClearSpotted.setBounds(784, 211, 249, 23);
		btnClearSpotted.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						// System.out.println("Clear Spot1");

						for (Trooper trooper : unit.individuals) {

							trooper.spotted.clear();

						}

						// System.out.println("Clear Spot2");
						return null;
					}

				};

				worker.execute();

			}
		});

		JComboBox comboBox = new JComboBox();
		comboBox.setBounds(784, 149, 143, 20);
		comboBox.setForeground(Color.BLACK);
		// comboBox.setSelectedIndex(0);

		JLabel label = new JLabel("Remove Spotted");
		label.setBounds(782, 123, 226, 31);
		label.setForeground(Color.BLACK);
		label.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton button = new JButton("Remove");
		button.setBounds(944, 148, 89, 23);
		button.setForeground(Color.BLACK);

		JButton button_1 = new JButton("Spot Hex");
		button_1.setBounds(944, 104, 89, 23);
		button_1.setForeground(Color.BLACK);

		JComboBox comboBox_1 = new JComboBox();
		comboBox_1.setBounds(944, 74, 89, 20);
		comboBox_1.setForeground(Color.BLACK);
		// comboBox_1.setSelectedIndex(0);

		JSpinner spinner = new JSpinner();
		spinner.setBounds(882, 105, 40, 20);
		spinner.setForeground(Color.BLACK);

		JSpinner spinner_1 = new JSpinner();
		spinner_1.setBounds(808, 105, 40, 20);
		spinner_1.setForeground(Color.BLACK);

		JLabel label_1 = new JLabel("Y: ");
		label_1.setBounds(858, 100, 30, 31);
		label_1.setForeground(Color.BLACK);
		label_1.setFont(new Font("Calibri", Font.PLAIN, 12));

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 84, 445, 389);
		frame.getContentPane().add(scrollPane);
		individualsList = new JList();
		individualsList.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseMoved(MouseEvent e) {

				JList theList = (JList) e.getSource();
				int index = theList.locationToIndex(e.getPoint());
				if (index > -1) {
					theList.setToolTipText(null);
					String text = "<html>";
					// System.out.println("Target Paint");
					for (Trooper trooper : bulkTroopers.get(index).targetTroopers) {
						text += trooper.findTargetUnit(gameWindow) + ":: " + trooper.number + ":: " + trooper.name;
						// System.out.println("Loop");
						if (!trooper.compareTo(bulkTroopers.get(index).targetTroopers
								.get(bulkTroopers.get(index).targetTroopers.size() - 1)))
							text += "<br>";

					}

					if (text.equals("<html>"))
						theList.setToolTipText(null);
					else
						theList.setToolTipText(text + "</html>");
				}

			}
		});
		individualsList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0) {

				if (arg0.getValueIsAdjusting() || individualsList.getSelectedIndices().length < 1 || individualListLock)
					return;

				selected();

				// System.out.println("Entry Count:
				// "+individualsList.getSelectedValuesList().size());
			}
		});
		
		
		
		individualsList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		scrollPane.setViewportView(individualsList);
		
		
		comboBoxAddUnit = new JComboBox();
		comboBoxAddUnit.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxAddUnit.setSelectedIndex(0);
		comboBoxAddUnit.setBounds(784, 74, 143, 20);
		comboBoxAddUnit.setForeground(Color.BLACK);
		// comboBox_2.setSelectedIndex(0);

		JLabel label_2 = new JLabel("X: ");
		label_2.setBounds(784, 100, 30, 31);
		label_2.setForeground(Color.BLACK);
		label_2.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton btnAddSpotted = new JButton("Add Individual");
		btnAddSpotted.setBounds(784, 180, 115, 23);
		btnAddSpotted.setForeground(Color.BLACK);

		JButton button_3 = new JButton("Add Whole Unit");
		button_3.setBounds(909, 180, 124, 23);
		button_3.setForeground(Color.BLACK);

		JLabel label_3 = new JLabel("Individual");
		label_3.setBounds(944, 43, 143, 31);
		label_3.setForeground(Color.BLACK);
		label_3.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_4 = new JLabel("Unit");
		label_4.setBounds(784, 43, 143, 31);
		label_4.setForeground(Color.BLACK);
		label_4.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_5 = new JLabel("Add Spotted");
		label_5.setBounds(784, 11, 162, 31);
		label_5.setForeground(Color.BLACK);
		label_5.setFont(new Font("Calibri", Font.PLAIN, 14));
		frame.getContentPane().setLayout(null);
		frame.getContentPane().add(btnClearSpotted);
		frame.getContentPane().add(label_5);
		frame.getContentPane().add(label_4);
		frame.getContentPane().add(comboBoxAddUnit);
		frame.getContentPane().add(label_3);
		frame.getContentPane().add(comboBox_1);
		frame.getContentPane().add(btnAddSpotted);
		frame.getContentPane().add(button_3);
		frame.getContentPane().add(spinner_1);
		frame.getContentPane().add(label_2);
		frame.getContentPane().add(label_1);
		frame.getContentPane().add(spinner);
		frame.getContentPane().add(button_1);
		frame.getContentPane().add(comboBox);
		frame.getContentPane().add(label);
		frame.getContentPane().add(button);

		JLabel label_6 = new JLabel("PEN");
		label_6.setForeground(Color.BLACK);
		label_6.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_6.setDoubleBuffered(true);
		label_6.setBounds(784, 311, 30, 31);
		frame.getContentPane().add(label_6);

		textFieldPen = new JTextField();
		textFieldPen.setForeground(Color.BLACK);
		textFieldPen.setColumns(10);
		textFieldPen.setBounds(814, 316, 34, 20);
		frame.getContentPane().add(textFieldPen);

		JLabel label_7 = new JLabel("DC");
		label_7.setForeground(Color.BLACK);
		label_7.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_7.setDoubleBuffered(true);
		label_7.setBounds(858, 311, 30, 31);
		frame.getContentPane().add(label_7);

		textFieldDC = new JTextField();
		textFieldDC.setForeground(Color.BLACK);
		textFieldDC.setColumns(10);
		textFieldDC.setBounds(882, 316, 40, 20);
		frame.getContentPane().add(textFieldDC);

		comboBoxOF = new JComboBox();
		comboBoxOF.setModel(new DefaultComboBoxModel(new String[] { "Open", "Fire" }));
		comboBoxOF.setSelectedIndex(0);
		comboBoxOF.setForeground(Color.BLACK);
		// comboBox_3.setSelectedIndex(0);
		comboBoxOF.setBounds(967, 316, 62, 20);
		frame.getContentPane().add(comboBoxOF);

		JLabel label_8 = new JLabel("O/F");
		label_8.setForeground(Color.BLACK);
		label_8.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_8.setDoubleBuffered(true);
		label_8.setBounds(932, 311, 30, 31);
		frame.getContentPane().add(label_8);

		JButton button_4 = new JButton("Add Injury");
		button_4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					ResolveHits resolveHits = new ResolveHits(trooper);

					Injuries newInjury = resolveHits.getPCHitsManual(Integer.parseInt(textFieldPen.getText()),
							Integer.parseInt(textFieldDC.getText()), comboBoxOF.getSelectedIndex());

					if (newInjury == null) {
						gameWindow.conflictLog.addNewLine("EPEN < 0.5");
					}

				}

			}
		});
		button_4.setForeground(Color.BLACK);
		button_4.setBounds(882, 347, 147, 23);
		frame.getContentPane().add(button_4);

		JComboBox comboBox_4 = new JComboBox();
		comboBox_4.setModel(new DefaultComboBoxModel(new String[] { "Random Loc." }));
		comboBox_4.setSelectedIndex(0);
		comboBox_4.setForeground(Color.BLACK);
		// comboBox_4.setSelectedIndex(0);
		comboBox_4.setBounds(784, 348, 92, 20);
		frame.getContentPane().add(comboBox_4);

		JLabel lblAddInjuries = new JLabel("Add Injuries");
		lblAddInjuries.setForeground(Color.BLACK);
		lblAddInjuries.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblAddInjuries.setBounds(784, 293, 162, 23);
		frame.getContentPane().add(lblAddInjuries);

		listSpottedUnitsArray = new JList();
		listSpottedUnitsArray.setForeground(Color.BLACK);
		listSpottedUnitsArray.setBackground(Color.WHITE);
		listSpottedUnitsArray.setBounds(625, 43, 143, 160);
		frame.getContentPane().add(listSpottedUnitsArray);

		JLabel label_9 = new JLabel("Spotting Units");
		label_9.setForeground(Color.BLACK);
		label_9.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_9.setBounds(625, 11, 369, 31);
		frame.getContentPane().add(label_9);

		spinnerNVGGen = new JSpinner();
		spinnerNVGGen.setForeground(Color.BLACK);
		spinnerNVGGen.setBounds(625, 320, 34, 20);
		frame.getContentPane().add(spinnerNVGGen);

		JLabel label_10 = new JLabel("Gen:");
		label_10.setForeground(Color.BLACK);
		label_10.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10.setBounds(596, 317, 40, 28);
		frame.getContentPane().add(label_10);

		JButton button_2 = new JButton("Add Thermals");
		button_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					trooper.thermalVision = true;

				}

			}
		});
		button_2.setForeground(Color.BLACK);
		button_2.setBounds(669, 319, 97, 23);
		frame.getContentPane().add(button_2);

		JButton button_5 = new JButton("Add NVGs");
		button_5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if ((int) spinnerNVGGen.getValue() < 1 || (int) spinnerNVGGen.getValue() > 5) {
						gameWindow.conflictLog.addNewLine("NVG Gen not a value from 1 to 5.");
						return;
					}

					trooper.nightVision = true;
					trooper.nightVisionEffectiveness = (int) spinnerNVGGen.getValue();

				}

			}
		});
		button_5.setForeground(Color.BLACK);
		button_5.setBounds(479, 322, 114, 23);
		frame.getContentPane().add(button_5);

		JCheckBox checkBox = new JCheckBox("NVGs");
		checkBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!trooper.nightVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have night vision.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.nightVisionInUse = true;
					else
						trooper.nightVisionInUse = false;

				}

			}
		});
		checkBox.setForeground(Color.BLACK);
		checkBox.setFont(new Font("Calibri", Font.BOLD, 12));
		checkBox.setBackground(Color.WHITE);
		checkBox.setBounds(625, 293, 143, 23);
		frame.getContentPane().add(checkBox);

		JButton button_6 = new JButton("Clear");
		button_6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				listSpottedUnitsArray.removeAll();
				callsigns.clear();

				DefaultListModel listSpottedUnits = new DefaultListModel();

				for (int i = 0; i < callsigns.size(); i++) {
					listSpottedUnits.addElement(callsigns.get(i));

				}

				listSpottedUnitsArray.setModel(listSpottedUnits);

			}
		});
		button_6.setForeground(Color.BLACK);
		button_6.setBounds(479, 126, 136, 25);
		frame.getContentPane().add(button_6);

		JButton button_7 = new JButton("Spot All");
		button_7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						ExecutorService es = Executors.newFixedThreadPool(16);
						
						try {
							
							
							
							for (Trooper trooper : getSelectedTroopers()) {

								
								es.submit(() -> {
									// System.out.println("Spot Test All 1");
									spotTestAll(trooper, unit);
									// System.out.println("Spot Test All 2");

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

							}

							es.shutdown();
							
							// refreshTargets();
						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						
						GameWindow.gameWindow.conflictLog.addQueuedText();

					}

				};

				worker.execute();

			}
		});
		button_7.setForeground(Color.BLACK);
		button_7.setBounds(479, 154, 136, 25);
		frame.getContentPane().add(button_7);

		chckbxFreeAction = new JCheckBox("Free Action");
		chckbxFreeAction.setForeground(Color.BLACK);
		chckbxFreeAction.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxFreeAction.setBackground(Color.WHITE);
		chckbxFreeAction.setBounds(84, 57, 97, 27);
		frame.getContentPane().add(chckbxFreeAction);

		comboBoxScanArea = new JComboBox();
		comboBoxScanArea
				.setModel(new DefaultComboBoxModel(new String[] { "60 Degrees", "180 Degrees", "20 Yard Hex" }));
		comboBoxScanArea.setSelectedIndex(0);
		// comboBox_5.setSelectedIndex(0);
		comboBoxScanArea.setForeground(Color.BLACK);
		comboBoxScanArea.setBounds(479, 183, 136, 20);
		frame.getContentPane().add(comboBoxScanArea);

		JButton button_8 = new JButton("Roll Spot");
		button_8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);
							
							for (Trooper trooper : getSelectedTroopers()) {

								es.submit(() -> {
									// Loops through all signs, performs spotting test
									for (int i = 0; i < callsigns.size(); i++) {
										// System.out.println("Spot Test 1");
										spotTest(callsigns.get(i), trooper, unit);
										// System.out.println("Spot Test 2");
									}

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
				

							}
							
							es.shutdown();
							
							

						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						// refreshTargets();
						GameWindow.gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		button_8.setForeground(Color.BLACK);
		button_8.setBounds(479, 99, 136, 25);
		frame.getContentPane().add(button_8);

		JButton button_9 = new JButton("Add Unit");
		button_9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (comboBoxSpottingUnits.getSelectedIndex() > 0) {

					String callsign = comboBoxSpottingUnits.getSelectedItem().toString();

					if (!callsigns.contains(callsign)) {
						callsigns.add(callsign);
					}

					listSpottedUnitsArray.removeAll();

					DefaultListModel listSpottedUnits = new DefaultListModel();

					for (int i = 0; i < callsigns.size(); i++) {
						listSpottedUnits.addElement(callsigns.get(i));

					}

					listSpottedUnitsArray.setModel(listSpottedUnits);

				}

			}
		});
		button_9.setForeground(Color.BLACK);
		button_9.setBounds(479, 71, 136, 25);
		frame.getContentPane().add(button_9);

		comboBoxSpottingUnits = new JComboBox();
		comboBoxSpottingUnits.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxSpottingUnits.setSelectedIndex(0);
		comboBoxSpottingUnits.setForeground(Color.BLACK);
		// comboBox_6.setSelectedIndex(0);
		comboBoxSpottingUnits.setBounds(479, 43, 136, 23);
		frame.getContentPane().add(comboBoxSpottingUnits);

		JLabel label_11 = new JLabel("Spot");
		label_11.setForeground(Color.BLACK);
		label_11.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_11.setBounds(479, 11, 53, 31);
		frame.getContentPane().add(label_11);

		comboBoxStance = new JComboBox();
		comboBoxStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (comboBoxStance.getSelectedItem().toString().equals(trooper.stance)) {
						return;
					}

					// System.out.println("Changing Stance, Trooper Stance: |"+trooper.stance+"| Box
					// Stance: |"+ comboBoxStance.getSelectedItem().toString()+"|");
					trooper.stance = comboBoxStance.getSelectedItem().toString();

					if (bulkTrooper.targetedFire != null) {
						bulkTrooper.targetedFire.spentCA++;
					} else {

						bulkTrooper.spentCA++;
					}

					try {
						// PCShots(bulkTrooper, getTargetTrooper(bulkTrooper));
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				}

				PCFireGuiUpdates();

			}
		});
		comboBoxStance.setModel(new DefaultComboBoxModel(new String[] { "Standing ", "Crouched", "Prone" }));
		comboBoxStance.setForeground(Color.BLACK);
		comboBoxStance.setBounds(479, 347, 147, 23);
		frame.getContentPane().add(comboBoxStance);

		JLabel label_12 = new JLabel("Misc.");
		label_12.setForeground(Color.BLACK);
		label_12.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_12.setBounds(479, 235, 146, 31);
		frame.getContentPane().add(label_12);

		chckbxManualStance = new JCheckBox("Manual Stance");
		chckbxManualStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (chckbxManualStance.isSelected())
						trooper.manualStance = true;
					else
						trooper.manualStance = false;

				}

			}
		});
		chckbxManualStance.setForeground(Color.BLACK);
		chckbxManualStance.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxManualStance.setBackground(Color.WHITE);
		chckbxManualStance.setBounds(637, 348, 131, 23);
		frame.getContentPane().add(chckbxManualStance);

		chckbxLaser = new JCheckBox("Laser");
		chckbxLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).laser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a laser pointer.");
						return;
					}

					if (chckbxLaser.isSelected())
						bulkTrooper.trooper.weaponLaserOn = true;
					else
						bulkTrooper.trooper.weaponLaserOn = false;

				}

			}
		});
		chckbxLaser.setForeground(Color.BLACK);
		chckbxLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxLaser.setBackground(Color.WHITE);
		chckbxLaser.setBounds(479, 267, 74, 23);
		frame.getContentPane().add(chckbxLaser);

		chckbxIrLaser = new JCheckBox("IR Laser");
		chckbxIrLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).irLaser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a IR laser pointer.");
						return;
					}

					if (chckbxIrLaser.isSelected())
						bulkTrooper.trooper.weaponIRLaserOn = true;
					else
						bulkTrooper.trooper.weaponIRLaserOn = false;

				}

			}
		});
		chckbxIrLaser.setForeground(Color.BLACK);
		chckbxIrLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxIrLaser.setBackground(Color.WHITE);
		chckbxIrLaser.setBounds(559, 267, 74, 23);
		frame.getContentPane().add(chckbxIrLaser);

		chckbxWeaponLights = new JCheckBox("Weapon Lights");
		chckbxWeaponLights.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!getWeapon(trooper).light) {
						gameWindow.conflictLog.addNewLine("This trooper does not have weapon lights.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.weaponLightOn = true;
					else
						trooper.weaponLightOn = false;

				}

			}
		});
		chckbxWeaponLights.setForeground(Color.BLACK);
		chckbxWeaponLights.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxWeaponLights.setBackground(Color.WHITE);
		chckbxWeaponLights.setBounds(479, 293, 142, 23);
		frame.getContentPane().add(chckbxWeaponLights);

		chckbxThermals = new JCheckBox("Thermals");
		chckbxThermals.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!bulkTrooper.trooper.thermalVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have thermal vision.");
						return;
					}

					if (chckbxThermals.isSelected())
						bulkTrooper.trooper.thermalVisionInUse = true;
					else
						bulkTrooper.trooper.thermalVisionInUse = false;

				}

			}
		});
		chckbxThermals.setForeground(Color.BLACK);
		chckbxThermals.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxThermals.setBackground(Color.WHITE);
		chckbxThermals.setBounds(639, 267, 129, 23);
		frame.getContentPane().add(chckbxThermals);

		JLabel label_13 = new JLabel("CA Bonus:");
		label_13.setForeground(Color.BLACK);
		label_13.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_13.setBounds(479, 567, 74, 31);
		frame.getContentPane().add(label_13);

		caBonusSpinner = new JSpinner();
		caBonusSpinner.setBounds(550, 572, 34, 20);
		frame.getContentPane().add(caBonusSpinner);

		JButton btnApply = new JButton("Apply");
		btnApply.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.CA += (int) caBonusSpinner.getValue();

				}

			}
		});
		btnApply.setForeground(Color.BLACK);
		btnApply.setBounds(596, 570, 114, 23);
		frame.getContentPane().add(btnApply);

		JLabel label_16 = new JLabel("Starting Aim T:");
		label_16.setBackground(Color.WHITE);
		label_16.setForeground(Color.BLACK);
		label_16.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16.setBounds(480, 442, 114, 31);
		frame.getContentPane().add(label_16);

		comboBoxAimTime = new JComboBox();
		comboBoxAimTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1)
					return;

				for (BulkTrooper trooper : selectedBulkTroopers) {

					Shoot shoot = trooper.shoot;

					if (shoot == null)
						continue;

					SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

						@Override
						protected Void doInBackground() throws Exception {

							if (comboBoxAimTime.getSelectedIndex() == 0)
								shoot.autoAim();
							else
								shoot.setAimTime(comboBoxAimTime.getSelectedIndex() - 1);

							if (comboBoxTargetZone.getSelectedIndex() > 0) {
								setCalledShotBounds(shoot);
							}

							return null;
						}

						@Override
						protected void done() {
							try {
								TimeUnit.SECONDS.sleep(1);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							guiUpdates();

						}

					};

					worker.execute();
				}

			}
		});
		comboBoxAimTime.setModel(new DefaultComboBoxModel(new String[] { "Auto", "0", "1", "2", "3", "4", "5", "6", "7",
				"8", "9", "10", "11", "12", "13", "14", "15" }));

		comboBoxAimTime.setBackground(Color.WHITE);
		comboBoxAimTime.setForeground(Color.BLACK);
		// comboBox_10.setSelectedIndex(0);
		comboBoxAimTime.setBounds(479, 470, 87, 20);
		frame.getContentPane().add(comboBoxAimTime);

		comboBoxTargetZone = new JComboBox();
		comboBoxTargetZone.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper trooper : selectedBulkTroopers) {
					try {
						setCalledShotBounds(trooper.shoot);
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}

				guiUpdates();

			}
		});
		comboBoxTargetZone.setModel(new DefaultComboBoxModel(new String[] { "Auto", "Head", "Body", "Legs" }));
		comboBoxTargetZone.setSelectedIndex(0);
		comboBoxTargetZone.setBackground(Color.WHITE);
		comboBoxTargetZone.setForeground(Color.BLACK);
		// comboBox_11.setSelectedIndex(0);
		comboBoxTargetZone.setBounds(596, 470, 113, 20);
		frame.getContentPane().add(comboBoxTargetZone);

		JLabel label_17 = new JLabel("Target Zone:");
		label_17.setBackground(Color.WHITE);
		label_17.setForeground(Color.BLACK);
		label_17.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_17.setBounds(596, 442, 114, 31);
		frame.getContentPane().add(label_17);

		spinnerEALBonus = new JSpinner();
		spinnerEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerEALBonus.setBackground(Color.WHITE);
		spinnerEALBonus.setForeground(Color.BLACK);
		spinnerEALBonus.setBounds(479, 536, 74, 20);
		frame.getContentPane().add(spinnerEALBonus);

		JLabel label_18 = new JLabel("EAL Bonus:");
		label_18.setBackground(Color.WHITE);
		label_18.setForeground(Color.BLACK);
		label_18.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18.setBounds(479, 497, 87, 31);
		frame.getContentPane().add(label_18);

		spinnerPercentBonus = new JSpinner();
		spinnerPercentBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerPercentBonus.setBackground(Color.WHITE);
		spinnerPercentBonus.setForeground(Color.BLACK);
		spinnerPercentBonus.setBounds(563, 536, 74, 20);
		frame.getContentPane().add(spinnerPercentBonus);

		JLabel label_19 = new JLabel("% Bonus:");
		label_19.setBackground(Color.WHITE);
		label_19.setForeground(Color.BLACK);
		label_19.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_19.setBounds(563, 497, 74, 31);
		frame.getContentPane().add(label_19);

		JButton button_10 = new JButton("Aim");
		button_10.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						
						for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
							
							int newAim = bulkTrooper.shoot.aimTime + (bulkTrooper.trooper.combatActions - bulkTrooper.shoot.spentCombatActions);

							newAim = newAim >= bulkTrooper.shoot.wep.aimTime.size() ? bulkTrooper.shoot.wep.aimTime.size() - 1 : newAim;

							bulkTrooper.shoot.spentCombatActions += newAim - bulkTrooper.shoot.aimTime;

							bulkTrooper.shoot.setAimTime(newAim);
							
							if (!chckbxFreeAction.isSelected() && bulkTrooper.shoot.spentCombatActions >= bulkTrooper.trooper.combatActions) {
								actionSpent(bulkTrooper.trooper);
							}
							bulkTrooper.shootReset = false;

						}
						
						return null;
					}

					@Override
					protected void done() {

						guiUpdates();
						refreshIndividualList();
					}

				};

				worker.execute();

			}
		});
		button_10.setForeground(Color.BLACK);
		button_10.setBounds(648, 535, 87, 23);
		frame.getContentPane().add(button_10);

		lblAimTime = new JLabel("Mean Aim Time:");
		lblAimTime.setBackground(Color.WHITE);
		lblAimTime.setForeground(Color.BLACK);
		lblAimTime.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblAimTime.setBounds(647, 501, 136, 23);
		frame.getContentPane().add(lblAimTime);

		JButton btnSingle = new JButton("Single");
		btnSingle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						InjuryLog.InjuryLog.addAlreadyInjured();

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								Shoot shoot = bulkTrooper.shoot;
								if (shoot == null)
									continue;

								es.submit(() -> {
									System.out.println("Single Fire");
									try {

										if (comboBoxTargetUnits.getSelectedIndex() > 0)
											shoot.suppressiveFire(shoot.wep.suppressiveROF);
										else if (chckbxFullAuto.isSelected())
											shoot.burst();
										else
											shoot.shot(chckbxGuided.isSelected());

										try {
											TimeUnit.MILLISECONDS.sleep(15);
										} catch (InterruptedException e) {
											e.printStackTrace();
										}
										
										valleyValidTargetCheck(shoot, bulkTrooper);
										
										GameWindow.gameWindow.conflictLog
												.addNewLineToQueue("Results: " + shoot.shotResults);
										//System.out.println("Supp results: "+shoot.shotResults);
										
										
									} catch (Exception e) {
										e.printStackTrace();
									}
								});

								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								
								bulkTrooper.shootReset = false;

							}

							try {
								TimeUnit.MILLISECONDS.sleep(250);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							
							es.shutdown();

						} catch (Exception e2) {
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(100);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						
						for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
							if (!freeAction() && ((bulkTrooper.shoot.spentCombatActions >= bulkTrooper.shoot.shooter.combatActions) 
									|| comboBoxTargetUnits.getSelectedIndex() > 0)) {
								System.out.println("Action spent suppress");
								actionSpent(bulkTrooper.trooper);
							}
						}
						
						guiUpdates();
						refreshIndividualList();
						InjuryLog.InjuryLog.printResultsToLog();
						gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		btnSingle.setForeground(Color.BLACK);
		btnSingle.setBounds(744, 535, 87, 23);
		frame.getContentPane().add(btnSingle);

		lblTn = new JLabel("Mean TN: 0");
		lblTn.setBackground(Color.WHITE);
		lblTn.setForeground(Color.BLACK);
		lblTn.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTn.setBounds(963, 501, 124, 23);
		frame.getContentPane().add(lblTn);

		chckbxFullAuto = new JCheckBox("Full Auto");
		chckbxFullAuto.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				guiUpdates();
				//refreshIndividualList();
			}
		});
		chckbxFullAuto.setForeground(Color.BLACK);
		chckbxFullAuto.setBackground(Color.WHITE);
		chckbxFullAuto.setBounds(715, 469, 74, 23);
		frame.getContentPane().add(chckbxFullAuto);

		comboBoxTargetUnits = new JComboBox();
		comboBoxTargetUnits.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								es.submit(() -> {
									System.out.println("Submit");
									try {
										if(comboBoxTargetUnits.getSelectedIndex() > 0) {
											bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
													bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
											
											if(bulkTrooper.shootReset) {
												bulkTrooper.shoot.spentCombatActions = 0; 
												bulkTrooper.shoot.previouslySpentCa = 0;
											}
											
											System.out.println("Create bulk suppressive shot: "+(bulkTrooper.shoot == null ? "is null" : "not null"));
										} else if(bulkTrooper.targetTroopers.size() > 0){
											setValidTarget(bulkTrooper);
										}

										if (comboBoxAimTime.getSelectedIndex() == 0 && bulkTrooper.shoot != null)
											bulkTrooper.shoot.autoAim();
										
										if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
											setCalledShotBounds(bulkTrooper.shoot);
										}

									} catch (Exception e) {
										e.printStackTrace();
									}
								});
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							try {
								TimeUnit.MILLISECONDS.sleep(150);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}

							es.shutdown();

							System.out.println("Finished Threads");

						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(250);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						gameWindow.conflictLog.addQueuedText();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Suppression Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();
				
			}
		});
		comboBoxTargetUnits.setForeground(Color.BLACK);
		// comboBox_12.setSelectedIndex(0);
		comboBoxTargetUnits.setBounds(479, 643, 178, 21);
		frame.getContentPane().add(comboBoxTargetUnits);

		JLabel label_23 = new JLabel("Taget Unit: ");
		label_23.setForeground(Color.BLACK);
		label_23.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_23.setBounds(479, 614, 125, 31);
		frame.getContentPane().add(label_23);

		JLabel label_27 = new JLabel("Suppressive Fire");
		label_27.setForeground(Color.BLACK);
		label_27.setFont(new Font("Calibri", Font.PLAIN, 18));
		label_27.setBounds(479, 596, 221, 23);
		frame.getContentPane().add(label_27);

		JLabel lblTargetedFire = new JLabel("Targeted Fire");
		lblTargetedFire.setForeground(Color.BLACK);
		lblTargetedFire.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblTargetedFire.setBounds(479, 422, 221, 23);
		frame.getContentPane().add(lblTargetedFire);

		JLabel lblBulkOperations = new JLabel("Bulk Operations");
		lblBulkOperations.setForeground(Color.BLACK);
		lblBulkOperations.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblBulkOperations.setBounds(10, 10, 221, 20);
		frame.getContentPane().add(lblBulkOperations);

		JLabel lblIndividuals = new JLabel("Individuals");
		lblIndividuals.setForeground(Color.BLACK);
		lblIndividuals.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblIndividuals.setBackground(Color.WHITE);
		lblIndividuals.setBounds(10, 59, 87, 23);
		frame.getContentPane().add(lblIndividuals);

		

		lblPossibleShots = new JLabel("Mean Possible Shots:");
		lblPossibleShots.setForeground(Color.BLACK);
		lblPossibleShots.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblPossibleShots.setBackground(Color.WHITE);
		lblPossibleShots.setBounds(784, 501, 178, 23);
		frame.getContentPane().add(lblPossibleShots);

		JButton btnVolley = new JButton("Volley");
		btnVolley.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				try {
					volley();
				} catch (Exception ecx) {
					ecx.printStackTrace();
				}

			}
		});
		btnVolley.setForeground(Color.BLACK);
		btnVolley.setBounds(841, 535, 87, 23);
		frame.getContentPane().add(btnVolley);

		JButton button_7_1 = new JButton("HD");
		button_7_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					if (!bulkTrooper.trooper.inCover) {
						gameWindow.conflictLog.addNewLine(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
								+ " is not in cover and can't hunker down.");
						continue;
					}

					if (bulkTrooper.trooper.HD)
						bulkTrooper.trooper.HD = false;
					else
						bulkTrooper.trooper.HD = true;

					if (!chckbxFreeAction.isSelected())
						actionSpent(bulkTrooper.trooper);

				}

				refreshIndividualList();

			}
		});
		button_7_1.setForeground(Color.BLACK);
		button_7_1.setBounds(479, 212, 136, 25);
		frame.getContentPane().add(button_7_1);

		targetedFireFocus = new JComboBox();
		targetedFireFocus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1 || targetFocusLock)
					return;

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								if (bulkTrooper.targetTroopers.size() > 0) {
									es.submit(() -> {
										System.out.println("Submit");
										try {
											setValidTarget(bulkTrooper);

											if (comboBoxAimTime.getSelectedIndex() == 0)
												bulkTrooper.shoot.autoAim();

											if (comboBoxTargetZone.getSelectedIndex() > 0) {
												setCalledShotBounds(bulkTrooper.shoot);
											}

										} catch (Exception e) {
											e.printStackTrace();
										}
									});
								}
								
								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							es.shutdown();

							System.out.println("Finished Threads");

							
						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.SECONDS.sleep(1);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						// System.out.println("Done");
						gameWindow.conflictLog.addQueuedText();
						// PCFireGuiUpdates();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();

			}
		});
		targetedFireFocus.setModel(new DefaultComboBoxModel(new String[] { "No Target Unit Focus" }));
		targetedFireFocus.setForeground(Color.BLACK);
		targetedFireFocus.setBackground(Color.WHITE);
		targetedFireFocus.setBounds(944, 535, 143, 20);
		frame.getContentPane().add(targetedFireFocus);

		JButton button_5_1 = new JButton("Select Fresh");
		button_5_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// System.out.println("Phase: "+game.getPhase()+", Action:
				// "+game.getCurrentAction());

				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
				// System.out.println("Set Indexes: "+indices.length);
			}
		});
		button_5_1.setForeground(Color.BLACK);
		button_5_1.setBounds(325, 57, 130, 23);
		frame.getContentPane().add(button_5_1);

		chckbxUnspottable = new JCheckBox("Unspottable");
		chckbxUnspottable.setForeground(Color.BLACK);
		chckbxUnspottable.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxUnspottable.setBackground(Color.WHITE);
		chckbxUnspottable.setBounds(864, 261, 92, 20);
		frame.getContentPane().add(chckbxUnspottable);

		JLabel label_18_1 = new JLabel("Spotting Difficulty:");
		label_18_1.setForeground(Color.BLACK);
		label_18_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_1.setBackground(Color.WHITE);
		label_18_1.setBounds(784, 244, 143, 20);
		frame.getContentPane().add(label_18_1);

		spinnerSpottingDifficulty = new JSpinner();
		spinnerSpottingDifficulty.setForeground(Color.BLACK);
		spinnerSpottingDifficulty.setBackground(Color.WHITE);
		spinnerSpottingDifficulty.setBounds(784, 260, 74, 20);
		frame.getContentPane().add(spinnerSpottingDifficulty);

		JButton btnSet = new JButton("Set");
		btnSet.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.trooper.spottingDifficulty = (int) spinnerSpottingDifficulty.getValue();
					bulkTrooper.trooper.unspottable = chckbxUnspottable.isSelected();

					if (bulkTrooper.trooper.unspottable) {

						for (Unit unit : gameWindow.initiativeOrder) {

							for (Trooper trooper : unit.individuals) {

								if (trooper == bulkTrooper.trooper)
									continue;

								for (Spot spot : trooper.spotted) {

									if (spot.spottedIndividuals.contains(bulkTrooper.trooper)) {
										spot.spottedIndividuals.remove(bulkTrooper.trooper);
									}

								}

							}

						}

					}

				}

			}
		});
		btnSet.setForeground(Color.BLACK);
		btnSet.setBounds(967, 259, 66, 23);
		frame.getContentPane().add(btnSet);

		JLabel label_18_2 = new JLabel("Consecutive EAL Bonus:");
		label_18_2.setForeground(Color.BLACK);
		label_18_2.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_2.setBackground(Color.WHITE);
		label_18_2.setBounds(720, 567, 162, 31);
		frame.getContentPane().add(label_18_2);

		spinnerConsecutiveEALBonus = new JSpinner();
		spinnerConsecutiveEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerConsecutiveEALBonus.setForeground(Color.BLACK);
		spinnerConsecutiveEALBonus.setBackground(Color.WHITE);
		spinnerConsecutiveEALBonus.setBounds(872, 571, 74, 20);
		frame.getContentPane().add(spinnerConsecutiveEALBonus);

		JLabel lblSetWeapons = new JLabel("Set Weapons");
		lblSetWeapons.setForeground(Color.BLACK);
		lblSetWeapons.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblSetWeapons.setBounds(479, 375, 162, 20);
		frame.getContentPane().add(lblSetWeapons);

		comboBoxWeapon = new JComboBox();
		comboBoxWeapon.setModel(new DefaultComboBoxModel(new String[] { "None", "DC15A", "DC15A-ion", "DC15LE", "DC15X",
				"DC15S", "DC17m", "DC17 Sniper", "Z6", "Westar M5", "E5", "E5S", "E5C", "MA37", "M392 DMR", "M739 SAW",
				"Type-51 Carbine", "Type-52 Rifle", "Type-52 Pistol" }));
		comboBoxWeapon.setForeground(Color.BLACK);
		comboBoxWeapon.setBounds(479, 395, 147, 23);
		frame.getContentPane().add(comboBoxWeapon);

		JButton btnSet_1 = new JButton("Set");
		btnSet_1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {

				if (comboBoxWeapon.getSelectedIndex() < 0) {
					return;
				}

				for (BulkTrooper trooper : selectedBulkTroopers) {

					trooper.trooper.wep = comboBoxWeapon.getSelectedItem().toString();
					
					if(trooper.shoot != null) {
						trooper.shoot.updateWeapon(trooper.trooper.wep);
					}

				}

				gameWindow.conflictLog.addNewLine("Weapons set");
				
				refreshIndividualList();
				
				if (openUnit != null)
					openUnit.refreshIndividuals();

			}
		});
		btnSet_1.setForeground(Color.BLACK);
		btnSet_1.setBounds(637, 395, 97, 23);
		frame.getContentPane().add(btnSet_1);

		textFieldCallsign = new JTextField();
		textFieldCallsign.setBounds(744, 396, 155, 20);
		frame.getContentPane().add(textFieldCallsign);
		textFieldCallsign.setColumns(10);

		JLabel lblJoinUnit = new JLabel("Transfer to Unit");
		lblJoinUnit.setForeground(Color.BLACK);
		lblJoinUnit.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblJoinUnit.setBounds(744, 375, 162, 20);
		frame.getContentPane().add(lblJoinUnit);

		JButton btnTransfer = new JButton("Transfer");
		btnTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnTransfer.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnTransfer.setForeground(Color.BLACK);
		btnTransfer.setBounds(954, 421, 97, 23);
		frame.getContentPane().add(btnTransfer);

		JButton btnClose = new JButton("Close");
		btnClose.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				if (gameWindow.cqbWindowOpen) {
					gameWindow.cqbWindowOpen = false;
				}

				for(BulkTrooper bulkTrooper : bulkTroopers) {
					
					if(GameWindow.gameWindow.game.getPhase() == 1) {
						if(bulkTrooper.trooper.spentPhase1 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					} else {
						if(bulkTrooper.trooper.spentPhase2 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					}
					
				}
				
				frame.dispose();

			}
		});
		btnClose.setBounds(998, 642, 89, 23);
		frame.getContentPane().add(btnClose);

		JButton btnClear = new JButton("Clear Aim");
		btnClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.storedAimTime.clear();
					bulkTrooper.targetTroopers.clear();
					bulkTrooper.setTargets();
				}
			}
		});
		btnClear.setForeground(Color.BLACK);
		btnClear.setBounds(954, 570, 97, 23);
		frame.getContentPane().add(btnClear);

		JButton btnResetFp = new JButton("Reset FP");
		btnResetFp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.fatigueSystem.fatiguePoints.set(0.0);
				}

				GameWindow.gameWindow.conflictLog.addNewLine("Reset FP for selected troopers.");

			}
		});
		btnResetFp.setForeground(Color.BLACK);
		btnResetFp.setBounds(883, 642, 111, 23);
		frame.getContentPane().add(btnResetFp);

		JButton btnPass = new JButton("Pass");
		btnPass.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					actionSpent(bulkTrooper.trooper);
				}
				refreshIndividualList();
			}
		});
		btnPass.setForeground(Color.BLACK);
		btnPass.setBounds(10, 30, 115, 23);
		frame.getContentPane().add(btnPass);

		JButton button_5_1_1 = new JButton("Select Shooters");
		button_5_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();
				
				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1.setForeground(Color.BLACK);
		button_5_1_1.setBounds(187, 57, 136, 23);
		frame.getContentPane().add(button_5_1_1);

		JButton button_5_1_1_1 = new JButton("Select Aiming");
		button_5_1_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1_1.setForeground(Color.BLACK);
		button_5_1_1_1.setBounds(187, 30, 136, 23);
		frame.getContentPane().add(button_5_1_1_1);

		JLabel lblLauncher = new JLabel("Launcher");
		lblLauncher.setForeground(Color.BLACK);
		lblLauncher.setFont(new Font("Calibri", Font.PLAIN, 16));
		lblLauncher.setBounds(10, 596, 136, 20);
		frame.getContentPane().add(lblLauncher);

		JLabel lblGrenade = new JLabel("Grenade: ");
		lblGrenade.setForeground(Color.BLACK);
		lblGrenade.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblGrenade.setBounds(10, 484, 136, 31);
		frame.getContentPane().add(lblGrenade);

		comboBoxGrenade = new JComboBox();
		comboBoxGrenade.setBounds(10, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenade);

		comboBoxGrenadeTargets = new JComboBox();
		comboBoxGrenadeTargets.setBounds(157, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenadeTargets);

		JLabel label_16_1 = new JLabel("Taget Individual: ");
		label_16_1.setForeground(Color.BLACK);
		label_16_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16_1.setBounds(157, 484, 121, 31);
		frame.getContentPane().add(label_16_1);

		JLabel lblOr = new JLabel("OR");
		lblOr.setForeground(Color.BLACK);
		lblOr.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblOr.setBounds(20, 533, 16, 31);
		frame.getContentPane().add(lblOr);

		JLabel lblX = new JLabel("X:");
		lblX.setForeground(Color.BLACK);
		lblX.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblX.setBounds(71, 536, 16, 31);
		frame.getContentPane().add(lblX);

		spinnerGrenadeX = new JSpinner();
		spinnerGrenadeX.setBounds(86, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeX);

		JLabel lblY = new JLabel("Y:");
		lblY.setForeground(Color.BLACK);
		lblY.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblY.setBounds(135, 536, 16, 31);
		frame.getContentPane().add(lblY);

		spinnerGrenadeY = new JSpinner();
		spinnerGrenadeY.setBounds(150, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeY);

		JLabel lblHex = new JLabel("Hex:");
		lblHex.setForeground(Color.BLACK);
		lblHex.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblHex.setBounds(38, 533, 40, 31);
		frame.getContentPane().add(lblHex);

		JLabel label_10_1 = new JLabel("OR");
		label_10_1.setForeground(Color.BLACK);
		label_10_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10_1.setBounds(200, 533, 16, 31);
		frame.getContentPane().add(label_10_1);

		comboBoxBuilding = new JComboBox();
		comboBoxBuilding.setSelectedIndex(-1);
		comboBoxBuilding.setBounds(298, 538, 136, 20);
		frame.getContentPane().add(comboBoxBuilding);

		JLabel lblBuilding_1 = new JLabel("Building:");
		lblBuilding_1.setForeground(Color.BLACK);
		lblBuilding_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblBuilding_1.setBounds(226, 533, 62, 31);
		frame.getContentPane().add(lblBuilding_1);

		spinnerTargetRoom = new JSpinner();
		spinnerTargetRoom.setBounds(71, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetRoom);

		JLabel lblTargetRoom = new JLabel("Room:");
		lblTargetRoom.setForeground(Color.BLACK);
		lblTargetRoom.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTargetRoom.setBounds(10, 567, 53, 31);
		frame.getContentPane().add(lblTargetRoom);

		spinnerTargetFloor = new JSpinner();
		spinnerTargetFloor.setBounds(170, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetFloor);

		JLabel lblFloor = new JLabel("Floor:");
		lblFloor.setForeground(Color.BLACK);
		lblFloor.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblFloor.setBounds(123, 569, 53, 31);
		frame.getContentPane().add(lblFloor);

		JButton btnThrow = new JButton("Throw");
		btnThrow.setBounds(303, 505, 125, 23);
		frame.getContentPane().add(btnThrow);

		spinnerThrowBonus = new JSpinner();
		spinnerThrowBonus.setBounds(308, 570, 40, 20);
		frame.getContentPane().add(spinnerThrowBonus);

		spinnerThrowEALBonus = new JSpinner();
		spinnerThrowEALBonus.setBounds(430, 570, 39, 20);
		frame.getContentPane().add(spinnerThrowEALBonus);

		JLabel label_15 = new JLabel("Other Bonus:");
		label_15.setForeground(Color.BLACK);
		label_15.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_15.setBounds(226, 567, 87, 31);
		frame.getContentPane().add(label_15);

		JLabel lblEalBonus = new JLabel("EAL Bonus:");
		lblEalBonus.setForeground(Color.BLACK);
		lblEalBonus.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblEalBonus.setBounds(354, 567, 80, 31);
		frame.getContentPane().add(lblEalBonus);

		JComboBox comboBoxLauncher = new JComboBox();
		comboBoxLauncher.setBounds(10, 617, 136, 20);
		frame.getContentPane().add(comboBoxLauncher);

		spinnerLauncherBonus = new JSpinner();
		spinnerLauncherBonus.setBounds(157, 617, 74, 20);
		frame.getContentPane().add(spinnerLauncherBonus);

		JLabel label_20 = new JLabel("X:");
		label_20.setForeground(Color.BLACK);
		label_20.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_20.setBounds(236, 614, 16, 31);
		frame.getContentPane().add(label_20);

		spinnerLauncherX = new JSpinner();
		spinnerLauncherX.setBounds(251, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherX);

		JLabel label_21 = new JLabel("Y:");
		label_21.setForeground(Color.BLACK);
		label_21.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_21.setBounds(300, 614, 16, 31);
		frame.getContentPane().add(label_21);

		spinnerLauncherY = new JSpinner();
		spinnerLauncherY.setBounds(315, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherY);

		JLabel label_22 = new JLabel("Target Hex:");
		label_22.setForeground(Color.BLACK);
		label_22.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_22.setBounds(261, 597, 87, 23);
		frame.getContentPane().add(label_22);

		JLabel label_19_1 = new JLabel("Other Bonus:");
		label_19_1.setForeground(Color.BLACK);
		label_19_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_19_1.setBounds(154, 593, 87, 23);
		frame.getContentPane().add(label_19_1);

		JButton btnShootHex = new JButton("Shoot Hex");
		btnShootHex.setBounds(364, 616, 89, 23);
		frame.getContentPane().add(btnShootHex);

		JComboBox comboBoxAmmoTypeLauncher = new JComboBox();
		comboBoxAmmoTypeLauncher.setSelectedIndex(-1);
		comboBoxAmmoTypeLauncher.setBounds(10, 644, 136, 20);
		frame.getContentPane().add(comboBoxAmmoTypeLauncher);

		JComboBox comboBoxLauncherConcealment = new JComboBox();
		comboBoxLauncherConcealment.setBounds(152, 644, 136, 20);
		frame.getContentPane().add(comboBoxLauncherConcealment);

		chckbxGuided = new JCheckBox("Guided");
		chckbxGuided.setForeground(Color.WHITE);
		chckbxGuided.setBackground(Color.DARK_GRAY);
		chckbxGuided.setBounds(796, 469, 80, 23);
		frame.getContentPane().add(chckbxGuided);
		
		JButton btnCreateTransfer = new JButton("Create & Transfer");
		btnCreateTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Adds new unit 
				// Splits unit 
				ArrayList<Trooper> individuals = new ArrayList<Trooper>();
				generateSquad squad = new generateSquad("Clone Trooper Phase 1", "Empty");
				individuals = squad.getSquad();
				Unit newUnit = new Unit(textFieldCallsign.getText(), 0, 0, individuals, 100, 0, 100, 0, 0, 20, 0, unit.behavior);
				
				//Unit newUnit = unit.copyUnit(unit); 
				newUnit.side = unit.side;
				newUnit.initiative = unit.initiative;
				newUnit.organization = unit.organization;
				unit.organization = unit.organization; 
				
				newUnit.concealment = unit.concealment;
				newUnit.suppression = unit.suppression;
				newUnit.moral = unit.moral;
				newUnit.cohesion = unit.cohesion;
				newUnit.company = unit.company;
				newUnit.X = unit.X;
				newUnit.Y = unit.Y;
				newUnit.behavior = unit.behavior;
				newUnit.lineOfSight = new ArrayList<Unit>(unit.lineOfSight);
				//Collections.copy(newUnit.lineOfSight, unit.lineOfSight);
				//newUnit.lineOfSight = Collections.copy(unit.lineOfSight);
				gameWindow.initiativeOrder.add(newUnit);
				
				gameWindow.rollInitiativeOrder();
				gameWindow.refreshInitiativeOrder();
				
				// Loops through initiative order
				// Finds units that have LOS with this unit 
				// Adds new unit to the spotting units LOS
				
				for(Unit initUnit : gameWindow.initiativeOrder) {
					
					if(initUnit.lineOfSight.contains(unit)) {
						initUnit.lineOfSight.add(newUnit);
					}
					
				}
				
				
				// Finds newUnit's company 
				// Adds unit to company 
				for(int i = 0; i < gameWindow.companies.size(); i++) {
					
					if(gameWindow.companies.get(i).getName().equals(newUnit.company) && gameWindow.companies.get(i).getSide().equals(newUnit.side)) {
						gameWindow.companies.get(i).updateUnit(unit);
						gameWindow.companies.get(i).addUnit(newUnit);
						// Adds companies to setupWindow
						gameWindow.confirmCompany(gameWindow.companies.get(i), i);
						//f.dispose();
						
					}
					
				}
				
				
				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnCreateTransfer.setForeground(Color.BLACK);
		btnCreateTransfer.setBounds(909, 395, 142, 23);
		frame.getContentPane().add(btnCreateTransfer);
		frame.setVisible(true);
	}

	public boolean trooperAlreadyAdded(Trooper trooper) {

		for (BulkTrooper bulkTrooper : bulkTroopers) {

			if (bulkTrooper.trooper.compareTo(trooper))
				return true;

		}

		return false;
	}

	// Creates bulk trooper classes and populates the arraylist
	public void setIndividuals() {

		for (Trooper trooper : unit.individuals) {
			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Sets bulk troopers for those in CQB
	public void setIndividuals(ArrayList<Trooper> cqbt) {

		for (Trooper trooper : cqbt) {

			// System.out.println("Trooper: "+trooper.name+", Code:
			// "+System.identityHashCode(trooper));
			// System.out.println("CQB Target: "+trooper.closeCombatTarget.name+", Code:
			// "+System.identityHashCode(trooper.closeCombatTarget));

			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Updates all combo boxes
	public void setComboBoxes() {

		// Adds sup targets to dropdown menu
		setSuppressiveFireTargets();

		// Spotting Combo Boxes
		setSpottingUnits();

		// Set focus unit
		setTargetFocus();

	}

	public void setTargetFocus() {
		targetFocusLock = true; 

		targetedFireFocus.removeAllItems();
		targetedFireFocus.addItem("None");

		for (Unit unit : getValidTargetUnits()) {
			targetedFireFocus.addItem(unit.callsign);
		}

		targetedFireFocus.setSelectedIndex(0);
		
		targetFocusLock = false;
	}

	public ArrayList<Unit> getValidTargetUnits() {
		ArrayList<Unit> validTargetUnits = new ArrayList<>();

		for (Unit unit : targetUnits) {

			boolean validTarget = true;

			for (BulkTrooper trooper : getSelectedBulkTroopers()) {

				boolean hasValidTarget = false;

				for (Trooper targetTrooper : unit.individuals) {

					if (trooper.targetTroopers.contains(targetTrooper)) {
						hasValidTarget = true;
					}
				}

				if (!hasValidTarget) {
					validTarget = false;
				}

			}

			if (validTarget && !validTargetUnits.contains(unit)) {
				validTargetUnits.add(unit);
			}

		}

		return validTargetUnits;
	}

	// Sets spotting combo boxes
	public void setSpottingUnits() {

		for (Unit losUnit : targetUnits) {

			comboBoxSpottingUnits.addItem(losUnit.callsign);

		}

	}

	public void setSuppressiveFireTargets() {

		comboBoxTargetUnits.removeAllItems();
		comboBoxTargetUnits.addItem("None");
		if (unit.lineOfSight.size() < 1)
			return;

		for (Unit unit : targetUnits) {

			comboBoxTargetUnits.addItem(unit.callsign);
		}

		comboBoxTargetUnits.setSelectedIndex(0);

	}

	public int getRWSSuppressive(Trooper trooper) {
		// System.out.println("Get rws");
		int rws = 0;
		if (trooper == null) {
			// System.out.println("Trooper is null");
			return rws;
		}

		String weaponType = new Weapons().findWeapon(trooper.wep).type;

		if (weaponType.equals("Rifle")) {
			// System.out.println("Match: Trooper rifle rws: " + trooper.rifleRWS);
			rws = trooper.getSkill("Rifle");
		} else if (weaponType.equals("Heavy")) {
			// System.out.println("Match: Trooper Heavy rws: " + trooper.heavyRWS);
			rws = trooper.getSkill("Heavy");
		} else if (weaponType.equals("Subgun")) {
			rws = trooper.getSkill("Subgun");
		} else if (weaponType.equals("Launcher")) {
			rws = trooper.getSkill("Launcher");
		} else if (weaponType.equals("Pistol")) {
			rws = trooper.getSkill("Pistol");
		}

		// Apply GURPS missing arm penalty
		if (trooper.disabledArms > 0) {
			rws -= 20;
		}

		return rws;
	}

	// Suppressive fire action
	public void fireSuppressive(Trooper trooper) {
		// System.out.println("Line 750, suppression pass");
		Weapons weapon = new Weapons().findWeapon(trooper.wep);
		Unit targetUnit = unit.lineOfSight.get(comboBoxTargetUnits.getSelectedIndex());
		Random rand = new Random();

		int shots = weapon.suppressiveROF;
		boolean canShoot;
		canShoot = trooper.inventory.fireShots(shots, new Weapons().findWeapon(trooper.wep));

		// Checks for out of ammo
		if (!canShoot) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			// textPaneSuppressiveFire.setText("OUT OF AMMO");
			return;
		}

		int RWS = 0;
		RWS = getRWSSuppressive(trooper);

		if (RWS < 5) {
			RWS = 5;
		}

		int bonus = 0;

		// Subtracts ammo
		if (trooper.ammo < shots) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			return;
		}

		if (shots == 0) {
			gameWindow.conflictLog.addNewLineToQueue("Select shots!");
			return;
		}

		Trooper target = null;
		// System.out.println("Line 783, suppression pass");

		// Gets target from selected unit
		if (targetUnit.getTroopers() == null || targetUnit.getSize() < 1 || allDead(targetUnit)) {
			gameWindow.conflictLog.addNewLineToQueue("No Targets in Unit");
			return;
		}

		boolean rolling = true;
		while (rolling) {
			// System.out.println("Line 794, rolling pass");
			int roll = rand.nextInt(targetUnit.getSize());
			target = targetUnit.getTroopers().get(roll);
			if (target.alive) {
				rolling = false;
			}
		}

		if (target != null) {

			// System.out.println("Line 808, suppression pass");
			// Sets target unit
			targetUnit = null;

			// Loops through intiiative order units and then individuals
			// Finds target's unit
			for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
				Unit tempUnit = gameWindow.initiativeOrder.get(i);
				ArrayList<Trooper> tempTroopers = tempUnit.getTroopers();
				for (int j = 0; j < tempUnit.getSize(); j++) {
					if (tempTroopers.get(j).compareTo(target)) {
						targetUnit = tempUnit;
					}
				}
			}

			if (targetUnit == null) {
				return;
			}

			if (weapon.tracers) {
				trooper.firedTracers = true;
			} else {
				trooper.firedTracers = false;
			}

			// System.out.println("Weapon: "+weapon);
			// System.out.println("RWS: "+RWS);
			TargetedFire targetedFire = new TargetedFire(RWS, bonus, weapon, shots, target, trooper, targetUnit, unit,
					true);

			// Get hits
			if (targetedFire != null) {

				int hits = targetedFire.getHits();
				int TN = targetedFire.getTN();

				// System.out.println("Line 849, suppression pass");

				gameWindow.conflictLog.addNewLineToQueue("SUPPRESSIVE FIRE: " + unit.side + "::  " + unit.callsign
						+ " to " + targetUnit.side + "::  " + targetUnit.callsign
						+ "\nSuppressive Fire Results:\nHITS: " + hits + "\n" + "TN: " + TN);
				// Subtracts suppression, moral and organization
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
					if (gameWindow.initiativeOrder.get(i).compareTo(targetUnit)) {
						// System.out.println("Pass suppression");
						Unit tempUnit = gameWindow.initiativeOrder.get(i);

						int x = tempUnit.X;
						int y = tempUnit.Y;

						for (Unit potentialTarget : gameWindow.initiativeOrder) {

							if (potentialTarget.X == x && potentialTarget.Y == y) {
								if (potentialTarget.suppression + hits / 2 < 100) {
									potentialTarget.suppression += hits / 2;
								} else {
									potentialTarget.suppression = 100;
								}
								if (potentialTarget.organization - hits > 0) {
									potentialTarget.organization -= hits;
								} else {
									potentialTarget.organization = 0;
								}
							}

						}

						if (tempUnit.suppression + hits / 2 < 100) {
							tempUnit.suppression += hits / 2;
						} else {
							tempUnit.suppression = 100;
						}
						if (tempUnit.organization - hits > 0) {
							tempUnit.organization -= hits;
						} else {
							tempUnit.organization = 0;
						}
						/*
						 * if (tempUnit.moral - hits > 0) { tempUnit.moral -= hits; } else {
						 * tempUnit.moral = 0; }
						 */

						for (Unit collateralUnit : GameWindow.gameWindow.initiativeOrder) {

							if (collateralUnit.X != tempUnit.X || collateralUnit.Y != tempUnit.Y
									|| tempUnit.compareTo(collateralUnit)) {
								continue;
							}

							if (collateralUnit.suppression + hits / 2 < 100) {
								collateralUnit.suppression += hits / 2;
							} else {
								collateralUnit.suppression = 100;
							}
							if (collateralUnit.organization - hits > 0) {
								collateralUnit.organization -= hits;
							} else {
								collateralUnit.organization = 0;
							}

						}

						int trooperHits = 0;
						// Checks each hit for a strike against a individual in the target unit
						for (int j = 0; j < hits; j++) {
							int roll = rand.nextInt(100) + 1;
							int hitTN = 1;

							if (target.getBuilding() != null && target.getBuilding().getHexSize() < 200) {
								hitTN = 11;
							} else if (target.getBuilding() != null && target.getBuilding().getHexSize() < 400) {
								hitTN = 6;
							}

							if (roll <= hitTN) {
								trooperHits++;
							}
						}

						if (trooperHits > 0) {
							// System.out.println("pass trooper hits");
							ResolveHits resolveHits = new ResolveHits(target, trooperHits, weapon,
									gameWindow.conflictLog, tempUnit, unit, gameWindow);
							resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
							target = resolveHits.returnTarget();

						}

						tempUnit.setIndividual(target, target.number);

						gameWindow.initiativeOrder.set(i, tempUnit);

					}
				}

			}

			trooper.ammo -= shots;

			// System.out.println("Line 926, suppression pass");

			if (shots > 10) {
				int roll = rand.nextInt(8);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			} else {
				int roll = rand.nextInt(6);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			}

			// window.openUnit.troopers.set(index, trooper);

			// window.openUnit.refreshIndividuals();

			// Adds action point, if it is not a free action
			if (!chckbxFreeAction.isSelected()) {
				actionSpent(trooper);
			}

		}

	}

	public void actionSpent(Trooper trooper) {
		
		System.out.println("Action spent");
		
		if (game.getPhase() == 1)
			trooper.spentPhase1++;
		else
			trooper.spentPhase2++;

	}

	// Gets selected individuals from bulk trooper
	public ArrayList<Trooper> getSelectedTroopers() {

		ArrayList<Trooper> troopers = new ArrayList<Trooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals 2, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index).trooper);

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	public ArrayList<BulkTrooper> getSelectedBulkTroopers() {

		ArrayList<BulkTrooper> troopers = new ArrayList<BulkTrooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index));

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	// Gets trooper and returns trooper from the trooper's number
	// Might not work
	/*
	 * public Trooper findTrooperFromString(String trooperString) {
	 * 
	 * String value = trooperString; String numString = "";
	 * System.out.println("Find Trooper from string 1"); for(int i = 0; i <
	 * value.length() - 1; i++) {
	 * System.out.println("Find Trooper from string loop"); char c =
	 * value.charAt(i); if(c == ';') break; else if(Character.isDigit(c)) {
	 * numString += c; } }
	 * 
	 * 
	 * Trooper trooper = unit.individuals.get(Integer.parseInt(numString) - 1);
	 * System.out.println("Find Trooper from string 2, trooper: "+trooper.toString()
	 * ); return trooper; }
	 */

	public boolean allDead(Unit unit) {

		boolean allDead = true;

		for (Trooper trooper : unit.individuals)
			if (trooper.alive)
				allDead = false;

		return allDead;

	}

	// Refreshes front end changes to the troopers
	public void refreshIndividualList() {
		individualListLock = true; 
		
		int[] indices = individualsList.getSelectedIndices();

		individualsList.removeAll();

		DefaultListModel listModel = new DefaultListModel();

		for (BulkTrooper individual : bulkTroopers) {

			listModel.addElement(individual.bulkToString());

		}

		individualsList.setModel(listModel);

		individualsList.setSelectedIndices(indices);

		if (openUnit != null)
			openUnit.refreshIndividuals();
		
		individualListLock = false;
	}

	private class BulkTrooper {
		public Trooper trooper;
		public int spentCA;
		public int CA;
		public ArrayList<Trooper> targetTroopers = new ArrayList<Trooper>();
		public Trooper bestTargetTrooper = null;
		public TargetedFire tempTF;
		public TargetedFire targetedFire;
		public boolean possibleShots = true;
		public String wepPercent;
		public int sl;
		public Shoot shoot;
		public boolean shootReset = true;

		public BulkTrooper(Trooper trooper) {
			// System.out.println("Constructor");
			this.trooper = trooper;
			spentCA = 0;
			setAction();
			setTargets();

			this.CA = trooper.combatActions;
			this.wepPercent = trooper.weaponPercent;
			this.sl = trooper.sl;

		}

		// Returns a string for the individual output in the individuals list
		// Shows things like spent ca and ca
		public String bulkToString() {

			String rslt = "";
			rslt += trooper.number + "; " + trooper.name + " ";

			if (targetedFire != null && !targetedFire.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + targetedFire.fullAutoResults + ", ";
			} else if (tempTF != null && !tempTF.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + tempTF.fullAutoResults + ", ";
			}

			if (trooper.storedAimTime.size() > 0)
				rslt += "AIMING: ";

			if (trooper.HD) {
				rslt += "HUNKERED DOWN: ";
			}

			if (trooper.inCover) {
				rslt += "IN COVER: ";
			}

			if (trooper.disabledLegs > 1) {
				rslt += "IMOBALIZED: ";
			} else if (trooper.disabledLegs > 0) {
				rslt += "CRIP-LEG: ";
			}

			if (!trooper.conscious) {
				rslt += "UNCONSCIOUS: ";
			}

			if (trooper.personalShield != null)
				rslt += "CSS: " + trooper.personalShield.currentShieldStrength + " ";

			if (trooper.physicalDamage > 0)
				rslt += "PD: " + trooper.physicalDamage + ", ";

			if (trooper.ionDamage > 0)
				rslt += "ID: " + trooper.ionDamage + ", ";
			rslt += "P1: " + trooper.spentPhase1 + "/" + trooper.P1 + ", P2: " + trooper.spentPhase2 + "/" + trooper.P2
					+ " ";
			rslt += "CA: " + spentCA + "/" + CA + ", ";

			ArrayList<Trooper> spotted = new ArrayList<>();

			for (Spot spot : trooper.spotted) {

				for (Trooper trooper : spot.spottedIndividuals) {

					if (validTarget(trooper) && !spotted.contains(trooper)) {
						spotted.add(trooper);
					}

				}

			}

			rslt += "SC: " + spotted.size() + ", ";
			rslt += wepPercent + "%, SL: " + sl + ", ";
			rslt += "Ammo: " + trooper.ammo + ", ";
			rslt += "Weapon: " + trooper.wep;

			if (game.getPhase() == 1) {
				if (trooper.spentPhase1 >= trooper.P1 || trooper.spentPhase1 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			} else {
				if (trooper.spentPhase2 >= trooper.P2 || trooper.spentPhase2 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			}
			trooper.returnTrooperUnit(GameWindow.gameWindow).callsign +":: "
			String leaderType = trooper.leaderType == LeaderType.NONE ? "" : trooper.leaderType.toString()+":: ";
			
			return leaderType+ rslt;

		}

		public void setTargets() {

			targetTroopers.clear();

			for (Spot spot : trooper.spotted) {

				for (Trooper spottedTrooper : spot.spottedIndividuals)
					if (validTarget(spottedTrooper) && !targetTroopers.contains(spottedTrooper))
						targetTroopers.add(spottedTrooper);

			}

		}

		public void setAction() {

			trooper.setPCStats();
			CA = trooper.combatActions;
		}

	}

	public void aim(BulkTrooper bulkTrooper, int aimTime, Trooper targetTrooper) {
		// System.out.println("Target: "+targetTrooper.name);
		Trooper trooper = bulkTrooper.trooper;
		int maxAim = new Weapons().findWeapon(trooper.wep).aimTime.size();
		// System.out.println("Trooper Stored Aim Size:
		// "+bulkTrooper.trooper.storedAimTime.size());
		// Get stored aim time
		Hashtable<Trooper, Integer> storedAim;

		// If set to auto, uses maximum amount of remaining aim
		if (aimTime <= 0) {

			if (trooper.storedAimTime.containsKey(targetTrooper)) {
				// System.out.println("Pass 1");
				int additionalAim = bulkTrooper.CA - bulkTrooper.spentCA;
				int currentAim = trooper.storedAimTime.get(targetTrooper);
				int newAim;

				if (currentAim + additionalAim > maxAim - 1) {
					// System.out.println("Pass 1-1");
					newAim = maxAim;
					bulkTrooper.spentCA += maxAim - currentAim;
				} else {
					// System.out.println("Pass 1-2");
					newAim = currentAim += additionalAim;
					bulkTrooper.spentCA += additionalAim;
				}

				trooper.storedAimTime.put(targetTrooper, newAim);
			} else {
				// System.out.println("Pass 2");
				trooper.storedAimTime.clear();
				int newAim = bulkTrooper.CA - bulkTrooper.spentCA;
				trooper.storedAimTime.put(targetTrooper, newAim);
				bulkTrooper.spentCA += newAim;
			}

		}
		// Otherwise, goes to specified aim
		else {
			// System.out.println("Pass 3");
			trooper.storedAimTime.clear();
			trooper.storedAimTime.put(targetTrooper, aimTime - 1);
			bulkTrooper.spentCA += aimTime - 1;
		}

	}

	public void setValidTarget(BulkTrooper bulkTrooper) throws Exception {
		Trooper targetTrooper;

		targetTrooper = getTargetTrooper(bulkTrooper);

		if (validTarget(targetTrooper)) {
			// PCShots(bulkTrooper, targetTrooper);
			bulkTrooper.shoot = ShootUtility.setTarget(bulkTrooper.trooper.returnTrooperUnit(GameWindow.gameWindow), targetTrooper.returnTrooperUnit(gameWindow),
					bulkTrooper.shoot, bulkTrooper.trooper, targetTrooper, bulkTrooper.trooper.wep, -1);
			if(bulkTrooper.shootReset) {
				bulkTrooper.shoot.spentCombatActions = 0; 
				bulkTrooper.shoot.previouslySpentCa = 0;
			}
		} else {
			// SC: # displayed in list could be spotted troopers 
			// Multithreading could be leading to errors where ui doesn't get set or lists don't get updated / cleared 
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " no valid target");
		}

	}

	public void bulkTrooperShoot(BulkTrooper bulkTrooper) throws Exception {

		Trooper targetTrooper;

		if (bulkTrooper.targetedFire != null) {
			targetTrooper = bulkTrooper.targetedFire.targetTrooper;
		} else if (bulkTrooper.tempTF != null) {
			targetTrooper = bulkTrooper.tempTF.targetTrooper;
		} else {
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " trooper shot no valid target exception.");
		}

		if (validTarget(targetTrooper))
			PCFire(bulkTrooper, targetTrooper);
		else {
			bulkTrooper.targetedFire = null;
			bulkTrooper.tempTF = null;
			GameWindow.gameWindow.conflictLog.addNewLineToQueue("No valid target. Ending string of fire.");
			return;
		}

		if (bulkTrooper.targetedFire == null)
			return;
		else
			bulkTrooper.targetedFire.EAL += (int) spinnerConsecutiveEALBonus.getValue();

		if (bulkTrooper.targetedFire.TN < 0 || !validTarget(targetTrooper)) {

			// bulkTrooper.targetTroopers.remove(targetTrooper);
			GameWindow.gameWindow.conflictLog
					.addNewLineToQueue("TN less than 1, target may be dead. Ending string of fire.");
			bulkTrooper.targetTroopers.clear();
			bulkTrooper.setTargets();
			bulkTrooper.targetedFire = null;
			bulkTrooper.bestTargetTrooper = null;
			bulkTrooper.tempTF = null;

			for (BulkTrooper t : bulkTroopers) {
				t.targetTroopers.clear();
				t.setTargets();
			}

			bulkTrooper.trooper.storedAimTime.clear();
			if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
				bulkTrooper.trooper.storedAimTime.clear();
				actionSpent(bulkTrooper.trooper);

			}
			return;
		} else {
			// PCShots(bulkTrooper, targetTrooper);
		}

		if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
			bulkTrooper.trooper.storedAimTime.clear();
			actionSpent(bulkTrooper.trooper);

		}
	}

	// Loops through units in initiaitive order
	// Looks for unit containing indvididual
	// Returns unit
	public Unit findTrooperUnit(Trooper trooper) {
		ArrayList<Unit> units = gameWindow.initiativeOrder;

		for (Unit unit : units) {

			for (Trooper trooper1 : unit.getTroopers()) {

				if (trooper1.compareTo(trooper)) {
					// System.out.println("Found Unit: "+unit.callsign);
					return unit;
				}

			}

		}

		return null;

	}

	public boolean validTarget(Trooper target) {

		if (target == null || !target.alive || !target.conscious || target.HD) {
			return false;
		}

		return true;
	}

	public Trooper getTargetTrooper(BulkTrooper bulkTrooper) throws Exception {
		if(bulkTrooper.trooper.storedAimTime.size() > 0) {
			
			for(Trooper target : bulkTrooper.targetTroopers) {
				if(bulkTrooper.trooper.storedAimTime.containsKey(target)) {
					return target;
				}
			}
			
		}
		
		if (bulkTrooper.bestTargetTrooper != null && validTarget(bulkTrooper.bestTargetTrooper))
			return bulkTrooper.bestTargetTrooper;
		else
			bulkTrooper.bestTargetTrooper = null;

		/**/
		// Sets random target trooper
		// System.out.println("Target Troopers size:
		// "+bulkTrooper.targetTroopers.size());
		// shuffleList(bulkTrooper.targetTroopers);

		Trooper targetTrooper = null;

		Unit targetUnit = null;

		Unit trooperUnit = GameWindow.gameWindow.findTrooperUnit(bulkTrooper.trooper);

		for (Unit unit : GameWindow.gameWindow.initiativeOrder) {
			if (unit.side.equals(trooperUnit.side) || unit.individuals.size() < 1)
				continue;

			boolean validTargets = false;

			for (Trooper trooper : unit.individuals) {
				if (validTarget(trooper) && bulkTrooper.targetTroopers.contains(trooper)) {
					// System.out.println("Valid Targets");
					validTargets = true;
					break;
				}
			}

			if (!validTargets)
				continue;

			if (targetUnit == null) {
				targetUnit = unit;
			} else if (GameWindow.hexDif(targetUnit, trooperUnit) > GameWindow.hexDif(unit, trooperUnit)) {
				targetUnit = unit;
			}

		}

		if (targetedFireFocus.getSelectedIndex() > 0 && getValidTargetUnits().size() > 0) {
			targetUnit = getValidTargetUnits().get(targetedFireFocus.getSelectedIndex() - 1);
			System.out.println("Focus Target Unit: " + targetUnit.callsign);
		}

		if (targetUnit == null)
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " getTargetTrooper Target Unit is Null");

		ArrayList<Trooper> targetTrooperArray = new ArrayList<Trooper>();
		for (Trooper trooper : targetUnit.individuals) {
			if (bulkTrooper.targetTroopers.contains(trooper)) {
				targetTrooperArray.add(trooper);
			}
		}

		if (targetTrooperArray.size() == 0) {
			throw new Exception(
					bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " targetTrooperArray is empty.");
		}

		targetTrooper = targetTrooperArray.get(DiceRoller.randInt(0, targetTrooperArray.size() - 1));

		for (Trooper trooper : targetUnit.individuals) {
			if (!targetTrooper.inCover)
				break;

			if (!bulkTrooper.targetTroopers.contains(trooper))
				continue;

			targetTrooper = trooper;
		}

		bulkTrooper.bestTargetTrooper = targetTrooper;
		return targetTrooper;

	}

	public void PCFireGuiUpdates() {
		if (getSelectedBulkTroopers().size() < 1)
			return;

		int meanTN = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				meanTN += bulkTrooper.targetedFire.TN;
			else if (bulkTrooper.tempTF != null)
				meanTN += bulkTrooper.tempTF.TN;

		}
		meanTN /= getSelectedBulkTroopers().size();
		lblTn.setText("Mean TN: " + meanTN);

		int aimTime = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				aimTime += bulkTrooper.targetedFire.spentAimTime;
			else if (bulkTrooper.tempTF != null)
				aimTime += bulkTrooper.tempTF.spentAimTime;

		}
		aimTime /= getSelectedBulkTroopers().size();
		lblAimTime.setText("Mean Aim Time: " + aimTime);

		int possibleShots = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.targetedFire.possibleShots - bulkTrooper.targetedFire.shotsTaken;

			} else if (bulkTrooper.tempTF != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.tempTF.possibleShots - bulkTrooper.tempTF.shotsTaken;

			}

		}
		possibleShots /= getSelectedBulkTroopers().size();
		lblPossibleShots.setText("Mean Possible Shots: " + possibleShots);

		// lblAmmo.setText("Ammo: "+bulkTrooper.trooper.ammo);
		// lblCombatActions.setText("TF CA: "+bulkTrooper.CA);
		gameWindow.conflictLog.addQueuedText();
		gameWindow.refreshInitiativeOrder();
		// refreshTargets();

	}

	public void PCFire(BulkTrooper bulkTrooper, Trooper targetTrooper) {
		// TargetedFire tempTF = bulkTrooper.tempTF;

		Trooper trooper = bulkTrooper.trooper;

		boolean shots;

		if (chckbxFullAuto.isSelected()) {
			shots = trooper.inventory.fireShots(new Weapons().findWeapon(trooper.wep).fullAutoROF,
					new Weapons().findWeapon(trooper.wep));
		} else {
			int roll = new Random().nextInt(3) + 1;
			shots = trooper.inventory.fireShots(roll, new Weapons().findWeapon(trooper.wep));
		}

		// Checks for out of ammo
		if (!shots) {
			// textPaneTargetedFire.setText("OUT OF AMMO");
			gameWindow.conflictLog
					.addNewLineToQueue("Trooper: " + trooper.number + ": " + trooper.name + " is out of ammo");
			return;
		}

		if (new Weapons().findWeapon(trooper.wep).fullAutoROF == 0 && chckbxFullAuto.isSelected()) {
			gameWindow.conflictLog.addNewLineToQueue(
					"Trooper: " + trooper.number + ": " + trooper.name + "'s weapon is not full auto capable.");
		}

		Trooper shooterTrooper = trooper;

		Unit targetUnit = findTrooperUnit(targetTrooper);
		Unit shooterUnit = findTrooperUnit(shooterTrooper);

		for (Trooper t : bulkTrooper.targetTroopers) {
			if (shooterTrooper.storedAimTime.containsKey(t)) {
				targetTrooper = t;
				break;
			}
		}

		int maxAim = comboBoxAimTime.getSelectedIndex() - 1;

		TargetedFire tf = new TargetedFire(shooterTrooper, targetTrooper, shooterUnit, targetUnit, gameWindow, maxAim,
				bulkTrooper.CA - bulkTrooper.spentCA,
				(int) spinnerEALBonus.getValue() + (int) spinnerConsecutiveEALBonus.getValue(),
				(int) spinnerPercentBonus.getValue(), 0, shooterTrooper.wep);

		tf.spentCA = bulkTrooper.spentCA;

		if (bulkTrooper.targetedFire == null) {
			bulkTrooper.targetedFire = tf;
			// reaction = null;
			bulkTrooper.possibleShots = true;
		} else if (!tf.targetTrooper.compareTo(bulkTrooper.targetedFire.targetTrooper)) {
			bulkTrooper.targetedFire = tf;
		}

		bulkTrooper.targetedFire.PCHits = 0;

		if (bulkTrooper.possibleShots) {

			if (chckbxFullAuto.isSelected()) {
				bulkTrooper.targetedFire.fullAutoBurst(true);
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				} else if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 2;
				}
			} else {
				bulkTrooper.targetedFire.shot(comboBoxTargetZone.getSelectedIndex());
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				}
			}

			// System.out.println("TARGETED FIRE: ");
			// System.out.println("targetedFire.shotsTaken:
			// "+bulkTrooper.targetedFire.shotsTaken);
			// System.out.println("targetedFire.timeToReaction:
			// "+bulkTrooper.targetedFire.timeToReaction);
			/*
			 * if(targetedFire.shotsTaken >= targetedFire.timeToReaction &&
			 * targetedFire.shotsTaken != 0 && this.reaction == null && targetTrooper.alive
			 * && targetTrooper.conscious && targetTrooper.canAct(gameWindow.game)) { //
			 * React System.out.println("REACTION"); //ReactionToFireWindow reaction = new
			 * ReactionToFireWindow(shooterTrooper, targetTrooper, windowOpenTrooper,
			 * gameWindow); //this.reaction = reaction;
			 * 
			 * }
			 */
		}

		if (bulkTrooper.targetedFire.PCHits > 0) {
			ResolveHits resolveHits = new ResolveHits(targetTrooper, bulkTrooper.targetedFire.PCHits,
					new Weapons().findWeapon(shooterTrooper.wep), gameWindow.conflictLog,
					targetTrooper.returnTrooperUnit(gameWindow), shooterUnit, gameWindow);

			if (bulkTrooper.targetedFire.calledShot) {
				resolveHits.calledShot = true;
				resolveHits.calledShotBounds = bulkTrooper.targetedFire.calledShotBounds;

			}

			if (targetTrooper.returnTrooperUnit(gameWindow).suppression + bulkTrooper.targetedFire.PCHits < 100) {
				targetTrooper.returnTrooperUnit(gameWindow).suppression += bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).suppression = 100;
			}
			if (targetTrooper.returnTrooperUnit(gameWindow).organization - bulkTrooper.targetedFire.PCHits > 0) {
				targetTrooper.returnTrooperUnit(gameWindow).organization -= bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).organization = 0;
			}

			resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
			InjuryLog.InjuryLog.addTrooper(targetTrooper);
		}

		if (bulkTrooper.targetedFire.possibleShots <= bulkTrooper.targetedFire.shotsTaken) {
			// Shot ends
			/*
			 * lblPossibleShots.setText("Possible Shots: None");
			 * lblAimTime.setText("Aim Time: N/A"); lblTN.setText("Target Number: N/A");
			 */
			// reaction = null;
			bulkTrooper.possibleShots = false;
			// bulkTrooper.targetedFire = null;
			// PCShots(bulkTrooper);
		}

		if (chckbxFullAuto.isSelected()) {

			bulkTrooper.spentCA += 2;
		} else {

			bulkTrooper.spentCA++;
		}

		/*
		 * if(!targetTrooper.alive) {
		 * 
		 * if(chckbxMultipleTargets.isSelected()) {
		 * 
		 * targetedFire = null; possibleShots = true; reaction = null; PCShots(); } else
		 * { // Performed after swing worker is done actionSpent(openUnit, index);
		 * openUnit.openNext(true); f.dispose(); }
		 * 
		 * 
		 * }
		 */

		// setDetails(openTrooper);

	}

	// Gets weapon
	public Weapons getWeapon(Trooper trooper) {

		return new Weapons().findWeapon(trooper.wep);
	}

	public Unit findUnit(String callsign) {

		for (Unit unit : gameWindow.initiativeOrder)
			if (unit.callsign.equals(callsign))
				return unit;

		return null;
	}

	// Spot test
	public void spotTest(String targetCallsign, Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		// Find target unit
		Unit targetUnit = findUnit(targetCallsign);

		Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
				comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
				gameWindow);

		// Print results
		spotAction.displayResultsQueue(gameWindow, spotAction);

		// Set results in trooper
		trooper.spotted.add(spotAction);
		// Refresh trooper
		// refreshTrooper(trooper);
		// window.openUnit.troopers.set(index, trooper);

	}

	// Spot test
	public void spotTestAll(Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		for (Unit targetUnit : unit.lineOfSight) {

			Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
					comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
					gameWindow);

			spotAction.displayResultsQueue(gameWindow, spotAction);

			// Set results in trooper
			trooper.spotted.add(spotAction);
		}

	}

	public boolean hasTargets(BulkTrooper bulkTrooper) {

		return true;

	}

	public boolean freeAction() {
		return chckbxFreeAction.isSelected();
	}

	public void volley() {

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {

				InjuryLog.InjuryLog.addAlreadyInjured();
				ArrayList<BulkTrooper> troops = selectedBulkTroopers;

				ExecutorService es = Executors.newFixedThreadPool(16);

				for (BulkTrooper bulkTrooper : troops) {

					Shoot shoot = bulkTrooper.shoot;

					if (shoot == null)
						continue;

					es.submit(() -> {
						System.out.println("Submit");
						try {

							
							int shots = 1; 
							while (shoot.spentCombatActions < shoot.shooter.combatActions && 
									(validTarget(shoot.target) || comboBoxTargetUnits.getSelectedIndex() > 0)
									&& !shoot.outOfAmmo) {

								System.out.println("volley shot: "+shots);
								
								if (comboBoxTargetUnits.getSelectedIndex() > 0)
									shoot.suppressiveFire(shoot.wep.suppressiveROF);
								else if (chckbxFullAuto.isSelected())
									shoot.burst();
								else
									shoot.shot(chckbxGuided.isSelected());

								GameWindow.gameWindow.conflictLog.addNewLineToQueue("Results: " + shoot.shotResults);

								valleyValidTargetCheck(shoot, bulkTrooper);
								shots++;
								System.out.println("Volley CA test: "+(shoot.spentCombatActions < shoot.shooter.combatActions));
								System.out.println("Volley Valid Target Test: "+validTarget(shoot.target));
								System.out.println("Volley Valid Supp Target Test: "+(comboBoxTargetUnits.getSelectedIndex() > 0));
								System.out.println("Volley Out of Ammo Test: "+(!shoot.outOfAmmo));
							}
							
							
							
						} catch (Exception e) {
							e.printStackTrace();
						}
					});
					
					try {
						TimeUnit.MILLISECONDS.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				try {
					TimeUnit.MILLISECONDS.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				es.shutdown();

				return null;
			}

			@Override
			protected void done() {

				try {
					TimeUnit.MILLISECONDS.sleep(250);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
					if(!chckbxFreeAction.isSelected()) {
						System.out.println("volley action spent");
						actionSpent(bulkTrooper.trooper);
					}
				}
				
				System.out.println("volley gui updates");
				guiUpdates();
				refreshIndividualList();
				InjuryLog.InjuryLog.printResultsToLog();
				gameWindow.conflictLog.addQueuedText();
				// individualsList.setSelectedIndex(-1);

			}

		};

		worker.execute();

	}

	public void valleyValidTargetCheck(Shoot shoot, BulkTrooper bulkTrooper) throws Exception {
		if (!validTarget(shoot.target)) {
			bulkTrooper.setTargets();

			if (bulkTrooper.targetTroopers.size() > 0) {
				setValidTarget(bulkTrooper);

				if (comboBoxAimTime.getSelectedIndex() == 0)
					bulkTrooper.shoot.autoAim();

				if (comboBoxTargetZone.getSelectedIndex() > 0) {
					setCalledShotBounds(bulkTrooper.shoot);
				}
			}

		}
	}

	public void ordnanceComboboxes() {
		/*
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None"); Hex hex
		 * = GameWindow.gameWindow.findHex(trooperUnit.X, trooperUnit.Y); if
		 * (trooperBuilding == null && hex != null) { for (Building building :
		 * hex.buildings) {
		 * 
		 * comboBoxBuilding.addItem(building.name);
		 * 
		 * } comboBoxBuilding.setSelectedIndex(0); } else if (hex != null) {
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None");
		 * comboBoxBuilding.addItem("ALREADY INSIDE");
		 * comboBoxBuilding.setSelectedIndex(1); }
		 */
	}

	public void guiUpdates() {

		ArrayList<Shoot> shots = new ArrayList<>();

		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2");
				continue;
			}
			shots.add(bulkTrooper.shoot);
		}

		ShootUtility.shootGuiUpdate(lblPossibleShots, lblAimTime, lblTn, null, null, null, chckbxFullAuto, shots);
	}

	public void setCalledShotBounds(Shoot shoot) {
		if (shoot == null) {
			System.out.println("shoot is null set called shot bounds");
			return;
		}

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {
					int index = comboBoxTargetZone.getSelectedIndex();
					System.out.println("Size ALM Pre: " + shoot.sizeALM);
					if (index == 0) {
						System.out.println("Clear called shot");
						shoot.calledShotBounds.clear();
						shoot.calledShotLocation = "";
					} else {
						System.out.println("set called shot");
						shoot.setCalledShotBounds(comboBoxTargetZone.getSelectedIndex());
					}
					System.out.println("Size ALM POST: " + shoot.sizeALM);
					shoot.setALM();
					shoot.setEAL();
					shoot.setSingleTn();
					shoot.setFullAutoTn();
					shoot.setSuppressiveTn();
				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {

				guiUpdates();

			}

		};

		worker.execute();
	}

	public void bonuses() {

		for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2 bonuses");
				continue;
			}
			bulkTrooper.shoot.setBonuses((int) spinnerPercentBonus.getValue(), (int) spinnerEALBonus.getValue(),
					(int) spinnerConsecutiveEALBonus.getValue());
		}

		guiUpdates();

	}

	public void selected() {
		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {

					ExecutorService es = Executors.newFixedThreadPool(16);

					ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
					ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

					for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
						if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
							removeTrooper.add(bulkTrooper);
						}
					}

					for (BulkTrooper bulkTrooper : removeTrooper) {
						selectedBulkTroopers.remove(bulkTrooper);
					}

					for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
						if (selectedBulkTroopers.contains(bulkTrooper))
							continue;

						if (bulkTrooper.targetTroopers.size() > 0) {
							es.submit(() -> {
								System.out.println("Submit");
								try {
									
									if(comboBoxTargetUnits.getSelectedIndex() > 0)
										bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
												bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
									else 
										setValidTarget(bulkTrooper);

									if (comboBoxAimTime.getSelectedIndex() == 0)
										bulkTrooper.shoot.autoAim();

									if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
										setCalledShotBounds(bulkTrooper.shoot);
									}

								} catch (Exception e) {
									e.printStackTrace();
								}
							});
						}
						
						if(!selectedBulkTroopers.contains(bulkTrooper))
							selectedBulkTroopers.add(bulkTrooper);
					}

					/*
					 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					 * if(bulkTrooper.targetTroopers.size() < 1) { continue; }
					 * 
					 * 
					 * es.submit(() -> { System.out.println("Submit"); try {
					 * setValidTarget(bulkTrooper); } catch (Exception e) { e.printStackTrace(); }
					 * }); }
					 */

					es.shutdown();

					System.out.println("Finished Threads");

				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {
				/*
				 * targetedFireFocus.removeAllItems();
				 * targetedFireFocus.addItem("Targeted Fire Focus"); targetUnits.clear();
				 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
				 * 
				 * for(Trooper targetTrooper : bulkTrooper.targetTroopers) { Unit targetUnit =
				 * findTrooperUnit(targetTrooper);
				 * 
				 * if(targetUnits.contains(targetUnit)) continue;
				 * 
				 * targetUnits.add(targetUnit);
				 * targetedFireFocus.addItem(findTrooperUnit(targetTrooper).callsign);
				 * 
				 * }
				 * 
				 * }
				 */

				// System.out.println("Done");
				
				
				selectedGuiUpdates();
			}

		};

		worker.execute();
	}
	
	public void selectedGuiUpdates() {
		try {
			TimeUnit.MILLISECONDS.sleep(250);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		setTargetFocus();
		gameWindow.conflictLog.addQueuedText();
		// PCFireGuiUpdates();
		guiUpdates();
		System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-03-11 15:16:10.141
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-03-11 15:16:10.141
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-03-11 15:16:10.176
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Conflict;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.SwingWorker;

import Trooper.Trooper;
import Trooper.generateSquad;
import Unit.Unit;
import UtilityClasses.DiceRoller;
import UtilityClasses.ShootUtility;

import javax.swing.JButton;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;

import javax.swing.JSpinner;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.JList;
import javax.swing.JCheckBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionListener;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.util.SystemOutLogger;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import Actions.ReactionToFireWindow;
import Actions.Spot;
import Actions.TargetedFire;
import Company.Formation.LeaderType;
import Hexes.Building;
import Hexes.Hex;
import Injuries.Injuries;
import Injuries.ResolveHits;
import Items.Weapons;
import Shoot.Shoot;

import javax.swing.event.ListSelectionEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class BulkWindow {

	private String path = System.getProperty("user.dir") + "\\";
	// My vars

	public boolean targetFocusLock = false;
	public boolean individualListLock = false;
	public GameWindow gameWindow;
	public Game game;
	public ArrayList<BulkTrooper> bulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<BulkTrooper> selectedBulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<Unit> targetUnits = new ArrayList<Unit>();
	public Unit unit;
	public ArrayList<String> callsigns = new ArrayList<String>();
	public OpenUnit openUnit;

	// Jframe gui vars
	private JFrame frame;
	private JTextField textFieldDC;
	private JList individualsList;
	private JComboBox comboBoxTargetUnits;
	private JCheckBox chckbxFreeAction;
	private JSpinner caBonusSpinner;
	private JSpinner spinnerEALBonus;
	private JSpinner spinnerPercentBonus;
	private JComboBox comboBoxAimTime;
	private JCheckBox chckbxFullAuto;
	private JLabel lblAimTime;
	private JLabel lblTn;
	private JLabel lblPossibleShots;
	private JCheckBox chckbxLaser;
	private JCheckBox chckbxIrLaser;
	private JCheckBox chckbxThermals;
	private JCheckBox chckbxWeaponLights;
	private JCheckBox chckbxManualStance;
	private JComboBox comboBoxStance;
	private JSpinner spinnerNVGGen;
	private JTextField textFieldPen;
	private JComboBox comboBoxOF;
	private JComboBox comboBoxSpottingUnits;
	private JComboBox comboBoxScanArea;
	private JComboBox comboBoxAddUnit;
	private JList listSpottedUnitsArray;
	private JComboBox targetedFireFocus;
	private JCheckBox chckbxUnspottable;
	private JSpinner spinnerSpottingDifficulty;
	private JSpinner spinnerConsecutiveEALBonus;
	private JComboBox comboBoxWeapon;
	private JTextField textFieldCallsign;
	private JComboBox comboBoxTargetZone;
	private JComboBox comboBoxBuilding;
	private JComboBox comboBoxGrenadeTargets;
	private JComboBox comboBoxGrenade;
	private JSpinner spinnerGrenadeX;
	private JSpinner spinnerGrenadeY;
	private JSpinner spinnerTargetRoom;
	private JSpinner spinnerTargetFloor;
	private JSpinner spinnerThrowBonus;
	private JSpinner spinnerThrowEALBonus;
	private JSpinner spinnerLauncherBonus;
	private JSpinner spinnerLauncherX;
	private JSpinner spinnerLauncherY;
	private JCheckBox chckbxGuided;

	/**
	 * Create the application.
	 * 
	 * @wbp.parser.constructor
	 */
	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;

		initializeWindow();
		setIndividuals();
		refreshIndividualList();
		setComboBoxes();
	}

	public BulkWindow(ArrayList<Unit> units) {

		this.unit = units.get(0);
		this.gameWindow = GameWindow.gameWindow;
		this.game = GameWindow.gameWindow.game;
		this.openUnit = null;

		ArrayList<String> sides = new ArrayList<>();
		
		ArrayList<Trooper> troopers = new ArrayList<>();

		for (Unit unit : units) {
			if(!sides.contains(unit.side)) {
				sides.add(unit.side);
			}
			
			
			for (Trooper trooper : unit.individuals) {
				troopers.add(trooper);
			}
		}
		
		if(sides.size() > 1) {
			System.out.println("Sort troopers");
			for(Trooper trooper : troopers) {
				trooper.kills = DiceRoller.randInt(0, 9);
			}
			Collections.sort(troopers, new Comparator<Trooper>() {
				   public int compare(Trooper b1, Trooper b2) {
					   
					   System.out.println("b1 CA: "+((b1.combatActions+ b1.sl) - b1.kills)+", b2 CA: "+((b2.combatActions + b2.sl) - b2.kills));
					   if((b1.combatActions+ b1.sl) - b1.kills < (b2.combatActions + b2.sl) - b2.kills)
						   return 1;
					   else if((b1.combatActions+ b1.sl) - b1.kills > (b2.combatActions + b2.sl) - b2.kills)
						   return -1;
					   else 
						   return 0;
				   }
			});
		}
		

		initializeWindow();
		setIndividuals(troopers);
		refreshIndividualList();
		setComboBoxes();
	}
	
	

	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit, ArrayList<Trooper> cqbt) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;
		initializeWindow();
		setIndividuals(cqbt);
		refreshIndividualList();
		setComboBoxes();
	}

	private void initializeWindow() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1113, 712);
		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		frame.setVisible(true);

		// Get the screen size
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Dimension screenSize = toolkit.getScreenSize();
		// Calculate the frame location
		int x = (screenSize.width - frame.getWidth()) / 2;
		int y = (screenSize.height - frame.getHeight()) / 2;

		// Set the new frame location
		frame.setLocation(x, y);

		JButton btnClearSpotted = new JButton("Remove All Spotted");
		btnClearSpotted.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnClearSpotted.setBounds(784, 211, 249, 23);
		btnClearSpotted.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						// System.out.println("Clear Spot1");

						for (Trooper trooper : unit.individuals) {

							trooper.spotted.clear();

						}

						// System.out.println("Clear Spot2");
						return null;
					}

				};

				worker.execute();

			}
		});

		JComboBox comboBox = new JComboBox();
		comboBox.setBounds(784, 149, 143, 20);
		comboBox.setForeground(Color.BLACK);
		// comboBox.setSelectedIndex(0);

		JLabel label = new JLabel("Remove Spotted");
		label.setBounds(782, 123, 226, 31);
		label.setForeground(Color.BLACK);
		label.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton button = new JButton("Remove");
		button.setBounds(944, 148, 89, 23);
		button.setForeground(Color.BLACK);

		JButton button_1 = new JButton("Spot Hex");
		button_1.setBounds(944, 104, 89, 23);
		button_1.setForeground(Color.BLACK);

		JComboBox comboBox_1 = new JComboBox();
		comboBox_1.setBounds(944, 74, 89, 20);
		comboBox_1.setForeground(Color.BLACK);
		// comboBox_1.setSelectedIndex(0);

		JSpinner spinner = new JSpinner();
		spinner.setBounds(882, 105, 40, 20);
		spinner.setForeground(Color.BLACK);

		JSpinner spinner_1 = new JSpinner();
		spinner_1.setBounds(808, 105, 40, 20);
		spinner_1.setForeground(Color.BLACK);

		JLabel label_1 = new JLabel("Y: ");
		label_1.setBounds(858, 100, 30, 31);
		label_1.setForeground(Color.BLACK);
		label_1.setFont(new Font("Calibri", Font.PLAIN, 12));

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 84, 445, 389);
		frame.getContentPane().add(scrollPane);
		individualsList = new JList();
		individualsList.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseMoved(MouseEvent e) {

				JList theList = (JList) e.getSource();
				int index = theList.locationToIndex(e.getPoint());
				if (index > -1) {
					theList.setToolTipText(null);
					String text = "<html>";
					// System.out.println("Target Paint");
					for (Trooper trooper : bulkTroopers.get(index).targetTroopers) {
						text += trooper.findTargetUnit(gameWindow) + ":: " + trooper.number + ":: " + trooper.name;
						// System.out.println("Loop");
						if (!trooper.compareTo(bulkTroopers.get(index).targetTroopers
								.get(bulkTroopers.get(index).targetTroopers.size() - 1)))
							text += "<br>";

					}

					if (text.equals("<html>"))
						theList.setToolTipText(null);
					else
						theList.setToolTipText(text + "</html>");
				}

			}
		});
		individualsList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0) {

				if (arg0.getValueIsAdjusting() || individualsList.getSelectedIndices().length < 1 || individualListLock)
					return;

				selected();

				// System.out.println("Entry Count:
				// "+individualsList.getSelectedValuesList().size());
			}
		});
		
		
		
		individualsList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		scrollPane.setViewportView(individualsList);
		
		
		comboBoxAddUnit = new JComboBox();
		comboBoxAddUnit.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxAddUnit.setSelectedIndex(0);
		comboBoxAddUnit.setBounds(784, 74, 143, 20);
		comboBoxAddUnit.setForeground(Color.BLACK);
		// comboBox_2.setSelectedIndex(0);

		JLabel label_2 = new JLabel("X: ");
		label_2.setBounds(784, 100, 30, 31);
		label_2.setForeground(Color.BLACK);
		label_2.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton btnAddSpotted = new JButton("Add Individual");
		btnAddSpotted.setBounds(784, 180, 115, 23);
		btnAddSpotted.setForeground(Color.BLACK);

		JButton button_3 = new JButton("Add Whole Unit");
		button_3.setBounds(909, 180, 124, 23);
		button_3.setForeground(Color.BLACK);

		JLabel label_3 = new JLabel("Individual");
		label_3.setBounds(944, 43, 143, 31);
		label_3.setForeground(Color.BLACK);
		label_3.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_4 = new JLabel("Unit");
		label_4.setBounds(784, 43, 143, 31);
		label_4.setForeground(Color.BLACK);
		label_4.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_5 = new JLabel("Add Spotted");
		label_5.setBounds(784, 11, 162, 31);
		label_5.setForeground(Color.BLACK);
		label_5.setFont(new Font("Calibri", Font.PLAIN, 14));
		frame.getContentPane().setLayout(null);
		frame.getContentPane().add(btnClearSpotted);
		frame.getContentPane().add(label_5);
		frame.getContentPane().add(label_4);
		frame.getContentPane().add(comboBoxAddUnit);
		frame.getContentPane().add(label_3);
		frame.getContentPane().add(comboBox_1);
		frame.getContentPane().add(btnAddSpotted);
		frame.getContentPane().add(button_3);
		frame.getContentPane().add(spinner_1);
		frame.getContentPane().add(label_2);
		frame.getContentPane().add(label_1);
		frame.getContentPane().add(spinner);
		frame.getContentPane().add(button_1);
		frame.getContentPane().add(comboBox);
		frame.getContentPane().add(label);
		frame.getContentPane().add(button);

		JLabel label_6 = new JLabel("PEN");
		label_6.setForeground(Color.BLACK);
		label_6.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_6.setDoubleBuffered(true);
		label_6.setBounds(784, 311, 30, 31);
		frame.getContentPane().add(label_6);

		textFieldPen = new JTextField();
		textFieldPen.setForeground(Color.BLACK);
		textFieldPen.setColumns(10);
		textFieldPen.setBounds(814, 316, 34, 20);
		frame.getContentPane().add(textFieldPen);

		JLabel label_7 = new JLabel("DC");
		label_7.setForeground(Color.BLACK);
		label_7.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_7.setDoubleBuffered(true);
		label_7.setBounds(858, 311, 30, 31);
		frame.getContentPane().add(label_7);

		textFieldDC = new JTextField();
		textFieldDC.setForeground(Color.BLACK);
		textFieldDC.setColumns(10);
		textFieldDC.setBounds(882, 316, 40, 20);
		frame.getContentPane().add(textFieldDC);

		comboBoxOF = new JComboBox();
		comboBoxOF.setModel(new DefaultComboBoxModel(new String[] { "Open", "Fire" }));
		comboBoxOF.setSelectedIndex(0);
		comboBoxOF.setForeground(Color.BLACK);
		// comboBox_3.setSelectedIndex(0);
		comboBoxOF.setBounds(967, 316, 62, 20);
		frame.getContentPane().add(comboBoxOF);

		JLabel label_8 = new JLabel("O/F");
		label_8.setForeground(Color.BLACK);
		label_8.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_8.setDoubleBuffered(true);
		label_8.setBounds(932, 311, 30, 31);
		frame.getContentPane().add(label_8);

		JButton button_4 = new JButton("Add Injury");
		button_4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					ResolveHits resolveHits = new ResolveHits(trooper);

					Injuries newInjury = resolveHits.getPCHitsManual(Integer.parseInt(textFieldPen.getText()),
							Integer.parseInt(textFieldDC.getText()), comboBoxOF.getSelectedIndex());

					if (newInjury == null) {
						gameWindow.conflictLog.addNewLine("EPEN < 0.5");
					}

				}

			}
		});
		button_4.setForeground(Color.BLACK);
		button_4.setBounds(882, 347, 147, 23);
		frame.getContentPane().add(button_4);

		JComboBox comboBox_4 = new JComboBox();
		comboBox_4.setModel(new DefaultComboBoxModel(new String[] { "Random Loc." }));
		comboBox_4.setSelectedIndex(0);
		comboBox_4.setForeground(Color.BLACK);
		// comboBox_4.setSelectedIndex(0);
		comboBox_4.setBounds(784, 348, 92, 20);
		frame.getContentPane().add(comboBox_4);

		JLabel lblAddInjuries = new JLabel("Add Injuries");
		lblAddInjuries.setForeground(Color.BLACK);
		lblAddInjuries.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblAddInjuries.setBounds(784, 293, 162, 23);
		frame.getContentPane().add(lblAddInjuries);

		listSpottedUnitsArray = new JList();
		listSpottedUnitsArray.setForeground(Color.BLACK);
		listSpottedUnitsArray.setBackground(Color.WHITE);
		listSpottedUnitsArray.setBounds(625, 43, 143, 160);
		frame.getContentPane().add(listSpottedUnitsArray);

		JLabel label_9 = new JLabel("Spotting Units");
		label_9.setForeground(Color.BLACK);
		label_9.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_9.setBounds(625, 11, 369, 31);
		frame.getContentPane().add(label_9);

		spinnerNVGGen = new JSpinner();
		spinnerNVGGen.setForeground(Color.BLACK);
		spinnerNVGGen.setBounds(625, 320, 34, 20);
		frame.getContentPane().add(spinnerNVGGen);

		JLabel label_10 = new JLabel("Gen:");
		label_10.setForeground(Color.BLACK);
		label_10.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10.setBounds(596, 317, 40, 28);
		frame.getContentPane().add(label_10);

		JButton button_2 = new JButton("Add Thermals");
		button_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					trooper.thermalVision = true;

				}

			}
		});
		button_2.setForeground(Color.BLACK);
		button_2.setBounds(669, 319, 97, 23);
		frame.getContentPane().add(button_2);

		JButton button_5 = new JButton("Add NVGs");
		button_5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if ((int) spinnerNVGGen.getValue() < 1 || (int) spinnerNVGGen.getValue() > 5) {
						gameWindow.conflictLog.addNewLine("NVG Gen not a value from 1 to 5.");
						return;
					}

					trooper.nightVision = true;
					trooper.nightVisionEffectiveness = (int) spinnerNVGGen.getValue();

				}

			}
		});
		button_5.setForeground(Color.BLACK);
		button_5.setBounds(479, 322, 114, 23);
		frame.getContentPane().add(button_5);

		JCheckBox checkBox = new JCheckBox("NVGs");
		checkBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!trooper.nightVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have night vision.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.nightVisionInUse = true;
					else
						trooper.nightVisionInUse = false;

				}

			}
		});
		checkBox.setForeground(Color.BLACK);
		checkBox.setFont(new Font("Calibri", Font.BOLD, 12));
		checkBox.setBackground(Color.WHITE);
		checkBox.setBounds(625, 293, 143, 23);
		frame.getContentPane().add(checkBox);

		JButton button_6 = new JButton("Clear");
		button_6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				listSpottedUnitsArray.removeAll();
				callsigns.clear();

				DefaultListModel listSpottedUnits = new DefaultListModel();

				for (int i = 0; i < callsigns.size(); i++) {
					listSpottedUnits.addElement(callsigns.get(i));

				}

				listSpottedUnitsArray.setModel(listSpottedUnits);

			}
		});
		button_6.setForeground(Color.BLACK);
		button_6.setBounds(479, 126, 136, 25);
		frame.getContentPane().add(button_6);

		JButton button_7 = new JButton("Spot All");
		button_7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						ExecutorService es = Executors.newFixedThreadPool(16);
						
						try {
							
							
							
							for (Trooper trooper : getSelectedTroopers()) {

								
								es.submit(() -> {
									// System.out.println("Spot Test All 1");
									spotTestAll(trooper, unit);
									// System.out.println("Spot Test All 2");

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

							}

							es.shutdown();
							
							// refreshTargets();
						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						
						GameWindow.gameWindow.conflictLog.addQueuedText();

					}

				};

				worker.execute();

			}
		});
		button_7.setForeground(Color.BLACK);
		button_7.setBounds(479, 154, 136, 25);
		frame.getContentPane().add(button_7);

		chckbxFreeAction = new JCheckBox("Free Action");
		chckbxFreeAction.setForeground(Color.BLACK);
		chckbxFreeAction.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxFreeAction.setBackground(Color.WHITE);
		chckbxFreeAction.setBounds(84, 57, 97, 27);
		frame.getContentPane().add(chckbxFreeAction);

		comboBoxScanArea = new JComboBox();
		comboBoxScanArea
				.setModel(new DefaultComboBoxModel(new String[] { "60 Degrees", "180 Degrees", "20 Yard Hex" }));
		comboBoxScanArea.setSelectedIndex(0);
		// comboBox_5.setSelectedIndex(0);
		comboBoxScanArea.setForeground(Color.BLACK);
		comboBoxScanArea.setBounds(479, 183, 136, 20);
		frame.getContentPane().add(comboBoxScanArea);

		JButton button_8 = new JButton("Roll Spot");
		button_8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);
							
							for (Trooper trooper : getSelectedTroopers()) {

								es.submit(() -> {
									// Loops through all signs, performs spotting test
									for (int i = 0; i < callsigns.size(); i++) {
										// System.out.println("Spot Test 1");
										spotTest(callsigns.get(i), trooper, unit);
										// System.out.println("Spot Test 2");
									}

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
				

							}
							
							es.shutdown();
							
							

						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						// refreshTargets();
						GameWindow.gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		button_8.setForeground(Color.BLACK);
		button_8.setBounds(479, 99, 136, 25);
		frame.getContentPane().add(button_8);

		JButton button_9 = new JButton("Add Unit");
		button_9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (comboBoxSpottingUnits.getSelectedIndex() > 0) {

					String callsign = comboBoxSpottingUnits.getSelectedItem().toString();

					if (!callsigns.contains(callsign)) {
						callsigns.add(callsign);
					}

					listSpottedUnitsArray.removeAll();

					DefaultListModel listSpottedUnits = new DefaultListModel();

					for (int i = 0; i < callsigns.size(); i++) {
						listSpottedUnits.addElement(callsigns.get(i));

					}

					listSpottedUnitsArray.setModel(listSpottedUnits);

				}

			}
		});
		button_9.setForeground(Color.BLACK);
		button_9.setBounds(479, 71, 136, 25);
		frame.getContentPane().add(button_9);

		comboBoxSpottingUnits = new JComboBox();
		comboBoxSpottingUnits.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxSpottingUnits.setSelectedIndex(0);
		comboBoxSpottingUnits.setForeground(Color.BLACK);
		// comboBox_6.setSelectedIndex(0);
		comboBoxSpottingUnits.setBounds(479, 43, 136, 23);
		frame.getContentPane().add(comboBoxSpottingUnits);

		JLabel label_11 = new JLabel("Spot");
		label_11.setForeground(Color.BLACK);
		label_11.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_11.setBounds(479, 11, 53, 31);
		frame.getContentPane().add(label_11);

		comboBoxStance = new JComboBox();
		comboBoxStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (comboBoxStance.getSelectedItem().toString().equals(trooper.stance)) {
						return;
					}

					// System.out.println("Changing Stance, Trooper Stance: |"+trooper.stance+"| Box
					// Stance: |"+ comboBoxStance.getSelectedItem().toString()+"|");
					trooper.stance = comboBoxStance.getSelectedItem().toString();

					if (bulkTrooper.targetedFire != null) {
						bulkTrooper.targetedFire.spentCA++;
					} else {

						bulkTrooper.spentCA++;
					}

					try {
						// PCShots(bulkTrooper, getTargetTrooper(bulkTrooper));
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				}

				PCFireGuiUpdates();

			}
		});
		comboBoxStance.setModel(new DefaultComboBoxModel(new String[] { "Standing ", "Crouched", "Prone" }));
		comboBoxStance.setForeground(Color.BLACK);
		comboBoxStance.setBounds(479, 347, 147, 23);
		frame.getContentPane().add(comboBoxStance);

		JLabel label_12 = new JLabel("Misc.");
		label_12.setForeground(Color.BLACK);
		label_12.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_12.setBounds(479, 235, 146, 31);
		frame.getContentPane().add(label_12);

		chckbxManualStance = new JCheckBox("Manual Stance");
		chckbxManualStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (chckbxManualStance.isSelected())
						trooper.manualStance = true;
					else
						trooper.manualStance = false;

				}

			}
		});
		chckbxManualStance.setForeground(Color.BLACK);
		chckbxManualStance.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxManualStance.setBackground(Color.WHITE);
		chckbxManualStance.setBounds(637, 348, 131, 23);
		frame.getContentPane().add(chckbxManualStance);

		chckbxLaser = new JCheckBox("Laser");
		chckbxLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).laser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a laser pointer.");
						return;
					}

					if (chckbxLaser.isSelected())
						bulkTrooper.trooper.weaponLaserOn = true;
					else
						bulkTrooper.trooper.weaponLaserOn = false;

				}

			}
		});
		chckbxLaser.setForeground(Color.BLACK);
		chckbxLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxLaser.setBackground(Color.WHITE);
		chckbxLaser.setBounds(479, 267, 74, 23);
		frame.getContentPane().add(chckbxLaser);

		chckbxIrLaser = new JCheckBox("IR Laser");
		chckbxIrLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).irLaser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a IR laser pointer.");
						return;
					}

					if (chckbxIrLaser.isSelected())
						bulkTrooper.trooper.weaponIRLaserOn = true;
					else
						bulkTrooper.trooper.weaponIRLaserOn = false;

				}

			}
		});
		chckbxIrLaser.setForeground(Color.BLACK);
		chckbxIrLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxIrLaser.setBackground(Color.WHITE);
		chckbxIrLaser.setBounds(559, 267, 74, 23);
		frame.getContentPane().add(chckbxIrLaser);

		chckbxWeaponLights = new JCheckBox("Weapon Lights");
		chckbxWeaponLights.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!getWeapon(trooper).light) {
						gameWindow.conflictLog.addNewLine("This trooper does not have weapon lights.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.weaponLightOn = true;
					else
						trooper.weaponLightOn = false;

				}

			}
		});
		chckbxWeaponLights.setForeground(Color.BLACK);
		chckbxWeaponLights.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxWeaponLights.setBackground(Color.WHITE);
		chckbxWeaponLights.setBounds(479, 293, 142, 23);
		frame.getContentPane().add(chckbxWeaponLights);

		chckbxThermals = new JCheckBox("Thermals");
		chckbxThermals.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!bulkTrooper.trooper.thermalVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have thermal vision.");
						return;
					}

					if (chckbxThermals.isSelected())
						bulkTrooper.trooper.thermalVisionInUse = true;
					else
						bulkTrooper.trooper.thermalVisionInUse = false;

				}

			}
		});
		chckbxThermals.setForeground(Color.BLACK);
		chckbxThermals.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxThermals.setBackground(Color.WHITE);
		chckbxThermals.setBounds(639, 267, 129, 23);
		frame.getContentPane().add(chckbxThermals);

		JLabel label_13 = new JLabel("CA Bonus:");
		label_13.setForeground(Color.BLACK);
		label_13.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_13.setBounds(479, 567, 74, 31);
		frame.getContentPane().add(label_13);

		caBonusSpinner = new JSpinner();
		caBonusSpinner.setBounds(550, 572, 34, 20);
		frame.getContentPane().add(caBonusSpinner);

		JButton btnApply = new JButton("Apply");
		btnApply.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.CA += (int) caBonusSpinner.getValue();

				}

			}
		});
		btnApply.setForeground(Color.BLACK);
		btnApply.setBounds(596, 570, 114, 23);
		frame.getContentPane().add(btnApply);

		JLabel label_16 = new JLabel("Starting Aim T:");
		label_16.setBackground(Color.WHITE);
		label_16.setForeground(Color.BLACK);
		label_16.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16.setBounds(480, 442, 114, 31);
		frame.getContentPane().add(label_16);

		comboBoxAimTime = new JComboBox();
		comboBoxAimTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1)
					return;

				for (BulkTrooper trooper : selectedBulkTroopers) {

					Shoot shoot = trooper.shoot;

					if (shoot == null)
						continue;

					SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

						@Override
						protected Void doInBackground() throws Exception {

							if (comboBoxAimTime.getSelectedIndex() == 0)
								shoot.autoAim();
							else
								shoot.setAimTime(comboBoxAimTime.getSelectedIndex() - 1);

							if (comboBoxTargetZone.getSelectedIndex() > 0) {
								setCalledShotBounds(shoot);
							}

							return null;
						}

						@Override
						protected void done() {
							try {
								TimeUnit.SECONDS.sleep(1);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							guiUpdates();

						}

					};

					worker.execute();
				}

			}
		});
		comboBoxAimTime.setModel(new DefaultComboBoxModel(new String[] { "Auto", "0", "1", "2", "3", "4", "5", "6", "7",
				"8", "9", "10", "11", "12", "13", "14", "15" }));

		comboBoxAimTime.setBackground(Color.WHITE);
		comboBoxAimTime.setForeground(Color.BLACK);
		// comboBox_10.setSelectedIndex(0);
		comboBoxAimTime.setBounds(479, 470, 87, 20);
		frame.getContentPane().add(comboBoxAimTime);

		comboBoxTargetZone = new JComboBox();
		comboBoxTargetZone.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper trooper : selectedBulkTroopers) {
					try {
						setCalledShotBounds(trooper.shoot);
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}

				guiUpdates();

			}
		});
		comboBoxTargetZone.setModel(new DefaultComboBoxModel(new String[] { "Auto", "Head", "Body", "Legs" }));
		comboBoxTargetZone.setSelectedIndex(0);
		comboBoxTargetZone.setBackground(Color.WHITE);
		comboBoxTargetZone.setForeground(Color.BLACK);
		// comboBox_11.setSelectedIndex(0);
		comboBoxTargetZone.setBounds(596, 470, 113, 20);
		frame.getContentPane().add(comboBoxTargetZone);

		JLabel label_17 = new JLabel("Target Zone:");
		label_17.setBackground(Color.WHITE);
		label_17.setForeground(Color.BLACK);
		label_17.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_17.setBounds(596, 442, 114, 31);
		frame.getContentPane().add(label_17);

		spinnerEALBonus = new JSpinner();
		spinnerEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerEALBonus.setBackground(Color.WHITE);
		spinnerEALBonus.setForeground(Color.BLACK);
		spinnerEALBonus.setBounds(479, 536, 74, 20);
		frame.getContentPane().add(spinnerEALBonus);

		JLabel label_18 = new JLabel("EAL Bonus:");
		label_18.setBackground(Color.WHITE);
		label_18.setForeground(Color.BLACK);
		label_18.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18.setBounds(479, 497, 87, 31);
		frame.getContentPane().add(label_18);

		spinnerPercentBonus = new JSpinner();
		spinnerPercentBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerPercentBonus.setBackground(Color.WHITE);
		spinnerPercentBonus.setForeground(Color.BLACK);
		spinnerPercentBonus.setBounds(563, 536, 74, 20);
		frame.getContentPane().add(spinnerPercentBonus);

		JLabel label_19 = new JLabel("% Bonus:");
		label_19.setBackground(Color.WHITE);
		label_19.setForeground(Color.BLACK);
		label_19.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_19.setBounds(563, 497, 74, 31);
		frame.getContentPane().add(label_19);

		JButton button_10 = new JButton("Aim");
		button_10.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						
						for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
							
							int newAim = bulkTrooper.shoot.aimTime + (bulkTrooper.trooper.combatActions - bulkTrooper.shoot.spentCombatActions);

							newAim = newAim >= bulkTrooper.shoot.wep.aimTime.size() ? bulkTrooper.shoot.wep.aimTime.size() - 1 : newAim;

							bulkTrooper.shoot.spentCombatActions += newAim - bulkTrooper.shoot.aimTime;

							bulkTrooper.shoot.setAimTime(newAim);
							
							if (!chckbxFreeAction.isSelected() && bulkTrooper.shoot.spentCombatActions >= bulkTrooper.trooper.combatActions) {
								actionSpent(bulkTrooper.trooper);
							}
							bulkTrooper.shootReset = false;

						}
						
						return null;
					}

					@Override
					protected void done() {

						guiUpdates();
						refreshIndividualList();
					}

				};

				worker.execute();

			}
		});
		button_10.setForeground(Color.BLACK);
		button_10.setBounds(648, 535, 87, 23);
		frame.getContentPane().add(button_10);

		lblAimTime = new JLabel("Mean Aim Time:");
		lblAimTime.setBackground(Color.WHITE);
		lblAimTime.setForeground(Color.BLACK);
		lblAimTime.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblAimTime.setBounds(647, 501, 136, 23);
		frame.getContentPane().add(lblAimTime);

		JButton btnSingle = new JButton("Single");
		btnSingle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						InjuryLog.InjuryLog.addAlreadyInjured();

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								Shoot shoot = bulkTrooper.shoot;
								if (shoot == null)
									continue;

								es.submit(() -> {
									System.out.println("Single Fire");
									try {

										if (comboBoxTargetUnits.getSelectedIndex() > 0)
											shoot.suppressiveFire(shoot.wep.suppressiveROF);
										else if (chckbxFullAuto.isSelected())
											shoot.burst();
										else
											shoot.shot(chckbxGuided.isSelected());

										try {
											TimeUnit.MILLISECONDS.sleep(15);
										} catch (InterruptedException e) {
											e.printStackTrace();
										}
										
										valleyValidTargetCheck(shoot, bulkTrooper);
										
										GameWindow.gameWindow.conflictLog
												.addNewLineToQueue("Results: " + shoot.shotResults);
										//System.out.println("Supp results: "+shoot.shotResults);
										
										
									} catch (Exception e) {
										e.printStackTrace();
									}
								});

								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								
								bulkTrooper.shootReset = false;

							}

							try {
								TimeUnit.MILLISECONDS.sleep(250);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							
							es.shutdown();

						} catch (Exception e2) {
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(100);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						
						for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
							if (!freeAction() && ((bulkTrooper.shoot.spentCombatActions >= bulkTrooper.shoot.shooter.combatActions) 
									|| comboBoxTargetUnits.getSelectedIndex() > 0)) {
								System.out.println("Action spent suppress");
								actionSpent(bulkTrooper.trooper);
							}
						}
						
						guiUpdates();
						refreshIndividualList();
						InjuryLog.InjuryLog.printResultsToLog();
						gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		btnSingle.setForeground(Color.BLACK);
		btnSingle.setBounds(744, 535, 87, 23);
		frame.getContentPane().add(btnSingle);

		lblTn = new JLabel("Mean TN: 0");
		lblTn.setBackground(Color.WHITE);
		lblTn.setForeground(Color.BLACK);
		lblTn.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTn.setBounds(963, 501, 124, 23);
		frame.getContentPane().add(lblTn);

		chckbxFullAuto = new JCheckBox("Full Auto");
		chckbxFullAuto.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				guiUpdates();
				//refreshIndividualList();
			}
		});
		chckbxFullAuto.setForeground(Color.BLACK);
		chckbxFullAuto.setBackground(Color.WHITE);
		chckbxFullAuto.setBounds(715, 469, 74, 23);
		frame.getContentPane().add(chckbxFullAuto);

		comboBoxTargetUnits = new JComboBox();
		comboBoxTargetUnits.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								es.submit(() -> {
									System.out.println("Submit");
									try {
										if(comboBoxTargetUnits.getSelectedIndex() > 0) {
											bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
													bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
											
											if(bulkTrooper.shootReset) {
												bulkTrooper.shoot.spentCombatActions = 0; 
												bulkTrooper.shoot.previouslySpentCa = 0;
											}
											
											System.out.println("Create bulk suppressive shot: "+(bulkTrooper.shoot == null ? "is null" : "not null"));
										} else if(bulkTrooper.targetTroopers.size() > 0){
											setValidTarget(bulkTrooper);
										}

										if (comboBoxAimTime.getSelectedIndex() == 0 && bulkTrooper.shoot != null)
											bulkTrooper.shoot.autoAim();
										
										if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
											setCalledShotBounds(bulkTrooper.shoot);
										}

									} catch (Exception e) {
										e.printStackTrace();
									}
								});
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							try {
								TimeUnit.MILLISECONDS.sleep(150);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}

							es.shutdown();

							System.out.println("Finished Threads");

						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(250);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						gameWindow.conflictLog.addQueuedText();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Suppression Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();
				
			}
		});
		comboBoxTargetUnits.setForeground(Color.BLACK);
		// comboBox_12.setSelectedIndex(0);
		comboBoxTargetUnits.setBounds(479, 643, 178, 21);
		frame.getContentPane().add(comboBoxTargetUnits);

		JLabel label_23 = new JLabel("Taget Unit: ");
		label_23.setForeground(Color.BLACK);
		label_23.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_23.setBounds(479, 614, 125, 31);
		frame.getContentPane().add(label_23);

		JLabel label_27 = new JLabel("Suppressive Fire");
		label_27.setForeground(Color.BLACK);
		label_27.setFont(new Font("Calibri", Font.PLAIN, 18));
		label_27.setBounds(479, 596, 221, 23);
		frame.getContentPane().add(label_27);

		JLabel lblTargetedFire = new JLabel("Targeted Fire");
		lblTargetedFire.setForeground(Color.BLACK);
		lblTargetedFire.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblTargetedFire.setBounds(479, 422, 221, 23);
		frame.getContentPane().add(lblTargetedFire);

		JLabel lblBulkOperations = new JLabel("Bulk Operations");
		lblBulkOperations.setForeground(Color.BLACK);
		lblBulkOperations.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblBulkOperations.setBounds(10, 10, 221, 20);
		frame.getContentPane().add(lblBulkOperations);

		JLabel lblIndividuals = new JLabel("Individuals");
		lblIndividuals.setForeground(Color.BLACK);
		lblIndividuals.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblIndividuals.setBackground(Color.WHITE);
		lblIndividuals.setBounds(10, 59, 87, 23);
		frame.getContentPane().add(lblIndividuals);

		

		lblPossibleShots = new JLabel("Mean Possible Shots:");
		lblPossibleShots.setForeground(Color.BLACK);
		lblPossibleShots.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblPossibleShots.setBackground(Color.WHITE);
		lblPossibleShots.setBounds(784, 501, 178, 23);
		frame.getContentPane().add(lblPossibleShots);

		JButton btnVolley = new JButton("Volley");
		btnVolley.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				try {
					volley();
				} catch (Exception ecx) {
					ecx.printStackTrace();
				}

			}
		});
		btnVolley.setForeground(Color.BLACK);
		btnVolley.setBounds(841, 535, 87, 23);
		frame.getContentPane().add(btnVolley);

		JButton button_7_1 = new JButton("HD");
		button_7_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					if (!bulkTrooper.trooper.inCover) {
						gameWindow.conflictLog.addNewLine(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
								+ " is not in cover and can't hunker down.");
						continue;
					}

					if (bulkTrooper.trooper.HD)
						bulkTrooper.trooper.HD = false;
					else
						bulkTrooper.trooper.HD = true;

					if (!chckbxFreeAction.isSelected())
						actionSpent(bulkTrooper.trooper);

				}

				refreshIndividualList();

			}
		});
		button_7_1.setForeground(Color.BLACK);
		button_7_1.setBounds(479, 212, 136, 25);
		frame.getContentPane().add(button_7_1);

		targetedFireFocus = new JComboBox();
		targetedFireFocus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1 || targetFocusLock)
					return;

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								if (bulkTrooper.targetTroopers.size() > 0) {
									es.submit(() -> {
										System.out.println("Submit");
										try {
											setValidTarget(bulkTrooper);

											if (comboBoxAimTime.getSelectedIndex() == 0)
												bulkTrooper.shoot.autoAim();

											if (comboBoxTargetZone.getSelectedIndex() > 0) {
												setCalledShotBounds(bulkTrooper.shoot);
											}

										} catch (Exception e) {
											e.printStackTrace();
										}
									});
								}
								
								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							es.shutdown();

							System.out.println("Finished Threads");

							
						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.SECONDS.sleep(1);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						// System.out.println("Done");
						gameWindow.conflictLog.addQueuedText();
						// PCFireGuiUpdates();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();

			}
		});
		targetedFireFocus.setModel(new DefaultComboBoxModel(new String[] { "No Target Unit Focus" }));
		targetedFireFocus.setForeground(Color.BLACK);
		targetedFireFocus.setBackground(Color.WHITE);
		targetedFireFocus.setBounds(944, 535, 143, 20);
		frame.getContentPane().add(targetedFireFocus);

		JButton button_5_1 = new JButton("Select Fresh");
		button_5_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// System.out.println("Phase: "+game.getPhase()+", Action:
				// "+game.getCurrentAction());

				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
				// System.out.println("Set Indexes: "+indices.length);
			}
		});
		button_5_1.setForeground(Color.BLACK);
		button_5_1.setBounds(325, 57, 130, 23);
		frame.getContentPane().add(button_5_1);

		chckbxUnspottable = new JCheckBox("Unspottable");
		chckbxUnspottable.setForeground(Color.BLACK);
		chckbxUnspottable.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxUnspottable.setBackground(Color.WHITE);
		chckbxUnspottable.setBounds(864, 261, 92, 20);
		frame.getContentPane().add(chckbxUnspottable);

		JLabel label_18_1 = new JLabel("Spotting Difficulty:");
		label_18_1.setForeground(Color.BLACK);
		label_18_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_1.setBackground(Color.WHITE);
		label_18_1.setBounds(784, 244, 143, 20);
		frame.getContentPane().add(label_18_1);

		spinnerSpottingDifficulty = new JSpinner();
		spinnerSpottingDifficulty.setForeground(Color.BLACK);
		spinnerSpottingDifficulty.setBackground(Color.WHITE);
		spinnerSpottingDifficulty.setBounds(784, 260, 74, 20);
		frame.getContentPane().add(spinnerSpottingDifficulty);

		JButton btnSet = new JButton("Set");
		btnSet.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.trooper.spottingDifficulty = (int) spinnerSpottingDifficulty.getValue();
					bulkTrooper.trooper.unspottable = chckbxUnspottable.isSelected();

					if (bulkTrooper.trooper.unspottable) {

						for (Unit unit : gameWindow.initiativeOrder) {

							for (Trooper trooper : unit.individuals) {

								if (trooper == bulkTrooper.trooper)
									continue;

								for (Spot spot : trooper.spotted) {

									if (spot.spottedIndividuals.contains(bulkTrooper.trooper)) {
										spot.spottedIndividuals.remove(bulkTrooper.trooper);
									}

								}

							}

						}

					}

				}

			}
		});
		btnSet.setForeground(Color.BLACK);
		btnSet.setBounds(967, 259, 66, 23);
		frame.getContentPane().add(btnSet);

		JLabel label_18_2 = new JLabel("Consecutive EAL Bonus:");
		label_18_2.setForeground(Color.BLACK);
		label_18_2.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_2.setBackground(Color.WHITE);
		label_18_2.setBounds(720, 567, 162, 31);
		frame.getContentPane().add(label_18_2);

		spinnerConsecutiveEALBonus = new JSpinner();
		spinnerConsecutiveEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerConsecutiveEALBonus.setForeground(Color.BLACK);
		spinnerConsecutiveEALBonus.setBackground(Color.WHITE);
		spinnerConsecutiveEALBonus.setBounds(872, 571, 74, 20);
		frame.getContentPane().add(spinnerConsecutiveEALBonus);

		JLabel lblSetWeapons = new JLabel("Set Weapons");
		lblSetWeapons.setForeground(Color.BLACK);
		lblSetWeapons.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblSetWeapons.setBounds(479, 375, 162, 20);
		frame.getContentPane().add(lblSetWeapons);

		comboBoxWeapon = new JComboBox();
		comboBoxWeapon.setModel(new DefaultComboBoxModel(new String[] { "None", "DC15A", "DC15A-ion", "DC15LE", "DC15X",
				"DC15S", "DC17m", "DC17 Sniper", "Z6", "Westar M5", "E5", "E5S", "E5C", "MA37", "M392 DMR", "M739 SAW",
				"Type-51 Carbine", "Type-52 Rifle", "Type-52 Pistol" }));
		comboBoxWeapon.setForeground(Color.BLACK);
		comboBoxWeapon.setBounds(479, 395, 147, 23);
		frame.getContentPane().add(comboBoxWeapon);

		JButton btnSet_1 = new JButton("Set");
		btnSet_1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {

				if (comboBoxWeapon.getSelectedIndex() < 0) {
					return;
				}

				for (BulkTrooper trooper : selectedBulkTroopers) {

					trooper.trooper.wep = comboBoxWeapon.getSelectedItem().toString();
					
					if(trooper.shoot != null) {
						trooper.shoot.updateWeapon(trooper.trooper.wep);
					}

				}

				gameWindow.conflictLog.addNewLine("Weapons set");
				
				refreshIndividualList();
				
				if (openUnit != null)
					openUnit.refreshIndividuals();

			}
		});
		btnSet_1.setForeground(Color.BLACK);
		btnSet_1.setBounds(637, 395, 97, 23);
		frame.getContentPane().add(btnSet_1);

		textFieldCallsign = new JTextField();
		textFieldCallsign.setBounds(744, 396, 155, 20);
		frame.getContentPane().add(textFieldCallsign);
		textFieldCallsign.setColumns(10);

		JLabel lblJoinUnit = new JLabel("Transfer to Unit");
		lblJoinUnit.setForeground(Color.BLACK);
		lblJoinUnit.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblJoinUnit.setBounds(744, 375, 162, 20);
		frame.getContentPane().add(lblJoinUnit);

		JButton btnTransfer = new JButton("Transfer");
		btnTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnTransfer.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnTransfer.setForeground(Color.BLACK);
		btnTransfer.setBounds(954, 421, 97, 23);
		frame.getContentPane().add(btnTransfer);

		JButton btnClose = new JButton("Close");
		btnClose.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				if (gameWindow.cqbWindowOpen) {
					gameWindow.cqbWindowOpen = false;
				}

				for(BulkTrooper bulkTrooper : bulkTroopers) {
					
					if(GameWindow.gameWindow.game.getPhase() == 1) {
						if(bulkTrooper.trooper.spentPhase1 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					} else {
						if(bulkTrooper.trooper.spentPhase2 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					}
					
				}
				
				frame.dispose();

			}
		});
		btnClose.setBounds(998, 642, 89, 23);
		frame.getContentPane().add(btnClose);

		JButton btnClear = new JButton("Clear Aim");
		btnClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.storedAimTime.clear();
					bulkTrooper.targetTroopers.clear();
					bulkTrooper.setTargets();
				}
			}
		});
		btnClear.setForeground(Color.BLACK);
		btnClear.setBounds(954, 570, 97, 23);
		frame.getContentPane().add(btnClear);

		JButton btnResetFp = new JButton("Reset FP");
		btnResetFp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.fatigueSystem.fatiguePoints.set(0.0);
				}

				GameWindow.gameWindow.conflictLog.addNewLine("Reset FP for selected troopers.");

			}
		});
		btnResetFp.setForeground(Color.BLACK);
		btnResetFp.setBounds(883, 642, 111, 23);
		frame.getContentPane().add(btnResetFp);

		JButton btnPass = new JButton("Pass");
		btnPass.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					actionSpent(bulkTrooper.trooper);
				}
				refreshIndividualList();
			}
		});
		btnPass.setForeground(Color.BLACK);
		btnPass.setBounds(10, 30, 115, 23);
		frame.getContentPane().add(btnPass);

		JButton button_5_1_1 = new JButton("Select Shooters");
		button_5_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();
				
				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1.setForeground(Color.BLACK);
		button_5_1_1.setBounds(187, 57, 136, 23);
		frame.getContentPane().add(button_5_1_1);

		JButton button_5_1_1_1 = new JButton("Select Aiming");
		button_5_1_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1_1.setForeground(Color.BLACK);
		button_5_1_1_1.setBounds(187, 30, 136, 23);
		frame.getContentPane().add(button_5_1_1_1);

		JLabel lblLauncher = new JLabel("Launcher");
		lblLauncher.setForeground(Color.BLACK);
		lblLauncher.setFont(new Font("Calibri", Font.PLAIN, 16));
		lblLauncher.setBounds(10, 596, 136, 20);
		frame.getContentPane().add(lblLauncher);

		JLabel lblGrenade = new JLabel("Grenade: ");
		lblGrenade.setForeground(Color.BLACK);
		lblGrenade.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblGrenade.setBounds(10, 484, 136, 31);
		frame.getContentPane().add(lblGrenade);

		comboBoxGrenade = new JComboBox();
		comboBoxGrenade.setBounds(10, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenade);

		comboBoxGrenadeTargets = new JComboBox();
		comboBoxGrenadeTargets.setBounds(157, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenadeTargets);

		JLabel label_16_1 = new JLabel("Taget Individual: ");
		label_16_1.setForeground(Color.BLACK);
		label_16_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16_1.setBounds(157, 484, 121, 31);
		frame.getContentPane().add(label_16_1);

		JLabel lblOr = new JLabel("OR");
		lblOr.setForeground(Color.BLACK);
		lblOr.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblOr.setBounds(20, 533, 16, 31);
		frame.getContentPane().add(lblOr);

		JLabel lblX = new JLabel("X:");
		lblX.setForeground(Color.BLACK);
		lblX.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblX.setBounds(71, 536, 16, 31);
		frame.getContentPane().add(lblX);

		spinnerGrenadeX = new JSpinner();
		spinnerGrenadeX.setBounds(86, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeX);

		JLabel lblY = new JLabel("Y:");
		lblY.setForeground(Color.BLACK);
		lblY.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblY.setBounds(135, 536, 16, 31);
		frame.getContentPane().add(lblY);

		spinnerGrenadeY = new JSpinner();
		spinnerGrenadeY.setBounds(150, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeY);

		JLabel lblHex = new JLabel("Hex:");
		lblHex.setForeground(Color.BLACK);
		lblHex.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblHex.setBounds(38, 533, 40, 31);
		frame.getContentPane().add(lblHex);

		JLabel label_10_1 = new JLabel("OR");
		label_10_1.setForeground(Color.BLACK);
		label_10_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10_1.setBounds(200, 533, 16, 31);
		frame.getContentPane().add(label_10_1);

		comboBoxBuilding = new JComboBox();
		comboBoxBuilding.setSelectedIndex(-1);
		comboBoxBuilding.setBounds(298, 538, 136, 20);
		frame.getContentPane().add(comboBoxBuilding);

		JLabel lblBuilding_1 = new JLabel("Building:");
		lblBuilding_1.setForeground(Color.BLACK);
		lblBuilding_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblBuilding_1.setBounds(226, 533, 62, 31);
		frame.getContentPane().add(lblBuilding_1);

		spinnerTargetRoom = new JSpinner();
		spinnerTargetRoom.setBounds(71, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetRoom);

		JLabel lblTargetRoom = new JLabel("Room:");
		lblTargetRoom.setForeground(Color.BLACK);
		lblTargetRoom.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTargetRoom.setBounds(10, 567, 53, 31);
		frame.getContentPane().add(lblTargetRoom);

		spinnerTargetFloor = new JSpinner();
		spinnerTargetFloor.setBounds(170, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetFloor);

		JLabel lblFloor = new JLabel("Floor:");
		lblFloor.setForeground(Color.BLACK);
		lblFloor.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblFloor.setBounds(123, 569, 53, 31);
		frame.getContentPane().add(lblFloor);

		JButton btnThrow = new JButton("Throw");
		btnThrow.setBounds(303, 505, 125, 23);
		frame.getContentPane().add(btnThrow);

		spinnerThrowBonus = new JSpinner();
		spinnerThrowBonus.setBounds(308, 570, 40, 20);
		frame.getContentPane().add(spinnerThrowBonus);

		spinnerThrowEALBonus = new JSpinner();
		spinnerThrowEALBonus.setBounds(430, 570, 39, 20);
		frame.getContentPane().add(spinnerThrowEALBonus);

		JLabel label_15 = new JLabel("Other Bonus:");
		label_15.setForeground(Color.BLACK);
		label_15.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_15.setBounds(226, 567, 87, 31);
		frame.getContentPane().add(label_15);

		JLabel lblEalBonus = new JLabel("EAL Bonus:");
		lblEalBonus.setForeground(Color.BLACK);
		lblEalBonus.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblEalBonus.setBounds(354, 567, 80, 31);
		frame.getContentPane().add(lblEalBonus);

		JComboBox comboBoxLauncher = new JComboBox();
		comboBoxLauncher.setBounds(10, 617, 136, 20);
		frame.getContentPane().add(comboBoxLauncher);

		spinnerLauncherBonus = new JSpinner();
		spinnerLauncherBonus.setBounds(157, 617, 74, 20);
		frame.getContentPane().add(spinnerLauncherBonus);

		JLabel label_20 = new JLabel("X:");
		label_20.setForeground(Color.BLACK);
		label_20.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_20.setBounds(236, 614, 16, 31);
		frame.getContentPane().add(label_20);

		spinnerLauncherX = new JSpinner();
		spinnerLauncherX.setBounds(251, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherX);

		JLabel label_21 = new JLabel("Y:");
		label_21.setForeground(Color.BLACK);
		label_21.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_21.setBounds(300, 614, 16, 31);
		frame.getContentPane().add(label_21);

		spinnerLauncherY = new JSpinner();
		spinnerLauncherY.setBounds(315, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherY);

		JLabel label_22 = new JLabel("Target Hex:");
		label_22.setForeground(Color.BLACK);
		label_22.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_22.setBounds(261, 597, 87, 23);
		frame.getContentPane().add(label_22);

		JLabel label_19_1 = new JLabel("Other Bonus:");
		label_19_1.setForeground(Color.BLACK);
		label_19_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_19_1.setBounds(154, 593, 87, 23);
		frame.getContentPane().add(label_19_1);

		JButton btnShootHex = new JButton("Shoot Hex");
		btnShootHex.setBounds(364, 616, 89, 23);
		frame.getContentPane().add(btnShootHex);

		JComboBox comboBoxAmmoTypeLauncher = new JComboBox();
		comboBoxAmmoTypeLauncher.setSelectedIndex(-1);
		comboBoxAmmoTypeLauncher.setBounds(10, 644, 136, 20);
		frame.getContentPane().add(comboBoxAmmoTypeLauncher);

		JComboBox comboBoxLauncherConcealment = new JComboBox();
		comboBoxLauncherConcealment.setBounds(152, 644, 136, 20);
		frame.getContentPane().add(comboBoxLauncherConcealment);

		chckbxGuided = new JCheckBox("Guided");
		chckbxGuided.setForeground(Color.WHITE);
		chckbxGuided.setBackground(Color.DARK_GRAY);
		chckbxGuided.setBounds(796, 469, 80, 23);
		frame.getContentPane().add(chckbxGuided);
		
		JButton btnCreateTransfer = new JButton("Create & Transfer");
		btnCreateTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Adds new unit 
				// Splits unit 
				ArrayList<Trooper> individuals = new ArrayList<Trooper>();
				generateSquad squad = new generateSquad("Clone Trooper Phase 1", "Empty");
				individuals = squad.getSquad();
				Unit newUnit = new Unit(textFieldCallsign.getText(), 0, 0, individuals, 100, 0, 100, 0, 0, 20, 0, unit.behavior);
				
				//Unit newUnit = unit.copyUnit(unit); 
				newUnit.side = unit.side;
				newUnit.initiative = unit.initiative;
				newUnit.organization = unit.organization;
				unit.organization = unit.organization; 
				
				newUnit.concealment = unit.concealment;
				newUnit.suppression = unit.suppression;
				newUnit.moral = unit.moral;
				newUnit.cohesion = unit.cohesion;
				newUnit.company = unit.company;
				newUnit.X = unit.X;
				newUnit.Y = unit.Y;
				newUnit.behavior = unit.behavior;
				newUnit.lineOfSight = new ArrayList<Unit>(unit.lineOfSight);
				//Collections.copy(newUnit.lineOfSight, unit.lineOfSight);
				//newUnit.lineOfSight = Collections.copy(unit.lineOfSight);
				gameWindow.initiativeOrder.add(newUnit);
				
				gameWindow.rollInitiativeOrder();
				gameWindow.refreshInitiativeOrder();
				
				// Loops through initiative order
				// Finds units that have LOS with this unit 
				// Adds new unit to the spotting units LOS
				
				for(Unit initUnit : gameWindow.initiativeOrder) {
					
					if(initUnit.lineOfSight.contains(unit)) {
						initUnit.lineOfSight.add(newUnit);
					}
					
				}
				
				
				// Finds newUnit's company 
				// Adds unit to company 
				for(int i = 0; i < gameWindow.companies.size(); i++) {
					
					if(gameWindow.companies.get(i).getName().equals(newUnit.company) && gameWindow.companies.get(i).getSide().equals(newUnit.side)) {
						gameWindow.companies.get(i).updateUnit(unit);
						gameWindow.companies.get(i).addUnit(newUnit);
						// Adds companies to setupWindow
						gameWindow.confirmCompany(gameWindow.companies.get(i), i);
						//f.dispose();
						
					}
					
				}
				
				
				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnCreateTransfer.setForeground(Color.BLACK);
		btnCreateTransfer.setBounds(909, 395, 142, 23);
		frame.getContentPane().add(btnCreateTransfer);
		frame.setVisible(true);
	}

	public boolean trooperAlreadyAdded(Trooper trooper) {

		for (BulkTrooper bulkTrooper : bulkTroopers) {

			if (bulkTrooper.trooper.compareTo(trooper))
				return true;

		}

		return false;
	}

	// Creates bulk trooper classes and populates the arraylist
	public void setIndividuals() {

		for (Trooper trooper : unit.individuals) {
			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Sets bulk troopers for those in CQB
	public void setIndividuals(ArrayList<Trooper> cqbt) {

		for (Trooper trooper : cqbt) {

			// System.out.println("Trooper: "+trooper.name+", Code:
			// "+System.identityHashCode(trooper));
			// System.out.println("CQB Target: "+trooper.closeCombatTarget.name+", Code:
			// "+System.identityHashCode(trooper.closeCombatTarget));

			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Updates all combo boxes
	public void setComboBoxes() {

		// Adds sup targets to dropdown menu
		setSuppressiveFireTargets();

		// Spotting Combo Boxes
		setSpottingUnits();

		// Set focus unit
		setTargetFocus();

	}

	public void setTargetFocus() {
		targetFocusLock = true; 

		targetedFireFocus.removeAllItems();
		targetedFireFocus.addItem("None");

		for (Unit unit : getValidTargetUnits()) {
			targetedFireFocus.addItem(unit.callsign);
		}

		targetedFireFocus.setSelectedIndex(0);
		
		targetFocusLock = false;
	}

	public ArrayList<Unit> getValidTargetUnits() {
		ArrayList<Unit> validTargetUnits = new ArrayList<>();

		for (Unit unit : targetUnits) {

			boolean validTarget = true;

			for (BulkTrooper trooper : getSelectedBulkTroopers()) {

				boolean hasValidTarget = false;

				for (Trooper targetTrooper : unit.individuals) {

					if (trooper.targetTroopers.contains(targetTrooper)) {
						hasValidTarget = true;
					}
				}

				if (!hasValidTarget) {
					validTarget = false;
				}

			}

			if (validTarget && !validTargetUnits.contains(unit)) {
				validTargetUnits.add(unit);
			}

		}

		return validTargetUnits;
	}

	// Sets spotting combo boxes
	public void setSpottingUnits() {

		for (Unit losUnit : targetUnits) {

			comboBoxSpottingUnits.addItem(losUnit.callsign);

		}

	}

	public void setSuppressiveFireTargets() {

		comboBoxTargetUnits.removeAllItems();
		comboBoxTargetUnits.addItem("None");
		if (unit.lineOfSight.size() < 1)
			return;

		for (Unit unit : targetUnits) {

			comboBoxTargetUnits.addItem(unit.callsign);
		}

		comboBoxTargetUnits.setSelectedIndex(0);

	}

	public int getRWSSuppressive(Trooper trooper) {
		// System.out.println("Get rws");
		int rws = 0;
		if (trooper == null) {
			// System.out.println("Trooper is null");
			return rws;
		}

		String weaponType = new Weapons().findWeapon(trooper.wep).type;

		if (weaponType.equals("Rifle")) {
			// System.out.println("Match: Trooper rifle rws: " + trooper.rifleRWS);
			rws = trooper.getSkill("Rifle");
		} else if (weaponType.equals("Heavy")) {
			// System.out.println("Match: Trooper Heavy rws: " + trooper.heavyRWS);
			rws = trooper.getSkill("Heavy");
		} else if (weaponType.equals("Subgun")) {
			rws = trooper.getSkill("Subgun");
		} else if (weaponType.equals("Launcher")) {
			rws = trooper.getSkill("Launcher");
		} else if (weaponType.equals("Pistol")) {
			rws = trooper.getSkill("Pistol");
		}

		// Apply GURPS missing arm penalty
		if (trooper.disabledArms > 0) {
			rws -= 20;
		}

		return rws;
	}

	// Suppressive fire action
	public void fireSuppressive(Trooper trooper) {
		// System.out.println("Line 750, suppression pass");
		Weapons weapon = new Weapons().findWeapon(trooper.wep);
		Unit targetUnit = unit.lineOfSight.get(comboBoxTargetUnits.getSelectedIndex());
		Random rand = new Random();

		int shots = weapon.suppressiveROF;
		boolean canShoot;
		canShoot = trooper.inventory.fireShots(shots, new Weapons().findWeapon(trooper.wep));

		// Checks for out of ammo
		if (!canShoot) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			// textPaneSuppressiveFire.setText("OUT OF AMMO");
			return;
		}

		int RWS = 0;
		RWS = getRWSSuppressive(trooper);

		if (RWS < 5) {
			RWS = 5;
		}

		int bonus = 0;

		// Subtracts ammo
		if (trooper.ammo < shots) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			return;
		}

		if (shots == 0) {
			gameWindow.conflictLog.addNewLineToQueue("Select shots!");
			return;
		}

		Trooper target = null;
		// System.out.println("Line 783, suppression pass");

		// Gets target from selected unit
		if (targetUnit.getTroopers() == null || targetUnit.getSize() < 1 || allDead(targetUnit)) {
			gameWindow.conflictLog.addNewLineToQueue("No Targets in Unit");
			return;
		}

		boolean rolling = true;
		while (rolling) {
			// System.out.println("Line 794, rolling pass");
			int roll = rand.nextInt(targetUnit.getSize());
			target = targetUnit.getTroopers().get(roll);
			if (target.alive) {
				rolling = false;
			}
		}

		if (target != null) {

			// System.out.println("Line 808, suppression pass");
			// Sets target unit
			targetUnit = null;

			// Loops through intiiative order units and then individuals
			// Finds target's unit
			for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
				Unit tempUnit = gameWindow.initiativeOrder.get(i);
				ArrayList<Trooper> tempTroopers = tempUnit.getTroopers();
				for (int j = 0; j < tempUnit.getSize(); j++) {
					if (tempTroopers.get(j).compareTo(target)) {
						targetUnit = tempUnit;
					}
				}
			}

			if (targetUnit == null) {
				return;
			}

			if (weapon.tracers) {
				trooper.firedTracers = true;
			} else {
				trooper.firedTracers = false;
			}

			// System.out.println("Weapon: "+weapon);
			// System.out.println("RWS: "+RWS);
			TargetedFire targetedFire = new TargetedFire(RWS, bonus, weapon, shots, target, trooper, targetUnit, unit,
					true);

			// Get hits
			if (targetedFire != null) {

				int hits = targetedFire.getHits();
				int TN = targetedFire.getTN();

				// System.out.println("Line 849, suppression pass");

				gameWindow.conflictLog.addNewLineToQueue("SUPPRESSIVE FIRE: " + unit.side + "::  " + unit.callsign
						+ " to " + targetUnit.side + "::  " + targetUnit.callsign
						+ "\nSuppressive Fire Results:\nHITS: " + hits + "\n" + "TN: " + TN);
				// Subtracts suppression, moral and organization
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
					if (gameWindow.initiativeOrder.get(i).compareTo(targetUnit)) {
						// System.out.println("Pass suppression");
						Unit tempUnit = gameWindow.initiativeOrder.get(i);

						int x = tempUnit.X;
						int y = tempUnit.Y;

						for (Unit potentialTarget : gameWindow.initiativeOrder) {

							if (potentialTarget.X == x && potentialTarget.Y == y) {
								if (potentialTarget.suppression + hits / 2 < 100) {
									potentialTarget.suppression += hits / 2;
								} else {
									potentialTarget.suppression = 100;
								}
								if (potentialTarget.organization - hits > 0) {
									potentialTarget.organization -= hits;
								} else {
									potentialTarget.organization = 0;
								}
							}

						}

						if (tempUnit.suppression + hits / 2 < 100) {
							tempUnit.suppression += hits / 2;
						} else {
							tempUnit.suppression = 100;
						}
						if (tempUnit.organization - hits > 0) {
							tempUnit.organization -= hits;
						} else {
							tempUnit.organization = 0;
						}
						/*
						 * if (tempUnit.moral - hits > 0) { tempUnit.moral -= hits; } else {
						 * tempUnit.moral = 0; }
						 */

						for (Unit collateralUnit : GameWindow.gameWindow.initiativeOrder) {

							if (collateralUnit.X != tempUnit.X || collateralUnit.Y != tempUnit.Y
									|| tempUnit.compareTo(collateralUnit)) {
								continue;
							}

							if (collateralUnit.suppression + hits / 2 < 100) {
								collateralUnit.suppression += hits / 2;
							} else {
								collateralUnit.suppression = 100;
							}
							if (collateralUnit.organization - hits > 0) {
								collateralUnit.organization -= hits;
							} else {
								collateralUnit.organization = 0;
							}

						}

						int trooperHits = 0;
						// Checks each hit for a strike against a individual in the target unit
						for (int j = 0; j < hits; j++) {
							int roll = rand.nextInt(100) + 1;
							int hitTN = 1;

							if (target.getBuilding() != null && target.getBuilding().getHexSize() < 200) {
								hitTN = 11;
							} else if (target.getBuilding() != null && target.getBuilding().getHexSize() < 400) {
								hitTN = 6;
							}

							if (roll <= hitTN) {
								trooperHits++;
							}
						}

						if (trooperHits > 0) {
							// System.out.println("pass trooper hits");
							ResolveHits resolveHits = new ResolveHits(target, trooperHits, weapon,
									gameWindow.conflictLog, tempUnit, unit, gameWindow);
							resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
							target = resolveHits.returnTarget();

						}

						tempUnit.setIndividual(target, target.number);

						gameWindow.initiativeOrder.set(i, tempUnit);

					}
				}

			}

			trooper.ammo -= shots;

			// System.out.println("Line 926, suppression pass");

			if (shots > 10) {
				int roll = rand.nextInt(8);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			} else {
				int roll = rand.nextInt(6);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			}

			// window.openUnit.troopers.set(index, trooper);

			// window.openUnit.refreshIndividuals();

			// Adds action point, if it is not a free action
			if (!chckbxFreeAction.isSelected()) {
				actionSpent(trooper);
			}

		}

	}

	public void actionSpent(Trooper trooper) {
		
		System.out.println("Action spent");
		
		if (game.getPhase() == 1)
			trooper.spentPhase1++;
		else
			trooper.spentPhase2++;

	}

	// Gets selected individuals from bulk trooper
	public ArrayList<Trooper> getSelectedTroopers() {

		ArrayList<Trooper> troopers = new ArrayList<Trooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals 2, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index).trooper);

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	public ArrayList<BulkTrooper> getSelectedBulkTroopers() {

		ArrayList<BulkTrooper> troopers = new ArrayList<BulkTrooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index));

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	// Gets trooper and returns trooper from the trooper's number
	// Might not work
	/*
	 * public Trooper findTrooperFromString(String trooperString) {
	 * 
	 * String value = trooperString; String numString = "";
	 * System.out.println("Find Trooper from string 1"); for(int i = 0; i <
	 * value.length() - 1; i++) {
	 * System.out.println("Find Trooper from string loop"); char c =
	 * value.charAt(i); if(c == ';') break; else if(Character.isDigit(c)) {
	 * numString += c; } }
	 * 
	 * 
	 * Trooper trooper = unit.individuals.get(Integer.parseInt(numString) - 1);
	 * System.out.println("Find Trooper from string 2, trooper: "+trooper.toString()
	 * ); return trooper; }
	 */

	public boolean allDead(Unit unit) {

		boolean allDead = true;

		for (Trooper trooper : unit.individuals)
			if (trooper.alive)
				allDead = false;

		return allDead;

	}

	// Refreshes front end changes to the troopers
	public void refreshIndividualList() {
		individualListLock = true; 
		
		int[] indices = individualsList.getSelectedIndices();

		individualsList.removeAll();

		DefaultListModel listModel = new DefaultListModel();

		for (BulkTrooper individual : bulkTroopers) {

			listModel.addElement(individual.bulkToString());

		}

		individualsList.setModel(listModel);

		individualsList.setSelectedIndices(indices);

		if (openUnit != null)
			openUnit.refreshIndividuals();
		
		individualListLock = false;
	}

	private class BulkTrooper {
		public Trooper trooper;
		public int spentCA;
		public int CA;
		public ArrayList<Trooper> targetTroopers = new ArrayList<Trooper>();
		public Trooper bestTargetTrooper = null;
		public TargetedFire tempTF;
		public TargetedFire targetedFire;
		public boolean possibleShots = true;
		public String wepPercent;
		public int sl;
		public Shoot shoot;
		public boolean shootReset = true;

		public BulkTrooper(Trooper trooper) {
			// System.out.println("Constructor");
			this.trooper = trooper;
			spentCA = 0;
			setAction();
			setTargets();

			this.CA = trooper.combatActions;
			this.wepPercent = trooper.weaponPercent;
			this.sl = trooper.sl;

		}

		// Returns a string for the individual output in the individuals list
		// Shows things like spent ca and ca
		public String bulkToString() {

			String rslt = "";
			rslt += trooper.number + "; " + trooper.name + " ";

			if (targetedFire != null && !targetedFire.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + targetedFire.fullAutoResults + ", ";
			} else if (tempTF != null && !tempTF.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + tempTF.fullAutoResults + ", ";
			}

			if (trooper.storedAimTime.size() > 0)
				rslt += "AIMING: ";

			if (trooper.HD) {
				rslt += "HUNKERED DOWN: ";
			}

			if (trooper.inCover) {
				rslt += "IN COVER: ";
			}

			if (trooper.disabledLegs > 1) {
				rslt += "IMOBALIZED: ";
			} else if (trooper.disabledLegs > 0) {
				rslt += "CRIP-LEG: ";
			}

			if (!trooper.conscious) {
				rslt += "UNCONSCIOUS: ";
			}

			if (trooper.personalShield != null)
				rslt += "CSS: " + trooper.personalShield.currentShieldStrength + " ";

			if (trooper.physicalDamage > 0)
				rslt += "PD: " + trooper.physicalDamage + ", ";

			if (trooper.ionDamage > 0)
				rslt += "ID: " + trooper.ionDamage + ", ";
			rslt += "P1: " + trooper.spentPhase1 + "/" + trooper.P1 + ", P2: " + trooper.spentPhase2 + "/" + trooper.P2
					+ " ";
			rslt += "CA: " + spentCA + "/" + CA + ", ";

			ArrayList<Trooper> spotted = new ArrayList<>();

			for (Spot spot : trooper.spotted) {

				for (Trooper trooper : spot.spottedIndividuals) {

					if (validTarget(trooper) && !spotted.contains(trooper)) {
						spotted.add(trooper);
					}

				}

			}

			rslt += "SC: " + spotted.size() + ", ";
			rslt += wepPercent + "%, SL: " + sl + ", ";
			rslt += "Ammo: " + trooper.ammo + ", ";
			rslt += "Weapon: " + trooper.wep;

			if (game.getPhase() == 1) {
				if (trooper.spentPhase1 >= trooper.P1 || trooper.spentPhase1 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			} else {
				if (trooper.spentPhase2 >= trooper.P2 || trooper.spentPhase2 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			}
			trooper.returnTrooperUnit(GameWindow.gameWindow).callsign +":: "
			String leaderType = trooper.leaderType == LeaderType.NONE ? "" : trooper.leaderType.toString()+":: ";
			
			return leaderType+ rslt;

		}

		public void setTargets() {

			targetTroopers.clear();

			for (Spot spot : trooper.spotted) {

				for (Trooper spottedTrooper : spot.spottedIndividuals)
					if (validTarget(spottedTrooper) && !targetTroopers.contains(spottedTrooper))
						targetTroopers.add(spottedTrooper);

			}

		}

		public void setAction() {

			trooper.setPCStats();
			CA = trooper.combatActions;
		}

	}

	public void aim(BulkTrooper bulkTrooper, int aimTime, Trooper targetTrooper) {
		// System.out.println("Target: "+targetTrooper.name);
		Trooper trooper = bulkTrooper.trooper;
		int maxAim = new Weapons().findWeapon(trooper.wep).aimTime.size();
		// System.out.println("Trooper Stored Aim Size:
		// "+bulkTrooper.trooper.storedAimTime.size());
		// Get stored aim time
		Hashtable<Trooper, Integer> storedAim;

		// If set to auto, uses maximum amount of remaining aim
		if (aimTime <= 0) {

			if (trooper.storedAimTime.containsKey(targetTrooper)) {
				// System.out.println("Pass 1");
				int additionalAim = bulkTrooper.CA - bulkTrooper.spentCA;
				int currentAim = trooper.storedAimTime.get(targetTrooper);
				int newAim;

				if (currentAim + additionalAim > maxAim - 1) {
					// System.out.println("Pass 1-1");
					newAim = maxAim;
					bulkTrooper.spentCA += maxAim - currentAim;
				} else {
					// System.out.println("Pass 1-2");
					newAim = currentAim += additionalAim;
					bulkTrooper.spentCA += additionalAim;
				}

				trooper.storedAimTime.put(targetTrooper, newAim);
			} else {
				// System.out.println("Pass 2");
				trooper.storedAimTime.clear();
				int newAim = bulkTrooper.CA - bulkTrooper.spentCA;
				trooper.storedAimTime.put(targetTrooper, newAim);
				bulkTrooper.spentCA += newAim;
			}

		}
		// Otherwise, goes to specified aim
		else {
			// System.out.println("Pass 3");
			trooper.storedAimTime.clear();
			trooper.storedAimTime.put(targetTrooper, aimTime - 1);
			bulkTrooper.spentCA += aimTime - 1;
		}

	}

	public void setValidTarget(BulkTrooper bulkTrooper) throws Exception {
		Trooper targetTrooper;

		targetTrooper = getTargetTrooper(bulkTrooper);

		if (validTarget(targetTrooper)) {
			// PCShots(bulkTrooper, targetTrooper);
			bulkTrooper.shoot = ShootUtility.setTarget(bulkTrooper.trooper.returnTrooperUnit(GameWindow.gameWindow), targetTrooper.returnTrooperUnit(gameWindow),
					bulkTrooper.shoot, bulkTrooper.trooper, targetTrooper, bulkTrooper.trooper.wep, -1);
			if(bulkTrooper.shootReset) {
				bulkTrooper.shoot.spentCombatActions = 0; 
				bulkTrooper.shoot.previouslySpentCa = 0;
			}
		} else {
			// SC: # displayed in list could be spotted troopers 
			// Multithreading could be leading to errors where ui doesn't get set or lists don't get updated / cleared 
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " no valid target");
		}

	}

	public void bulkTrooperShoot(BulkTrooper bulkTrooper) throws Exception {

		Trooper targetTrooper;

		if (bulkTrooper.targetedFire != null) {
			targetTrooper = bulkTrooper.targetedFire.targetTrooper;
		} else if (bulkTrooper.tempTF != null) {
			targetTrooper = bulkTrooper.tempTF.targetTrooper;
		} else {
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " trooper shot no valid target exception.");
		}

		if (validTarget(targetTrooper))
			PCFire(bulkTrooper, targetTrooper);
		else {
			bulkTrooper.targetedFire = null;
			bulkTrooper.tempTF = null;
			GameWindow.gameWindow.conflictLog.addNewLineToQueue("No valid target. Ending string of fire.");
			return;
		}

		if (bulkTrooper.targetedFire == null)
			return;
		else
			bulkTrooper.targetedFire.EAL += (int) spinnerConsecutiveEALBonus.getValue();

		if (bulkTrooper.targetedFire.TN < 0 || !validTarget(targetTrooper)) {

			// bulkTrooper.targetTroopers.remove(targetTrooper);
			GameWindow.gameWindow.conflictLog
					.addNewLineToQueue("TN less than 1, target may be dead. Ending string of fire.");
			bulkTrooper.targetTroopers.clear();
			bulkTrooper.setTargets();
			bulkTrooper.targetedFire = null;
			bulkTrooper.bestTargetTrooper = null;
			bulkTrooper.tempTF = null;

			for (BulkTrooper t : bulkTroopers) {
				t.targetTroopers.clear();
				t.setTargets();
			}

			bulkTrooper.trooper.storedAimTime.clear();
			if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
				bulkTrooper.trooper.storedAimTime.clear();
				actionSpent(bulkTrooper.trooper);

			}
			return;
		} else {
			// PCShots(bulkTrooper, targetTrooper);
		}

		if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
			bulkTrooper.trooper.storedAimTime.clear();
			actionSpent(bulkTrooper.trooper);

		}
	}

	// Loops through units in initiaitive order
	// Looks for unit containing indvididual
	// Returns unit
	public Unit findTrooperUnit(Trooper trooper) {
		ArrayList<Unit> units = gameWindow.initiativeOrder;

		for (Unit unit : units) {

			for (Trooper trooper1 : unit.getTroopers()) {

				if (trooper1.compareTo(trooper)) {
					// System.out.println("Found Unit: "+unit.callsign);
					return unit;
				}

			}

		}

		return null;

	}

	public boolean validTarget(Trooper target) {

		if (target == null || !target.alive || !target.conscious || target.HD) {
			return false;
		}

		return true;
	}

	public Trooper getTargetTrooper(BulkTrooper bulkTrooper) throws Exception {
		if(bulkTrooper.trooper.storedAimTime.size() > 0) {
			
			for(Trooper target : bulkTrooper.targetTroopers) {
				if(bulkTrooper.trooper.storedAimTime.containsKey(target)) {
					return target;
				}
			}
			
		}
		
		if (bulkTrooper.bestTargetTrooper != null && validTarget(bulkTrooper.bestTargetTrooper))
			return bulkTrooper.bestTargetTrooper;
		else
			bulkTrooper.bestTargetTrooper = null;

		/**/
		// Sets random target trooper
		// System.out.println("Target Troopers size:
		// "+bulkTrooper.targetTroopers.size());
		// shuffleList(bulkTrooper.targetTroopers);

		Trooper targetTrooper = null;

		Unit targetUnit = null;

		Unit trooperUnit = GameWindow.gameWindow.findTrooperUnit(bulkTrooper.trooper);

		for (Unit unit : GameWindow.gameWindow.initiativeOrder) {
			if (unit.side.equals(trooperUnit.side) || unit.individuals.size() < 1)
				continue;

			boolean validTargets = false;

			for (Trooper trooper : unit.individuals) {
				if (validTarget(trooper) && bulkTrooper.targetTroopers.contains(trooper)) {
					// System.out.println("Valid Targets");
					validTargets = true;
					break;
				}
			}

			if (!validTargets)
				continue;

			if (targetUnit == null) {
				targetUnit = unit;
			} else if (GameWindow.hexDif(targetUnit, trooperUnit) > GameWindow.hexDif(unit, trooperUnit)) {
				targetUnit = unit;
			}

		}

		if (targetedFireFocus.getSelectedIndex() > 0 && getValidTargetUnits().size() > 0) {
			targetUnit = getValidTargetUnits().get(targetedFireFocus.getSelectedIndex() - 1);
			System.out.println("Focus Target Unit: " + targetUnit.callsign);
		}

		if (targetUnit == null)
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " getTargetTrooper Target Unit is Null");

		ArrayList<Trooper> targetTrooperArray = new ArrayList<Trooper>();
		for (Trooper trooper : targetUnit.individuals) {
			if (bulkTrooper.targetTroopers.contains(trooper)) {
				targetTrooperArray.add(trooper);
			}
		}

		if (targetTrooperArray.size() == 0) {
			throw new Exception(
					bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " targetTrooperArray is empty.");
		}

		targetTrooper = targetTrooperArray.get(DiceRoller.randInt(0, targetTrooperArray.size() - 1));

		for (Trooper trooper : targetUnit.individuals) {
			if (!targetTrooper.inCover)
				break;

			if (!bulkTrooper.targetTroopers.contains(trooper))
				continue;

			targetTrooper = trooper;
		}

		bulkTrooper.bestTargetTrooper = targetTrooper;
		return targetTrooper;

	}

	public void PCFireGuiUpdates() {
		if (getSelectedBulkTroopers().size() < 1)
			return;

		int meanTN = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				meanTN += bulkTrooper.targetedFire.TN;
			else if (bulkTrooper.tempTF != null)
				meanTN += bulkTrooper.tempTF.TN;

		}
		meanTN /= getSelectedBulkTroopers().size();
		lblTn.setText("Mean TN: " + meanTN);

		int aimTime = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				aimTime += bulkTrooper.targetedFire.spentAimTime;
			else if (bulkTrooper.tempTF != null)
				aimTime += bulkTrooper.tempTF.spentAimTime;

		}
		aimTime /= getSelectedBulkTroopers().size();
		lblAimTime.setText("Mean Aim Time: " + aimTime);

		int possibleShots = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.targetedFire.possibleShots - bulkTrooper.targetedFire.shotsTaken;

			} else if (bulkTrooper.tempTF != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.tempTF.possibleShots - bulkTrooper.tempTF.shotsTaken;

			}

		}
		possibleShots /= getSelectedBulkTroopers().size();
		lblPossibleShots.setText("Mean Possible Shots: " + possibleShots);

		// lblAmmo.setText("Ammo: "+bulkTrooper.trooper.ammo);
		// lblCombatActions.setText("TF CA: "+bulkTrooper.CA);
		gameWindow.conflictLog.addQueuedText();
		gameWindow.refreshInitiativeOrder();
		// refreshTargets();

	}

	public void PCFire(BulkTrooper bulkTrooper, Trooper targetTrooper) {
		// TargetedFire tempTF = bulkTrooper.tempTF;

		Trooper trooper = bulkTrooper.trooper;

		boolean shots;

		if (chckbxFullAuto.isSelected()) {
			shots = trooper.inventory.fireShots(new Weapons().findWeapon(trooper.wep).fullAutoROF,
					new Weapons().findWeapon(trooper.wep));
		} else {
			int roll = new Random().nextInt(3) + 1;
			shots = trooper.inventory.fireShots(roll, new Weapons().findWeapon(trooper.wep));
		}

		// Checks for out of ammo
		if (!shots) {
			// textPaneTargetedFire.setText("OUT OF AMMO");
			gameWindow.conflictLog
					.addNewLineToQueue("Trooper: " + trooper.number + ": " + trooper.name + " is out of ammo");
			return;
		}

		if (new Weapons().findWeapon(trooper.wep).fullAutoROF == 0 && chckbxFullAuto.isSelected()) {
			gameWindow.conflictLog.addNewLineToQueue(
					"Trooper: " + trooper.number + ": " + trooper.name + "'s weapon is not full auto capable.");
		}

		Trooper shooterTrooper = trooper;

		Unit targetUnit = findTrooperUnit(targetTrooper);
		Unit shooterUnit = findTrooperUnit(shooterTrooper);

		for (Trooper t : bulkTrooper.targetTroopers) {
			if (shooterTrooper.storedAimTime.containsKey(t)) {
				targetTrooper = t;
				break;
			}
		}

		int maxAim = comboBoxAimTime.getSelectedIndex() - 1;

		TargetedFire tf = new TargetedFire(shooterTrooper, targetTrooper, shooterUnit, targetUnit, gameWindow, maxAim,
				bulkTrooper.CA - bulkTrooper.spentCA,
				(int) spinnerEALBonus.getValue() + (int) spinnerConsecutiveEALBonus.getValue(),
				(int) spinnerPercentBonus.getValue(), 0, shooterTrooper.wep);

		tf.spentCA = bulkTrooper.spentCA;

		if (bulkTrooper.targetedFire == null) {
			bulkTrooper.targetedFire = tf;
			// reaction = null;
			bulkTrooper.possibleShots = true;
		} else if (!tf.targetTrooper.compareTo(bulkTrooper.targetedFire.targetTrooper)) {
			bulkTrooper.targetedFire = tf;
		}

		bulkTrooper.targetedFire.PCHits = 0;

		if (bulkTrooper.possibleShots) {

			if (chckbxFullAuto.isSelected()) {
				bulkTrooper.targetedFire.fullAutoBurst(true);
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				} else if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 2;
				}
			} else {
				bulkTrooper.targetedFire.shot(comboBoxTargetZone.getSelectedIndex());
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				}
			}

			// System.out.println("TARGETED FIRE: ");
			// System.out.println("targetedFire.shotsTaken:
			// "+bulkTrooper.targetedFire.shotsTaken);
			// System.out.println("targetedFire.timeToReaction:
			// "+bulkTrooper.targetedFire.timeToReaction);
			/*
			 * if(targetedFire.shotsTaken >= targetedFire.timeToReaction &&
			 * targetedFire.shotsTaken != 0 && this.reaction == null && targetTrooper.alive
			 * && targetTrooper.conscious && targetTrooper.canAct(gameWindow.game)) { //
			 * React System.out.println("REACTION"); //ReactionToFireWindow reaction = new
			 * ReactionToFireWindow(shooterTrooper, targetTrooper, windowOpenTrooper,
			 * gameWindow); //this.reaction = reaction;
			 * 
			 * }
			 */
		}

		if (bulkTrooper.targetedFire.PCHits > 0) {
			ResolveHits resolveHits = new ResolveHits(targetTrooper, bulkTrooper.targetedFire.PCHits,
					new Weapons().findWeapon(shooterTrooper.wep), gameWindow.conflictLog,
					targetTrooper.returnTrooperUnit(gameWindow), shooterUnit, gameWindow);

			if (bulkTrooper.targetedFire.calledShot) {
				resolveHits.calledShot = true;
				resolveHits.calledShotBounds = bulkTrooper.targetedFire.calledShotBounds;

			}

			if (targetTrooper.returnTrooperUnit(gameWindow).suppression + bulkTrooper.targetedFire.PCHits < 100) {
				targetTrooper.returnTrooperUnit(gameWindow).suppression += bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).suppression = 100;
			}
			if (targetTrooper.returnTrooperUnit(gameWindow).organization - bulkTrooper.targetedFire.PCHits > 0) {
				targetTrooper.returnTrooperUnit(gameWindow).organization -= bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).organization = 0;
			}

			resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
			InjuryLog.InjuryLog.addTrooper(targetTrooper);
		}

		if (bulkTrooper.targetedFire.possibleShots <= bulkTrooper.targetedFire.shotsTaken) {
			// Shot ends
			/*
			 * lblPossibleShots.setText("Possible Shots: None");
			 * lblAimTime.setText("Aim Time: N/A"); lblTN.setText("Target Number: N/A");
			 */
			// reaction = null;
			bulkTrooper.possibleShots = false;
			// bulkTrooper.targetedFire = null;
			// PCShots(bulkTrooper);
		}

		if (chckbxFullAuto.isSelected()) {

			bulkTrooper.spentCA += 2;
		} else {

			bulkTrooper.spentCA++;
		}

		/*
		 * if(!targetTrooper.alive) {
		 * 
		 * if(chckbxMultipleTargets.isSelected()) {
		 * 
		 * targetedFire = null; possibleShots = true; reaction = null; PCShots(); } else
		 * { // Performed after swing worker is done actionSpent(openUnit, index);
		 * openUnit.openNext(true); f.dispose(); }
		 * 
		 * 
		 * }
		 */

		// setDetails(openTrooper);

	}

	// Gets weapon
	public Weapons getWeapon(Trooper trooper) {

		return new Weapons().findWeapon(trooper.wep);
	}

	public Unit findUnit(String callsign) {

		for (Unit unit : gameWindow.initiativeOrder)
			if (unit.callsign.equals(callsign))
				return unit;

		return null;
	}

	// Spot test
	public void spotTest(String targetCallsign, Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		// Find target unit
		Unit targetUnit = findUnit(targetCallsign);

		Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
				comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
				gameWindow);

		// Print results
		spotAction.displayResultsQueue(gameWindow, spotAction);

		// Set results in trooper
		trooper.spotted.add(spotAction);
		// Refresh trooper
		// refreshTrooper(trooper);
		// window.openUnit.troopers.set(index, trooper);

	}

	// Spot test
	public void spotTestAll(Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		for (Unit targetUnit : unit.lineOfSight) {

			Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
					comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
					gameWindow);

			spotAction.displayResultsQueue(gameWindow, spotAction);

			// Set results in trooper
			trooper.spotted.add(spotAction);
		}

	}

	public boolean hasTargets(BulkTrooper bulkTrooper) {

		return true;

	}

	public boolean freeAction() {
		return chckbxFreeAction.isSelected();
	}

	public void volley() {

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {

				InjuryLog.InjuryLog.addAlreadyInjured();
				ArrayList<BulkTrooper> troops = selectedBulkTroopers;

				ExecutorService es = Executors.newFixedThreadPool(16);

				for (BulkTrooper bulkTrooper : troops) {

					Shoot shoot = bulkTrooper.shoot;

					if (shoot == null)
						continue;

					es.submit(() -> {
						System.out.println("Submit");
						try {

							
							int shots = 1; 
							while (shoot.spentCombatActions < shoot.shooter.combatActions && 
									(validTarget(shoot.target) || comboBoxTargetUnits.getSelectedIndex() > 0)
									&& !shoot.outOfAmmo) {

								System.out.println("volley shot: "+shots);
								
								if (comboBoxTargetUnits.getSelectedIndex() > 0)
									shoot.suppressiveFire(shoot.wep.suppressiveROF);
								else if (chckbxFullAuto.isSelected())
									shoot.burst();
								else
									shoot.shot(chckbxGuided.isSelected());

								GameWindow.gameWindow.conflictLog.addNewLineToQueue("Results: " + shoot.shotResults);

								valleyValidTargetCheck(shoot, bulkTrooper);
								shots++;
								System.out.println("Volley CA test: "+(shoot.spentCombatActions < shoot.shooter.combatActions));
								System.out.println("Volley Valid Target Test: "+validTarget(shoot.target));
								System.out.println("Volley Valid Supp Target Test: "+(comboBoxTargetUnits.getSelectedIndex() > 0));
								System.out.println("Volley Out of Ammo Test: "+(!shoot.outOfAmmo));
							}
							
							
							
						} catch (Exception e) {
							e.printStackTrace();
						}
					});
					
					try {
						TimeUnit.MILLISECONDS.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				try {
					TimeUnit.MILLISECONDS.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				es.shutdown();

				return null;
			}

			@Override
			protected void done() {

				try {
					TimeUnit.MILLISECONDS.sleep(250);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
					if(!chckbxFreeAction.isSelected()) {
						System.out.println("volley action spent");
						actionSpent(bulkTrooper.trooper);
					}
				}
				
				System.out.println("volley gui updates");
				guiUpdates();
				refreshIndividualList();
				InjuryLog.InjuryLog.printResultsToLog();
				gameWindow.conflictLog.addQueuedText();
				// individualsList.setSelectedIndex(-1);

			}

		};

		worker.execute();

	}

	public void valleyValidTargetCheck(Shoot shoot, BulkTrooper bulkTrooper) throws Exception {
		if (!validTarget(shoot.target)) {
			bulkTrooper.setTargets();

			if (bulkTrooper.targetTroopers.size() > 0) {
				setValidTarget(bulkTrooper);

				if (comboBoxAimTime.getSelectedIndex() == 0)
					bulkTrooper.shoot.autoAim();

				if (comboBoxTargetZone.getSelectedIndex() > 0) {
					setCalledShotBounds(bulkTrooper.shoot);
				}
			}

		}
	}

	public void ordnanceComboboxes() {
		/*
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None"); Hex hex
		 * = GameWindow.gameWindow.findHex(trooperUnit.X, trooperUnit.Y); if
		 * (trooperBuilding == null && hex != null) { for (Building building :
		 * hex.buildings) {
		 * 
		 * comboBoxBuilding.addItem(building.name);
		 * 
		 * } comboBoxBuilding.setSelectedIndex(0); } else if (hex != null) {
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None");
		 * comboBoxBuilding.addItem("ALREADY INSIDE");
		 * comboBoxBuilding.setSelectedIndex(1); }
		 */
	}

	public void guiUpdates() {

		ArrayList<Shoot> shots = new ArrayList<>();

		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2");
				continue;
			}
			shots.add(bulkTrooper.shoot);
		}

		ShootUtility.shootGuiUpdate(lblPossibleShots, lblAimTime, lblTn, null, null, null, chckbxFullAuto, shots);
	}

	public void setCalledShotBounds(Shoot shoot) {
		if (shoot == null) {
			System.out.println("shoot is null set called shot bounds");
			return;
		}

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {
					int index = comboBoxTargetZone.getSelectedIndex();
					System.out.println("Size ALM Pre: " + shoot.sizeALM);
					if (index == 0) {
						System.out.println("Clear called shot");
						shoot.calledShotBounds.clear();
						shoot.calledShotLocation = "";
					} else {
						System.out.println("set called shot");
						shoot.setCalledShotBounds(comboBoxTargetZone.getSelectedIndex());
					}
					System.out.println("Size ALM POST: " + shoot.sizeALM);
					shoot.setALM();
					shoot.setEAL();
					shoot.setSingleTn();
					shoot.setFullAutoTn();
					shoot.setSuppressiveTn();
				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {

				guiUpdates();

			}

		};

		worker.execute();
	}

	public void bonuses() {

		for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2 bonuses");
				continue;
			}
			bulkTrooper.shoot.setBonuses((int) spinnerPercentBonus.getValue(), (int) spinnerEALBonus.getValue(),
					(int) spinnerConsecutiveEALBonus.getValue());
		}

		guiUpdates();

	}

	public void selected() {
		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {

					ExecutorService es = Executors.newFixedThreadPool(16);

					ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
					ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

					for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
						if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
							removeTrooper.add(bulkTrooper);
						}
					}

					for (BulkTrooper bulkTrooper : removeTrooper) {
						selectedBulkTroopers.remove(bulkTrooper);
					}

					for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
						if (selectedBulkTroopers.contains(bulkTrooper))
							continue;

						if (bulkTrooper.targetTroopers.size() > 0) {
							es.submit(() -> {
								System.out.println("Submit");
								try {
									
									if(comboBoxTargetUnits.getSelectedIndex() > 0)
										bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
												bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
									else 
										setValidTarget(bulkTrooper);

									if (comboBoxAimTime.getSelectedIndex() == 0)
										bulkTrooper.shoot.autoAim();

									if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
										setCalledShotBounds(bulkTrooper.shoot);
									}

								} catch (Exception e) {
									e.printStackTrace();
								}
							});
						}
						
						if(!selectedBulkTroopers.contains(bulkTrooper))
							selectedBulkTroopers.add(bulkTrooper);
					}

					/*
					 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					 * if(bulkTrooper.targetTroopers.size() < 1) { continue; }
					 * 
					 * 
					 * es.submit(() -> { System.out.println("Submit"); try {
					 * setValidTarget(bulkTrooper); } catch (Exception e) { e.printStackTrace(); }
					 * }); }
					 */

					es.shutdown();

					System.out.println("Finished Threads");

				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {
				/*
				 * targetedFireFocus.removeAllItems();
				 * targetedFireFocus.addItem("Targeted Fire Focus"); targetUnits.clear();
				 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
				 * 
				 * for(Trooper targetTrooper : bulkTrooper.targetTroopers) { Unit targetUnit =
				 * findTrooperUnit(targetTrooper);
				 * 
				 * if(targetUnits.contains(targetUnit)) continue;
				 * 
				 * targetUnits.add(targetUnit);
				 * targetedFireFocus.addItem(findTrooperUnit(targetTrooper).callsign);
				 * 
				 * }
				 * 
				 * }
				 */

				// System.out.println("Done");
				
				
				selectedGuiUpdates();
			}

		};

		worker.execute();
	}
	
	public void selectedGuiUpdates() {
		try {
			TimeUnit.MILLISECONDS.sleep(250);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		setTargetFocus();
		gameWindow.conflictLog.addQueuedText();
		// PCFireGuiUpdates();
		guiUpdates();
		System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor238.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-03-11 15:16:10.177
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor238.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-03-11 15:16:10.177
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor238.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-03-11 15:16:10.213
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Conflict;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.SwingWorker;

import Trooper.Trooper;
import Trooper.generateSquad;
import Unit.Unit;
import UtilityClasses.DiceRoller;
import UtilityClasses.ShootUtility;

import javax.swing.JButton;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;

import javax.swing.JSpinner;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.JList;
import javax.swing.JCheckBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionListener;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.util.SystemOutLogger;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import Actions.ReactionToFireWindow;
import Actions.Spot;
import Actions.TargetedFire;
import Company.Formation.LeaderType;
import Hexes.Building;
import Hexes.Hex;
import Injuries.Injuries;
import Injuries.ResolveHits;
import Items.Weapons;
import Shoot.Shoot;

import javax.swing.event.ListSelectionEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class BulkWindow {

	private String path = System.getProperty("user.dir") + "\\";
	// My vars

	public boolean targetFocusLock = false;
	public boolean individualListLock = false;
	public GameWindow gameWindow;
	public Game game;
	public ArrayList<BulkTrooper> bulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<BulkTrooper> selectedBulkTroopers = new ArrayList<BulkTrooper>();
	public ArrayList<Unit> targetUnits = new ArrayList<Unit>();
	public Unit unit;
	public ArrayList<String> callsigns = new ArrayList<String>();
	public OpenUnit openUnit;

	// Jframe gui vars
	private JFrame frame;
	private JTextField textFieldDC;
	private JList individualsList;
	private JComboBox comboBoxTargetUnits;
	private JCheckBox chckbxFreeAction;
	private JSpinner caBonusSpinner;
	private JSpinner spinnerEALBonus;
	private JSpinner spinnerPercentBonus;
	private JComboBox comboBoxAimTime;
	private JCheckBox chckbxFullAuto;
	private JLabel lblAimTime;
	private JLabel lblTn;
	private JLabel lblPossibleShots;
	private JCheckBox chckbxLaser;
	private JCheckBox chckbxIrLaser;
	private JCheckBox chckbxThermals;
	private JCheckBox chckbxWeaponLights;
	private JCheckBox chckbxManualStance;
	private JComboBox comboBoxStance;
	private JSpinner spinnerNVGGen;
	private JTextField textFieldPen;
	private JComboBox comboBoxOF;
	private JComboBox comboBoxSpottingUnits;
	private JComboBox comboBoxScanArea;
	private JComboBox comboBoxAddUnit;
	private JList listSpottedUnitsArray;
	private JComboBox targetedFireFocus;
	private JCheckBox chckbxUnspottable;
	private JSpinner spinnerSpottingDifficulty;
	private JSpinner spinnerConsecutiveEALBonus;
	private JComboBox comboBoxWeapon;
	private JTextField textFieldCallsign;
	private JComboBox comboBoxTargetZone;
	private JComboBox comboBoxBuilding;
	private JComboBox comboBoxGrenadeTargets;
	private JComboBox comboBoxGrenade;
	private JSpinner spinnerGrenadeX;
	private JSpinner spinnerGrenadeY;
	private JSpinner spinnerTargetRoom;
	private JSpinner spinnerTargetFloor;
	private JSpinner spinnerThrowBonus;
	private JSpinner spinnerThrowEALBonus;
	private JSpinner spinnerLauncherBonus;
	private JSpinner spinnerLauncherX;
	private JSpinner spinnerLauncherY;
	private JCheckBox chckbxGuided;

	/**
	 * Create the application.
	 * 
	 * @wbp.parser.constructor
	 */
	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;

		initializeWindow();
		setIndividuals();
		refreshIndividualList();
		setComboBoxes();
	}

	public BulkWindow(ArrayList<Unit> units) {

		this.unit = units.get(0);
		this.gameWindow = GameWindow.gameWindow;
		this.game = GameWindow.gameWindow.game;
		this.openUnit = null;

		ArrayList<String> sides = new ArrayList<>();
		
		ArrayList<Trooper> troopers = new ArrayList<>();

		for (Unit unit : units) {
			if(!sides.contains(unit.side)) {
				sides.add(unit.side);
			}
			
			
			for (Trooper trooper : unit.individuals) {
				troopers.add(trooper);
			}
		}
		
		if(sides.size() > 1) {
			System.out.println("Sort troopers");
			for(Trooper trooper : troopers) {
				trooper.kills = DiceRoller.randInt(0, 9);
			}
			Collections.sort(troopers, new Comparator<Trooper>() {
				   public int compare(Trooper b1, Trooper b2) {
					   
					   System.out.println("b1 CA: "+((b1.combatActions+ b1.sl) - b1.kills)+", b2 CA: "+((b2.combatActions + b2.sl) - b2.kills));
					   if((b1.combatActions+ b1.sl) - b1.kills < (b2.combatActions + b2.sl) - b2.kills)
						   return 1;
					   else if((b1.combatActions+ b1.sl) - b1.kills > (b2.combatActions + b2.sl) - b2.kills)
						   return -1;
					   else 
						   return 0;
				   }
			});
		}
		

		initializeWindow();
		setIndividuals(troopers);
		refreshIndividualList();
		setComboBoxes();
	}
	
	

	public BulkWindow(Unit unit, GameWindow gameWindow, OpenUnit openUnit, ArrayList<Trooper> cqbt) {
		this.unit = unit;
		this.gameWindow = gameWindow;
		this.game = gameWindow.game;
		this.openUnit = openUnit;
		initializeWindow();
		setIndividuals(cqbt);
		refreshIndividualList();
		setComboBoxes();
	}

	private void initializeWindow() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1113, 712);
		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		frame.setVisible(true);

		// Get the screen size
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Dimension screenSize = toolkit.getScreenSize();
		// Calculate the frame location
		int x = (screenSize.width - frame.getWidth()) / 2;
		int y = (screenSize.height - frame.getHeight()) / 2;

		// Set the new frame location
		frame.setLocation(x, y);

		JButton btnClearSpotted = new JButton("Remove All Spotted");
		btnClearSpotted.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnClearSpotted.setBounds(784, 211, 249, 23);
		btnClearSpotted.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						// System.out.println("Clear Spot1");

						for (Trooper trooper : unit.individuals) {

							trooper.spotted.clear();

						}

						// System.out.println("Clear Spot2");
						return null;
					}

				};

				worker.execute();

			}
		});

		JComboBox comboBox = new JComboBox();
		comboBox.setBounds(784, 149, 143, 20);
		comboBox.setForeground(Color.BLACK);
		// comboBox.setSelectedIndex(0);

		JLabel label = new JLabel("Remove Spotted");
		label.setBounds(782, 123, 226, 31);
		label.setForeground(Color.BLACK);
		label.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton button = new JButton("Remove");
		button.setBounds(944, 148, 89, 23);
		button.setForeground(Color.BLACK);

		JButton button_1 = new JButton("Spot Hex");
		button_1.setBounds(944, 104, 89, 23);
		button_1.setForeground(Color.BLACK);

		JComboBox comboBox_1 = new JComboBox();
		comboBox_1.setBounds(944, 74, 89, 20);
		comboBox_1.setForeground(Color.BLACK);
		// comboBox_1.setSelectedIndex(0);

		JSpinner spinner = new JSpinner();
		spinner.setBounds(882, 105, 40, 20);
		spinner.setForeground(Color.BLACK);

		JSpinner spinner_1 = new JSpinner();
		spinner_1.setBounds(808, 105, 40, 20);
		spinner_1.setForeground(Color.BLACK);

		JLabel label_1 = new JLabel("Y: ");
		label_1.setBounds(858, 100, 30, 31);
		label_1.setForeground(Color.BLACK);
		label_1.setFont(new Font("Calibri", Font.PLAIN, 12));

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 84, 445, 389);
		frame.getContentPane().add(scrollPane);
		individualsList = new JList();
		individualsList.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseMoved(MouseEvent e) {

				JList theList = (JList) e.getSource();
				int index = theList.locationToIndex(e.getPoint());
				if (index > -1) {
					theList.setToolTipText(null);
					String text = "<html>";
					// System.out.println("Target Paint");
					for (Trooper trooper : bulkTroopers.get(index).targetTroopers) {
						text += trooper.findTargetUnit(gameWindow) + ":: " + trooper.number + ":: " + trooper.name;
						// System.out.println("Loop");
						if (!trooper.compareTo(bulkTroopers.get(index).targetTroopers
								.get(bulkTroopers.get(index).targetTroopers.size() - 1)))
							text += "<br>";

					}

					if (text.equals("<html>"))
						theList.setToolTipText(null);
					else
						theList.setToolTipText(text + "</html>");
				}

			}
		});
		individualsList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0) {

				if (arg0.getValueIsAdjusting() || individualsList.getSelectedIndices().length < 1 || individualListLock)
					return;

				selected();

				// System.out.println("Entry Count:
				// "+individualsList.getSelectedValuesList().size());
			}
		});
		
		
		
		individualsList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		scrollPane.setViewportView(individualsList);
		
		
		comboBoxAddUnit = new JComboBox();
		comboBoxAddUnit.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxAddUnit.setSelectedIndex(0);
		comboBoxAddUnit.setBounds(784, 74, 143, 20);
		comboBoxAddUnit.setForeground(Color.BLACK);
		// comboBox_2.setSelectedIndex(0);

		JLabel label_2 = new JLabel("X: ");
		label_2.setBounds(784, 100, 30, 31);
		label_2.setForeground(Color.BLACK);
		label_2.setFont(new Font("Calibri", Font.PLAIN, 12));

		JButton btnAddSpotted = new JButton("Add Individual");
		btnAddSpotted.setBounds(784, 180, 115, 23);
		btnAddSpotted.setForeground(Color.BLACK);

		JButton button_3 = new JButton("Add Whole Unit");
		button_3.setBounds(909, 180, 124, 23);
		button_3.setForeground(Color.BLACK);

		JLabel label_3 = new JLabel("Individual");
		label_3.setBounds(944, 43, 143, 31);
		label_3.setForeground(Color.BLACK);
		label_3.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_4 = new JLabel("Unit");
		label_4.setBounds(784, 43, 143, 31);
		label_4.setForeground(Color.BLACK);
		label_4.setFont(new Font("Calibri", Font.PLAIN, 12));

		JLabel label_5 = new JLabel("Add Spotted");
		label_5.setBounds(784, 11, 162, 31);
		label_5.setForeground(Color.BLACK);
		label_5.setFont(new Font("Calibri", Font.PLAIN, 14));
		frame.getContentPane().setLayout(null);
		frame.getContentPane().add(btnClearSpotted);
		frame.getContentPane().add(label_5);
		frame.getContentPane().add(label_4);
		frame.getContentPane().add(comboBoxAddUnit);
		frame.getContentPane().add(label_3);
		frame.getContentPane().add(comboBox_1);
		frame.getContentPane().add(btnAddSpotted);
		frame.getContentPane().add(button_3);
		frame.getContentPane().add(spinner_1);
		frame.getContentPane().add(label_2);
		frame.getContentPane().add(label_1);
		frame.getContentPane().add(spinner);
		frame.getContentPane().add(button_1);
		frame.getContentPane().add(comboBox);
		frame.getContentPane().add(label);
		frame.getContentPane().add(button);

		JLabel label_6 = new JLabel("PEN");
		label_6.setForeground(Color.BLACK);
		label_6.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_6.setDoubleBuffered(true);
		label_6.setBounds(784, 311, 30, 31);
		frame.getContentPane().add(label_6);

		textFieldPen = new JTextField();
		textFieldPen.setForeground(Color.BLACK);
		textFieldPen.setColumns(10);
		textFieldPen.setBounds(814, 316, 34, 20);
		frame.getContentPane().add(textFieldPen);

		JLabel label_7 = new JLabel("DC");
		label_7.setForeground(Color.BLACK);
		label_7.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_7.setDoubleBuffered(true);
		label_7.setBounds(858, 311, 30, 31);
		frame.getContentPane().add(label_7);

		textFieldDC = new JTextField();
		textFieldDC.setForeground(Color.BLACK);
		textFieldDC.setColumns(10);
		textFieldDC.setBounds(882, 316, 40, 20);
		frame.getContentPane().add(textFieldDC);

		comboBoxOF = new JComboBox();
		comboBoxOF.setModel(new DefaultComboBoxModel(new String[] { "Open", "Fire" }));
		comboBoxOF.setSelectedIndex(0);
		comboBoxOF.setForeground(Color.BLACK);
		// comboBox_3.setSelectedIndex(0);
		comboBoxOF.setBounds(967, 316, 62, 20);
		frame.getContentPane().add(comboBoxOF);

		JLabel label_8 = new JLabel("O/F");
		label_8.setForeground(Color.BLACK);
		label_8.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_8.setDoubleBuffered(true);
		label_8.setBounds(932, 311, 30, 31);
		frame.getContentPane().add(label_8);

		JButton button_4 = new JButton("Add Injury");
		button_4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					ResolveHits resolveHits = new ResolveHits(trooper);

					Injuries newInjury = resolveHits.getPCHitsManual(Integer.parseInt(textFieldPen.getText()),
							Integer.parseInt(textFieldDC.getText()), comboBoxOF.getSelectedIndex());

					if (newInjury == null) {
						gameWindow.conflictLog.addNewLine("EPEN < 0.5");
					}

				}

			}
		});
		button_4.setForeground(Color.BLACK);
		button_4.setBounds(882, 347, 147, 23);
		frame.getContentPane().add(button_4);

		JComboBox comboBox_4 = new JComboBox();
		comboBox_4.setModel(new DefaultComboBoxModel(new String[] { "Random Loc." }));
		comboBox_4.setSelectedIndex(0);
		comboBox_4.setForeground(Color.BLACK);
		// comboBox_4.setSelectedIndex(0);
		comboBox_4.setBounds(784, 348, 92, 20);
		frame.getContentPane().add(comboBox_4);

		JLabel lblAddInjuries = new JLabel("Add Injuries");
		lblAddInjuries.setForeground(Color.BLACK);
		lblAddInjuries.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblAddInjuries.setBounds(784, 293, 162, 23);
		frame.getContentPane().add(lblAddInjuries);

		listSpottedUnitsArray = new JList();
		listSpottedUnitsArray.setForeground(Color.BLACK);
		listSpottedUnitsArray.setBackground(Color.WHITE);
		listSpottedUnitsArray.setBounds(625, 43, 143, 160);
		frame.getContentPane().add(listSpottedUnitsArray);

		JLabel label_9 = new JLabel("Spotting Units");
		label_9.setForeground(Color.BLACK);
		label_9.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_9.setBounds(625, 11, 369, 31);
		frame.getContentPane().add(label_9);

		spinnerNVGGen = new JSpinner();
		spinnerNVGGen.setForeground(Color.BLACK);
		spinnerNVGGen.setBounds(625, 320, 34, 20);
		frame.getContentPane().add(spinnerNVGGen);

		JLabel label_10 = new JLabel("Gen:");
		label_10.setForeground(Color.BLACK);
		label_10.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10.setBounds(596, 317, 40, 28);
		frame.getContentPane().add(label_10);

		JButton button_2 = new JButton("Add Thermals");
		button_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					trooper.thermalVision = true;

				}

			}
		});
		button_2.setForeground(Color.BLACK);
		button_2.setBounds(669, 319, 97, 23);
		frame.getContentPane().add(button_2);

		JButton button_5 = new JButton("Add NVGs");
		button_5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if ((int) spinnerNVGGen.getValue() < 1 || (int) spinnerNVGGen.getValue() > 5) {
						gameWindow.conflictLog.addNewLine("NVG Gen not a value from 1 to 5.");
						return;
					}

					trooper.nightVision = true;
					trooper.nightVisionEffectiveness = (int) spinnerNVGGen.getValue();

				}

			}
		});
		button_5.setForeground(Color.BLACK);
		button_5.setBounds(479, 322, 114, 23);
		frame.getContentPane().add(button_5);

		JCheckBox checkBox = new JCheckBox("NVGs");
		checkBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!trooper.nightVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have night vision.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.nightVisionInUse = true;
					else
						trooper.nightVisionInUse = false;

				}

			}
		});
		checkBox.setForeground(Color.BLACK);
		checkBox.setFont(new Font("Calibri", Font.BOLD, 12));
		checkBox.setBackground(Color.WHITE);
		checkBox.setBounds(625, 293, 143, 23);
		frame.getContentPane().add(checkBox);

		JButton button_6 = new JButton("Clear");
		button_6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				listSpottedUnitsArray.removeAll();
				callsigns.clear();

				DefaultListModel listSpottedUnits = new DefaultListModel();

				for (int i = 0; i < callsigns.size(); i++) {
					listSpottedUnits.addElement(callsigns.get(i));

				}

				listSpottedUnitsArray.setModel(listSpottedUnits);

			}
		});
		button_6.setForeground(Color.BLACK);
		button_6.setBounds(479, 126, 136, 25);
		frame.getContentPane().add(button_6);

		JButton button_7 = new JButton("Spot All");
		button_7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						ExecutorService es = Executors.newFixedThreadPool(16);
						
						try {
							
							
							
							for (Trooper trooper : getSelectedTroopers()) {

								
								es.submit(() -> {
									// System.out.println("Spot Test All 1");
									spotTestAll(trooper, unit);
									// System.out.println("Spot Test All 2");

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

							}

							es.shutdown();
							
							// refreshTargets();
						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						
						GameWindow.gameWindow.conflictLog.addQueuedText();

					}

				};

				worker.execute();

			}
		});
		button_7.setForeground(Color.BLACK);
		button_7.setBounds(479, 154, 136, 25);
		frame.getContentPane().add(button_7);

		chckbxFreeAction = new JCheckBox("Free Action");
		chckbxFreeAction.setForeground(Color.BLACK);
		chckbxFreeAction.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxFreeAction.setBackground(Color.WHITE);
		chckbxFreeAction.setBounds(84, 57, 97, 27);
		frame.getContentPane().add(chckbxFreeAction);

		comboBoxScanArea = new JComboBox();
		comboBoxScanArea
				.setModel(new DefaultComboBoxModel(new String[] { "60 Degrees", "180 Degrees", "20 Yard Hex" }));
		comboBoxScanArea.setSelectedIndex(0);
		// comboBox_5.setSelectedIndex(0);
		comboBoxScanArea.setForeground(Color.BLACK);
		comboBoxScanArea.setBounds(479, 183, 136, 20);
		frame.getContentPane().add(comboBoxScanArea);

		JButton button_8 = new JButton("Roll Spot");
		button_8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);
							
							for (Trooper trooper : getSelectedTroopers()) {

								es.submit(() -> {
									// Loops through all signs, performs spotting test
									for (int i = 0; i < callsigns.size(); i++) {
										// System.out.println("Spot Test 1");
										spotTest(callsigns.get(i), trooper, unit);
										// System.out.println("Spot Test 2");
									}

									// If not a free test
									if (!chckbxFreeAction.isSelected()) {
										actionSpent(trooper);
									}
								});
								
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
				

							}
							
							es.shutdown();
							
							

						} catch (Exception e2) {
							System.out.println("toString(): " + e2.toString());
							System.out.println("getMessage(): " + e2.getMessage());
							System.out.println("StackTrace: ");
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {

						// Clears list
						listSpottedUnitsArray.removeAll();
						callsigns.clear();

						DefaultListModel listSpottedUnits = new DefaultListModel();

						for (int i = 0; i < callsigns.size(); i++) {
							listSpottedUnits.addElement(callsigns.get(i));

						}

						listSpottedUnitsArray.setModel(listSpottedUnits);

						refreshIndividualList();
						// refreshTargets();
						GameWindow.gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		button_8.setForeground(Color.BLACK);
		button_8.setBounds(479, 99, 136, 25);
		frame.getContentPane().add(button_8);

		JButton button_9 = new JButton("Add Unit");
		button_9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (comboBoxSpottingUnits.getSelectedIndex() > 0) {

					String callsign = comboBoxSpottingUnits.getSelectedItem().toString();

					if (!callsigns.contains(callsign)) {
						callsigns.add(callsign);
					}

					listSpottedUnitsArray.removeAll();

					DefaultListModel listSpottedUnits = new DefaultListModel();

					for (int i = 0; i < callsigns.size(); i++) {
						listSpottedUnits.addElement(callsigns.get(i));

					}

					listSpottedUnitsArray.setModel(listSpottedUnits);

				}

			}
		});
		button_9.setForeground(Color.BLACK);
		button_9.setBounds(479, 71, 136, 25);
		frame.getContentPane().add(button_9);

		comboBoxSpottingUnits = new JComboBox();
		comboBoxSpottingUnits.setModel(new DefaultComboBoxModel(new String[] { "None" }));
		comboBoxSpottingUnits.setSelectedIndex(0);
		comboBoxSpottingUnits.setForeground(Color.BLACK);
		// comboBox_6.setSelectedIndex(0);
		comboBoxSpottingUnits.setBounds(479, 43, 136, 23);
		frame.getContentPane().add(comboBoxSpottingUnits);

		JLabel label_11 = new JLabel("Spot");
		label_11.setForeground(Color.BLACK);
		label_11.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_11.setBounds(479, 11, 53, 31);
		frame.getContentPane().add(label_11);

		comboBoxStance = new JComboBox();
		comboBoxStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (comboBoxStance.getSelectedItem().toString().equals(trooper.stance)) {
						return;
					}

					// System.out.println("Changing Stance, Trooper Stance: |"+trooper.stance+"| Box
					// Stance: |"+ comboBoxStance.getSelectedItem().toString()+"|");
					trooper.stance = comboBoxStance.getSelectedItem().toString();

					if (bulkTrooper.targetedFire != null) {
						bulkTrooper.targetedFire.spentCA++;
					} else {

						bulkTrooper.spentCA++;
					}

					try {
						// PCShots(bulkTrooper, getTargetTrooper(bulkTrooper));
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				}

				PCFireGuiUpdates();

			}
		});
		comboBoxStance.setModel(new DefaultComboBoxModel(new String[] { "Standing ", "Crouched", "Prone" }));
		comboBoxStance.setForeground(Color.BLACK);
		comboBoxStance.setBounds(479, 347, 147, 23);
		frame.getContentPane().add(comboBoxStance);

		JLabel label_12 = new JLabel("Misc.");
		label_12.setForeground(Color.BLACK);
		label_12.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_12.setBounds(479, 235, 146, 31);
		frame.getContentPane().add(label_12);

		chckbxManualStance = new JCheckBox("Manual Stance");
		chckbxManualStance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					Trooper trooper = bulkTrooper.trooper;

					if (chckbxManualStance.isSelected())
						trooper.manualStance = true;
					else
						trooper.manualStance = false;

				}

			}
		});
		chckbxManualStance.setForeground(Color.BLACK);
		chckbxManualStance.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxManualStance.setBackground(Color.WHITE);
		chckbxManualStance.setBounds(637, 348, 131, 23);
		frame.getContentPane().add(chckbxManualStance);

		chckbxLaser = new JCheckBox("Laser");
		chckbxLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).laser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a laser pointer.");
						return;
					}

					if (chckbxLaser.isSelected())
						bulkTrooper.trooper.weaponLaserOn = true;
					else
						bulkTrooper.trooper.weaponLaserOn = false;

				}

			}
		});
		chckbxLaser.setForeground(Color.BLACK);
		chckbxLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxLaser.setBackground(Color.WHITE);
		chckbxLaser.setBounds(479, 267, 74, 23);
		frame.getContentPane().add(chckbxLaser);

		chckbxIrLaser = new JCheckBox("IR Laser");
		chckbxIrLaser.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!getWeapon(bulkTrooper.trooper).irLaser) {
						gameWindow.conflictLog.addNewLine("This trooper does not have a IR laser pointer.");
						return;
					}

					if (chckbxIrLaser.isSelected())
						bulkTrooper.trooper.weaponIRLaserOn = true;
					else
						bulkTrooper.trooper.weaponIRLaserOn = false;

				}

			}
		});
		chckbxIrLaser.setForeground(Color.BLACK);
		chckbxIrLaser.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxIrLaser.setBackground(Color.WHITE);
		chckbxIrLaser.setBounds(559, 267, 74, 23);
		frame.getContentPane().add(chckbxIrLaser);

		chckbxWeaponLights = new JCheckBox("Weapon Lights");
		chckbxWeaponLights.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					Trooper trooper = bulkTrooper.trooper;

					if (!getWeapon(trooper).light) {
						gameWindow.conflictLog.addNewLine("This trooper does not have weapon lights.");
						return;
					}

					if (chckbxWeaponLights.isSelected())
						trooper.weaponLightOn = true;
					else
						trooper.weaponLightOn = false;

				}

			}
		});
		chckbxWeaponLights.setForeground(Color.BLACK);
		chckbxWeaponLights.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxWeaponLights.setBackground(Color.WHITE);
		chckbxWeaponLights.setBounds(479, 293, 142, 23);
		frame.getContentPane().add(chckbxWeaponLights);

		chckbxThermals = new JCheckBox("Thermals");
		chckbxThermals.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					if (!bulkTrooper.trooper.thermalVision) {
						gameWindow.conflictLog.addNewLine("This trooper does not have thermal vision.");
						return;
					}

					if (chckbxThermals.isSelected())
						bulkTrooper.trooper.thermalVisionInUse = true;
					else
						bulkTrooper.trooper.thermalVisionInUse = false;

				}

			}
		});
		chckbxThermals.setForeground(Color.BLACK);
		chckbxThermals.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxThermals.setBackground(Color.WHITE);
		chckbxThermals.setBounds(639, 267, 129, 23);
		frame.getContentPane().add(chckbxThermals);

		JLabel label_13 = new JLabel("CA Bonus:");
		label_13.setForeground(Color.BLACK);
		label_13.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_13.setBounds(479, 567, 74, 31);
		frame.getContentPane().add(label_13);

		caBonusSpinner = new JSpinner();
		caBonusSpinner.setBounds(550, 572, 34, 20);
		frame.getContentPane().add(caBonusSpinner);

		JButton btnApply = new JButton("Apply");
		btnApply.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.CA += (int) caBonusSpinner.getValue();

				}

			}
		});
		btnApply.setForeground(Color.BLACK);
		btnApply.setBounds(596, 570, 114, 23);
		frame.getContentPane().add(btnApply);

		JLabel label_16 = new JLabel("Starting Aim T:");
		label_16.setBackground(Color.WHITE);
		label_16.setForeground(Color.BLACK);
		label_16.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16.setBounds(480, 442, 114, 31);
		frame.getContentPane().add(label_16);

		comboBoxAimTime = new JComboBox();
		comboBoxAimTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1)
					return;

				for (BulkTrooper trooper : selectedBulkTroopers) {

					Shoot shoot = trooper.shoot;

					if (shoot == null)
						continue;

					SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

						@Override
						protected Void doInBackground() throws Exception {

							if (comboBoxAimTime.getSelectedIndex() == 0)
								shoot.autoAim();
							else
								shoot.setAimTime(comboBoxAimTime.getSelectedIndex() - 1);

							if (comboBoxTargetZone.getSelectedIndex() > 0) {
								setCalledShotBounds(shoot);
							}

							return null;
						}

						@Override
						protected void done() {
							try {
								TimeUnit.SECONDS.sleep(1);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							guiUpdates();

						}

					};

					worker.execute();
				}

			}
		});
		comboBoxAimTime.setModel(new DefaultComboBoxModel(new String[] { "Auto", "0", "1", "2", "3", "4", "5", "6", "7",
				"8", "9", "10", "11", "12", "13", "14", "15" }));

		comboBoxAimTime.setBackground(Color.WHITE);
		comboBoxAimTime.setForeground(Color.BLACK);
		// comboBox_10.setSelectedIndex(0);
		comboBoxAimTime.setBounds(479, 470, 87, 20);
		frame.getContentPane().add(comboBoxAimTime);

		comboBoxTargetZone = new JComboBox();
		comboBoxTargetZone.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper trooper : selectedBulkTroopers) {
					try {
						setCalledShotBounds(trooper.shoot);
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}

				guiUpdates();

			}
		});
		comboBoxTargetZone.setModel(new DefaultComboBoxModel(new String[] { "Auto", "Head", "Body", "Legs" }));
		comboBoxTargetZone.setSelectedIndex(0);
		comboBoxTargetZone.setBackground(Color.WHITE);
		comboBoxTargetZone.setForeground(Color.BLACK);
		// comboBox_11.setSelectedIndex(0);
		comboBoxTargetZone.setBounds(596, 470, 113, 20);
		frame.getContentPane().add(comboBoxTargetZone);

		JLabel label_17 = new JLabel("Target Zone:");
		label_17.setBackground(Color.WHITE);
		label_17.setForeground(Color.BLACK);
		label_17.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_17.setBounds(596, 442, 114, 31);
		frame.getContentPane().add(label_17);

		spinnerEALBonus = new JSpinner();
		spinnerEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerEALBonus.setBackground(Color.WHITE);
		spinnerEALBonus.setForeground(Color.BLACK);
		spinnerEALBonus.setBounds(479, 536, 74, 20);
		frame.getContentPane().add(spinnerEALBonus);

		JLabel label_18 = new JLabel("EAL Bonus:");
		label_18.setBackground(Color.WHITE);
		label_18.setForeground(Color.BLACK);
		label_18.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18.setBounds(479, 497, 87, 31);
		frame.getContentPane().add(label_18);

		spinnerPercentBonus = new JSpinner();
		spinnerPercentBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerPercentBonus.setBackground(Color.WHITE);
		spinnerPercentBonus.setForeground(Color.BLACK);
		spinnerPercentBonus.setBounds(563, 536, 74, 20);
		frame.getContentPane().add(spinnerPercentBonus);

		JLabel label_19 = new JLabel("% Bonus:");
		label_19.setBackground(Color.WHITE);
		label_19.setForeground(Color.BLACK);
		label_19.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_19.setBounds(563, 497, 74, 31);
		frame.getContentPane().add(label_19);

		JButton button_10 = new JButton("Aim");
		button_10.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						
						for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
							
							int newAim = bulkTrooper.shoot.aimTime + (bulkTrooper.trooper.combatActions - bulkTrooper.shoot.spentCombatActions);

							newAim = newAim >= bulkTrooper.shoot.wep.aimTime.size() ? bulkTrooper.shoot.wep.aimTime.size() - 1 : newAim;

							bulkTrooper.shoot.spentCombatActions += newAim - bulkTrooper.shoot.aimTime;

							bulkTrooper.shoot.setAimTime(newAim);
							
							if (!chckbxFreeAction.isSelected() && bulkTrooper.shoot.spentCombatActions >= bulkTrooper.trooper.combatActions) {
								actionSpent(bulkTrooper.trooper);
							}
							bulkTrooper.shootReset = false;

						}
						
						return null;
					}

					@Override
					protected void done() {

						guiUpdates();
						refreshIndividualList();
					}

				};

				worker.execute();

			}
		});
		button_10.setForeground(Color.BLACK);
		button_10.setBounds(648, 535, 87, 23);
		frame.getContentPane().add(button_10);

		lblAimTime = new JLabel("Mean Aim Time:");
		lblAimTime.setBackground(Color.WHITE);
		lblAimTime.setForeground(Color.BLACK);
		lblAimTime.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblAimTime.setBounds(647, 501, 136, 23);
		frame.getContentPane().add(lblAimTime);

		JButton btnSingle = new JButton("Single");
		btnSingle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {

						InjuryLog.InjuryLog.addAlreadyInjured();

						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								Shoot shoot = bulkTrooper.shoot;
								if (shoot == null)
									continue;

								es.submit(() -> {
									System.out.println("Single Fire");
									try {

										if (comboBoxTargetUnits.getSelectedIndex() > 0)
											shoot.suppressiveFire(shoot.wep.suppressiveROF);
										else if (chckbxFullAuto.isSelected())
											shoot.burst();
										else
											shoot.shot(chckbxGuided.isSelected());

										try {
											TimeUnit.MILLISECONDS.sleep(15);
										} catch (InterruptedException e) {
											e.printStackTrace();
										}
										
										valleyValidTargetCheck(shoot, bulkTrooper);
										
										GameWindow.gameWindow.conflictLog
												.addNewLineToQueue("Results: " + shoot.shotResults);
										//System.out.println("Supp results: "+shoot.shotResults);
										
										
									} catch (Exception e) {
										e.printStackTrace();
									}
								});

								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								
								bulkTrooper.shootReset = false;

							}

							try {
								TimeUnit.MILLISECONDS.sleep(250);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							
							es.shutdown();

						} catch (Exception e2) {
							e2.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(100);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						
						for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
							if (!freeAction() && ((bulkTrooper.shoot.spentCombatActions >= bulkTrooper.shoot.shooter.combatActions) 
									|| comboBoxTargetUnits.getSelectedIndex() > 0)) {
								System.out.println("Action spent suppress");
								actionSpent(bulkTrooper.trooper);
							}
						}
						
						guiUpdates();
						refreshIndividualList();
						InjuryLog.InjuryLog.printResultsToLog();
						gameWindow.conflictLog.addQueuedText();
					}

				};

				worker.execute();

			}
		});
		btnSingle.setForeground(Color.BLACK);
		btnSingle.setBounds(744, 535, 87, 23);
		frame.getContentPane().add(btnSingle);

		lblTn = new JLabel("Mean TN: 0");
		lblTn.setBackground(Color.WHITE);
		lblTn.setForeground(Color.BLACK);
		lblTn.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTn.setBounds(963, 501, 124, 23);
		frame.getContentPane().add(lblTn);

		chckbxFullAuto = new JCheckBox("Full Auto");
		chckbxFullAuto.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				guiUpdates();
				//refreshIndividualList();
			}
		});
		chckbxFullAuto.setForeground(Color.BLACK);
		chckbxFullAuto.setBackground(Color.WHITE);
		chckbxFullAuto.setBounds(715, 469, 74, 23);
		frame.getContentPane().add(chckbxFullAuto);

		comboBoxTargetUnits = new JComboBox();
		comboBoxTargetUnits.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								es.submit(() -> {
									System.out.println("Submit");
									try {
										if(comboBoxTargetUnits.getSelectedIndex() > 0) {
											bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
													bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
											
											if(bulkTrooper.shootReset) {
												bulkTrooper.shoot.spentCombatActions = 0; 
												bulkTrooper.shoot.previouslySpentCa = 0;
											}
											
											System.out.println("Create bulk suppressive shot: "+(bulkTrooper.shoot == null ? "is null" : "not null"));
										} else if(bulkTrooper.targetTroopers.size() > 0){
											setValidTarget(bulkTrooper);
										}

										if (comboBoxAimTime.getSelectedIndex() == 0 && bulkTrooper.shoot != null)
											bulkTrooper.shoot.autoAim();
										
										if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
											setCalledShotBounds(bulkTrooper.shoot);
										}

									} catch (Exception e) {
										e.printStackTrace();
									}
								});
								try {
									TimeUnit.MILLISECONDS.sleep(75);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}

								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							try {
								TimeUnit.MILLISECONDS.sleep(150);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}

							es.shutdown();

							System.out.println("Finished Threads");

						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.MILLISECONDS.sleep(250);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						gameWindow.conflictLog.addQueuedText();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Suppression Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();
				
			}
		});
		comboBoxTargetUnits.setForeground(Color.BLACK);
		// comboBox_12.setSelectedIndex(0);
		comboBoxTargetUnits.setBounds(479, 643, 178, 21);
		frame.getContentPane().add(comboBoxTargetUnits);

		JLabel label_23 = new JLabel("Taget Unit: ");
		label_23.setForeground(Color.BLACK);
		label_23.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_23.setBounds(479, 614, 125, 31);
		frame.getContentPane().add(label_23);

		JLabel label_27 = new JLabel("Suppressive Fire");
		label_27.setForeground(Color.BLACK);
		label_27.setFont(new Font("Calibri", Font.PLAIN, 18));
		label_27.setBounds(479, 596, 221, 23);
		frame.getContentPane().add(label_27);

		JLabel lblTargetedFire = new JLabel("Targeted Fire");
		lblTargetedFire.setForeground(Color.BLACK);
		lblTargetedFire.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblTargetedFire.setBounds(479, 422, 221, 23);
		frame.getContentPane().add(lblTargetedFire);

		JLabel lblBulkOperations = new JLabel("Bulk Operations");
		lblBulkOperations.setForeground(Color.BLACK);
		lblBulkOperations.setFont(new Font("Calibri", Font.PLAIN, 18));
		lblBulkOperations.setBounds(10, 10, 221, 20);
		frame.getContentPane().add(lblBulkOperations);

		JLabel lblIndividuals = new JLabel("Individuals");
		lblIndividuals.setForeground(Color.BLACK);
		lblIndividuals.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblIndividuals.setBackground(Color.WHITE);
		lblIndividuals.setBounds(10, 59, 87, 23);
		frame.getContentPane().add(lblIndividuals);

		

		lblPossibleShots = new JLabel("Mean Possible Shots:");
		lblPossibleShots.setForeground(Color.BLACK);
		lblPossibleShots.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblPossibleShots.setBackground(Color.WHITE);
		lblPossibleShots.setBounds(784, 501, 178, 23);
		frame.getContentPane().add(lblPossibleShots);

		JButton btnVolley = new JButton("Volley");
		btnVolley.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				try {
					volley();
				} catch (Exception ecx) {
					ecx.printStackTrace();
				}

			}
		});
		btnVolley.setForeground(Color.BLACK);
		btnVolley.setBounds(841, 535, 87, 23);
		frame.getContentPane().add(btnVolley);

		JButton button_7_1 = new JButton("HD");
		button_7_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					if (!bulkTrooper.trooper.inCover) {
						gameWindow.conflictLog.addNewLine(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
								+ " is not in cover and can't hunker down.");
						continue;
					}

					if (bulkTrooper.trooper.HD)
						bulkTrooper.trooper.HD = false;
					else
						bulkTrooper.trooper.HD = true;

					if (!chckbxFreeAction.isSelected())
						actionSpent(bulkTrooper.trooper);

				}

				refreshIndividualList();

			}
		});
		button_7_1.setForeground(Color.BLACK);
		button_7_1.setBounds(479, 212, 136, 25);
		frame.getContentPane().add(button_7_1);

		targetedFireFocus = new JComboBox();
		targetedFireFocus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if (individualsList.getSelectedIndices().length < 1 || targetFocusLock)
					return;

				SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

					@Override
					protected Void doInBackground() throws Exception {
						try {

							ExecutorService es = Executors.newFixedThreadPool(16);

							ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
							ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

							for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
								if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
									removeTrooper.add(bulkTrooper);
								}
							}

							for (BulkTrooper bulkTrooper : removeTrooper) {
								selectedBulkTroopers.remove(bulkTrooper);
							}

							for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
								
								if (bulkTrooper.targetTroopers.size() > 0) {
									es.submit(() -> {
										System.out.println("Submit");
										try {
											setValidTarget(bulkTrooper);

											if (comboBoxAimTime.getSelectedIndex() == 0)
												bulkTrooper.shoot.autoAim();

											if (comboBoxTargetZone.getSelectedIndex() > 0) {
												setCalledShotBounds(bulkTrooper.shoot);
											}

										} catch (Exception e) {
											e.printStackTrace();
										}
									});
								}
								
								if(!selectedBulkTroopers.contains(bulkTrooper))
									selectedBulkTroopers.add(bulkTrooper);
							}

							es.shutdown();

							System.out.println("Finished Threads");

							
						} catch (Exception e) {
							e.printStackTrace();
						}

						return null;
					}

					@Override
					protected void done() {
						try {
							TimeUnit.SECONDS.sleep(1);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						// System.out.println("Done");
						gameWindow.conflictLog.addQueuedText();
						// PCFireGuiUpdates();
						guiUpdates();
						System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
					}

				};

				worker.execute();

			}
		});
		targetedFireFocus.setModel(new DefaultComboBoxModel(new String[] { "No Target Unit Focus" }));
		targetedFireFocus.setForeground(Color.BLACK);
		targetedFireFocus.setBackground(Color.WHITE);
		targetedFireFocus.setBounds(944, 535, 143, 20);
		frame.getContentPane().add(targetedFireFocus);

		JButton button_5_1 = new JButton("Select Fresh");
		button_5_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// System.out.println("Phase: "+game.getPhase()+", Action:
				// "+game.getCurrentAction());

				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
				// System.out.println("Set Indexes: "+indices.length);
			}
		});
		button_5_1.setForeground(Color.BLACK);
		button_5_1.setBounds(325, 57, 130, 23);
		frame.getContentPane().add(button_5_1);

		chckbxUnspottable = new JCheckBox("Unspottable");
		chckbxUnspottable.setForeground(Color.BLACK);
		chckbxUnspottable.setFont(new Font("Calibri", Font.BOLD, 12));
		chckbxUnspottable.setBackground(Color.WHITE);
		chckbxUnspottable.setBounds(864, 261, 92, 20);
		frame.getContentPane().add(chckbxUnspottable);

		JLabel label_18_1 = new JLabel("Spotting Difficulty:");
		label_18_1.setForeground(Color.BLACK);
		label_18_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_1.setBackground(Color.WHITE);
		label_18_1.setBounds(784, 244, 143, 20);
		frame.getContentPane().add(label_18_1);

		spinnerSpottingDifficulty = new JSpinner();
		spinnerSpottingDifficulty.setForeground(Color.BLACK);
		spinnerSpottingDifficulty.setBackground(Color.WHITE);
		spinnerSpottingDifficulty.setBounds(784, 260, 74, 20);
		frame.getContentPane().add(spinnerSpottingDifficulty);

		JButton btnSet = new JButton("Set");
		btnSet.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

					bulkTrooper.trooper.spottingDifficulty = (int) spinnerSpottingDifficulty.getValue();
					bulkTrooper.trooper.unspottable = chckbxUnspottable.isSelected();

					if (bulkTrooper.trooper.unspottable) {

						for (Unit unit : gameWindow.initiativeOrder) {

							for (Trooper trooper : unit.individuals) {

								if (trooper == bulkTrooper.trooper)
									continue;

								for (Spot spot : trooper.spotted) {

									if (spot.spottedIndividuals.contains(bulkTrooper.trooper)) {
										spot.spottedIndividuals.remove(bulkTrooper.trooper);
									}

								}

							}

						}

					}

				}

			}
		});
		btnSet.setForeground(Color.BLACK);
		btnSet.setBounds(967, 259, 66, 23);
		frame.getContentPane().add(btnSet);

		JLabel label_18_2 = new JLabel("Consecutive EAL Bonus:");
		label_18_2.setForeground(Color.BLACK);
		label_18_2.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_18_2.setBackground(Color.WHITE);
		label_18_2.setBounds(720, 567, 162, 31);
		frame.getContentPane().add(label_18_2);

		spinnerConsecutiveEALBonus = new JSpinner();
		spinnerConsecutiveEALBonus.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				bonuses();
			}
		});
		spinnerConsecutiveEALBonus.setForeground(Color.BLACK);
		spinnerConsecutiveEALBonus.setBackground(Color.WHITE);
		spinnerConsecutiveEALBonus.setBounds(872, 571, 74, 20);
		frame.getContentPane().add(spinnerConsecutiveEALBonus);

		JLabel lblSetWeapons = new JLabel("Set Weapons");
		lblSetWeapons.setForeground(Color.BLACK);
		lblSetWeapons.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblSetWeapons.setBounds(479, 375, 162, 20);
		frame.getContentPane().add(lblSetWeapons);

		comboBoxWeapon = new JComboBox();
		comboBoxWeapon.setModel(new DefaultComboBoxModel(new String[] { "None", "DC15A", "DC15A-ion", "DC15LE", "DC15X",
				"DC15S", "DC17m", "DC17 Sniper", "Z6", "Westar M5", "E5", "E5S", "E5C", "MA37", "M392 DMR", "M739 SAW",
				"Type-51 Carbine", "Type-52 Rifle", "Type-52 Pistol" }));
		comboBoxWeapon.setForeground(Color.BLACK);
		comboBoxWeapon.setBounds(479, 395, 147, 23);
		frame.getContentPane().add(comboBoxWeapon);

		JButton btnSet_1 = new JButton("Set");
		btnSet_1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {

				if (comboBoxWeapon.getSelectedIndex() < 0) {
					return;
				}

				for (BulkTrooper trooper : selectedBulkTroopers) {

					trooper.trooper.wep = comboBoxWeapon.getSelectedItem().toString();
					
					if(trooper.shoot != null) {
						trooper.shoot.updateWeapon(trooper.trooper.wep);
					}

				}

				gameWindow.conflictLog.addNewLine("Weapons set");
				
				refreshIndividualList();
				
				if (openUnit != null)
					openUnit.refreshIndividuals();

			}
		});
		btnSet_1.setForeground(Color.BLACK);
		btnSet_1.setBounds(637, 395, 97, 23);
		frame.getContentPane().add(btnSet_1);

		textFieldCallsign = new JTextField();
		textFieldCallsign.setBounds(744, 396, 155, 20);
		frame.getContentPane().add(textFieldCallsign);
		textFieldCallsign.setColumns(10);

		JLabel lblJoinUnit = new JLabel("Transfer to Unit");
		lblJoinUnit.setForeground(Color.BLACK);
		lblJoinUnit.setFont(new Font("Calibri", Font.PLAIN, 14));
		lblJoinUnit.setBounds(744, 375, 162, 20);
		frame.getContentPane().add(lblJoinUnit);

		JButton btnTransfer = new JButton("Transfer");
		btnTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnTransfer.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnTransfer.setForeground(Color.BLACK);
		btnTransfer.setBounds(954, 421, 97, 23);
		frame.getContentPane().add(btnTransfer);

		JButton btnClose = new JButton("Close");
		btnClose.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				if (gameWindow.cqbWindowOpen) {
					gameWindow.cqbWindowOpen = false;
				}

				for(BulkTrooper bulkTrooper : bulkTroopers) {
					
					if(GameWindow.gameWindow.game.getPhase() == 1) {
						if(bulkTrooper.trooper.spentPhase1 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					} else {
						if(bulkTrooper.trooper.spentPhase2 < GameWindow.gameWindow.game.getCurrentAction() && bulkTrooper.shoot != null) {
							
							bulkTrooper.shoot.aimTime = bulkTrooper.shoot.startingAimTime;
							if(bulkTrooper.shoot.target != null) {
								bulkTrooper.trooper.storedAimTime.put(bulkTrooper.shoot.target, bulkTrooper.shoot.aimTime);
							}
							
						}
					}
					
				}
				
				frame.dispose();

			}
		});
		btnClose.setBounds(998, 642, 89, 23);
		frame.getContentPane().add(btnClose);

		JButton btnClear = new JButton("Clear Aim");
		btnClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.storedAimTime.clear();
					bulkTrooper.targetTroopers.clear();
					bulkTrooper.setTargets();
				}
			}
		});
		btnClear.setForeground(Color.BLACK);
		btnClear.setBounds(954, 570, 97, 23);
		frame.getContentPane().add(btnClear);

		JButton btnResetFp = new JButton("Reset FP");
		btnResetFp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					bulkTrooper.trooper.fatigueSystem.fatiguePoints.set(0.0);
				}

				GameWindow.gameWindow.conflictLog.addNewLine("Reset FP for selected troopers.");

			}
		});
		btnResetFp.setForeground(Color.BLACK);
		btnResetFp.setBounds(883, 642, 111, 23);
		frame.getContentPane().add(btnResetFp);

		JButton btnPass = new JButton("Pass");
		btnPass.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					actionSpent(bulkTrooper.trooper);
				}
				refreshIndividualList();
			}
		});
		btnPass.setForeground(Color.BLACK);
		btnPass.setBounds(10, 30, 115, 23);
		frame.getContentPane().add(btnPass);

		JButton button_5_1_1 = new JButton("Select Shooters");
		button_5_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.targetTroopers.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();
				
				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1.setForeground(Color.BLACK);
		button_5_1_1.setBounds(187, 57, 136, 23);
		frame.getContentPane().add(button_5_1_1);

		JButton button_5_1_1_1 = new JButton("Select Aiming");
		button_5_1_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				individualsList.clearSelection();
				ArrayList<Integer> indexes = new ArrayList<Integer>();

				for (BulkTrooper bulkTrooper : bulkTroopers) {

					if (game.getPhase() == 1) {
						// System.out.println("Spent Phsae 1: "+bulkTrooper.trooper.spentPhase1);
						if (bulkTrooper.trooper.spentPhase1 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase1 < bulkTrooper.trooper.P1
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}

					} else {
						// System.out.println("Spent Phsae 2: "+bulkTrooper.trooper.spentPhase2);
						if (bulkTrooper.trooper.spentPhase2 < game.getCurrentAction()
								&& bulkTrooper.trooper.spentPhase2 < bulkTrooper.trooper.P2
								&& bulkTrooper.trooper.storedAimTime.size() > 0) {
							indexes.add(bulkTroopers.indexOf(bulkTrooper));
						}
					}

				}

				int[] indices = indexes.stream().mapToInt(i -> i).toArray();

				individualListLock = true; 
				individualsList.setSelectedIndices(indices);
				individualListLock = false; 
				selected();
			}
		});
		button_5_1_1_1.setForeground(Color.BLACK);
		button_5_1_1_1.setBounds(187, 30, 136, 23);
		frame.getContentPane().add(button_5_1_1_1);

		JLabel lblLauncher = new JLabel("Launcher");
		lblLauncher.setForeground(Color.BLACK);
		lblLauncher.setFont(new Font("Calibri", Font.PLAIN, 16));
		lblLauncher.setBounds(10, 596, 136, 20);
		frame.getContentPane().add(lblLauncher);

		JLabel lblGrenade = new JLabel("Grenade: ");
		lblGrenade.setForeground(Color.BLACK);
		lblGrenade.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblGrenade.setBounds(10, 484, 136, 31);
		frame.getContentPane().add(lblGrenade);

		comboBoxGrenade = new JComboBox();
		comboBoxGrenade.setBounds(10, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenade);

		comboBoxGrenadeTargets = new JComboBox();
		comboBoxGrenadeTargets.setBounds(157, 514, 136, 20);
		frame.getContentPane().add(comboBoxGrenadeTargets);

		JLabel label_16_1 = new JLabel("Taget Individual: ");
		label_16_1.setForeground(Color.BLACK);
		label_16_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_16_1.setBounds(157, 484, 121, 31);
		frame.getContentPane().add(label_16_1);

		JLabel lblOr = new JLabel("OR");
		lblOr.setForeground(Color.BLACK);
		lblOr.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblOr.setBounds(20, 533, 16, 31);
		frame.getContentPane().add(lblOr);

		JLabel lblX = new JLabel("X:");
		lblX.setForeground(Color.BLACK);
		lblX.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblX.setBounds(71, 536, 16, 31);
		frame.getContentPane().add(lblX);

		spinnerGrenadeX = new JSpinner();
		spinnerGrenadeX.setBounds(86, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeX);

		JLabel lblY = new JLabel("Y:");
		lblY.setForeground(Color.BLACK);
		lblY.setFont(new Font("Calibri", Font.PLAIN, 12));
		lblY.setBounds(135, 536, 16, 31);
		frame.getContentPane().add(lblY);

		spinnerGrenadeY = new JSpinner();
		spinnerGrenadeY.setBounds(150, 540, 40, 20);
		frame.getContentPane().add(spinnerGrenadeY);

		JLabel lblHex = new JLabel("Hex:");
		lblHex.setForeground(Color.BLACK);
		lblHex.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblHex.setBounds(38, 533, 40, 31);
		frame.getContentPane().add(lblHex);

		JLabel label_10_1 = new JLabel("OR");
		label_10_1.setForeground(Color.BLACK);
		label_10_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_10_1.setBounds(200, 533, 16, 31);
		frame.getContentPane().add(label_10_1);

		comboBoxBuilding = new JComboBox();
		comboBoxBuilding.setSelectedIndex(-1);
		comboBoxBuilding.setBounds(298, 538, 136, 20);
		frame.getContentPane().add(comboBoxBuilding);

		JLabel lblBuilding_1 = new JLabel("Building:");
		lblBuilding_1.setForeground(Color.BLACK);
		lblBuilding_1.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblBuilding_1.setBounds(226, 533, 62, 31);
		frame.getContentPane().add(lblBuilding_1);

		spinnerTargetRoom = new JSpinner();
		spinnerTargetRoom.setBounds(71, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetRoom);

		JLabel lblTargetRoom = new JLabel("Room:");
		lblTargetRoom.setForeground(Color.BLACK);
		lblTargetRoom.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblTargetRoom.setBounds(10, 567, 53, 31);
		frame.getContentPane().add(lblTargetRoom);

		spinnerTargetFloor = new JSpinner();
		spinnerTargetFloor.setBounds(170, 570, 40, 20);
		frame.getContentPane().add(spinnerTargetFloor);

		JLabel lblFloor = new JLabel("Floor:");
		lblFloor.setForeground(Color.BLACK);
		lblFloor.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblFloor.setBounds(123, 569, 53, 31);
		frame.getContentPane().add(lblFloor);

		JButton btnThrow = new JButton("Throw");
		btnThrow.setBounds(303, 505, 125, 23);
		frame.getContentPane().add(btnThrow);

		spinnerThrowBonus = new JSpinner();
		spinnerThrowBonus.setBounds(308, 570, 40, 20);
		frame.getContentPane().add(spinnerThrowBonus);

		spinnerThrowEALBonus = new JSpinner();
		spinnerThrowEALBonus.setBounds(430, 570, 39, 20);
		frame.getContentPane().add(spinnerThrowEALBonus);

		JLabel label_15 = new JLabel("Other Bonus:");
		label_15.setForeground(Color.BLACK);
		label_15.setFont(new Font("Calibri", Font.PLAIN, 15));
		label_15.setBounds(226, 567, 87, 31);
		frame.getContentPane().add(label_15);

		JLabel lblEalBonus = new JLabel("EAL Bonus:");
		lblEalBonus.setForeground(Color.BLACK);
		lblEalBonus.setFont(new Font("Calibri", Font.PLAIN, 15));
		lblEalBonus.setBounds(354, 567, 80, 31);
		frame.getContentPane().add(lblEalBonus);

		JComboBox comboBoxLauncher = new JComboBox();
		comboBoxLauncher.setBounds(10, 617, 136, 20);
		frame.getContentPane().add(comboBoxLauncher);

		spinnerLauncherBonus = new JSpinner();
		spinnerLauncherBonus.setBounds(157, 617, 74, 20);
		frame.getContentPane().add(spinnerLauncherBonus);

		JLabel label_20 = new JLabel("X:");
		label_20.setForeground(Color.BLACK);
		label_20.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_20.setBounds(236, 614, 16, 31);
		frame.getContentPane().add(label_20);

		spinnerLauncherX = new JSpinner();
		spinnerLauncherX.setBounds(251, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherX);

		JLabel label_21 = new JLabel("Y:");
		label_21.setForeground(Color.BLACK);
		label_21.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_21.setBounds(300, 614, 16, 31);
		frame.getContentPane().add(label_21);

		spinnerLauncherY = new JSpinner();
		spinnerLauncherY.setBounds(315, 618, 40, 20);
		frame.getContentPane().add(spinnerLauncherY);

		JLabel label_22 = new JLabel("Target Hex:");
		label_22.setForeground(Color.BLACK);
		label_22.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_22.setBounds(261, 597, 87, 23);
		frame.getContentPane().add(label_22);

		JLabel label_19_1 = new JLabel("Other Bonus:");
		label_19_1.setForeground(Color.BLACK);
		label_19_1.setFont(new Font("Calibri", Font.PLAIN, 12));
		label_19_1.setBounds(154, 593, 87, 23);
		frame.getContentPane().add(label_19_1);

		JButton btnShootHex = new JButton("Shoot Hex");
		btnShootHex.setBounds(364, 616, 89, 23);
		frame.getContentPane().add(btnShootHex);

		JComboBox comboBoxAmmoTypeLauncher = new JComboBox();
		comboBoxAmmoTypeLauncher.setSelectedIndex(-1);
		comboBoxAmmoTypeLauncher.setBounds(10, 644, 136, 20);
		frame.getContentPane().add(comboBoxAmmoTypeLauncher);

		JComboBox comboBoxLauncherConcealment = new JComboBox();
		comboBoxLauncherConcealment.setBounds(152, 644, 136, 20);
		frame.getContentPane().add(comboBoxLauncherConcealment);

		chckbxGuided = new JCheckBox("Guided");
		chckbxGuided.setForeground(Color.WHITE);
		chckbxGuided.setBackground(Color.DARK_GRAY);
		chckbxGuided.setBounds(796, 469, 80, 23);
		frame.getContentPane().add(chckbxGuided);
		
		JButton btnCreateTransfer = new JButton("Create & Transfer");
		btnCreateTransfer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Adds new unit 
				// Splits unit 
				ArrayList<Trooper> individuals = new ArrayList<Trooper>();
				generateSquad squad = new generateSquad("Clone Trooper Phase 1", "Empty");
				individuals = squad.getSquad();
				Unit newUnit = new Unit(textFieldCallsign.getText(), 0, 0, individuals, 100, 0, 100, 0, 0, 20, 0, unit.behavior);
				
				//Unit newUnit = unit.copyUnit(unit); 
				newUnit.side = unit.side;
				newUnit.initiative = unit.initiative;
				newUnit.organization = unit.organization;
				unit.organization = unit.organization; 
				
				newUnit.concealment = unit.concealment;
				newUnit.suppression = unit.suppression;
				newUnit.moral = unit.moral;
				newUnit.cohesion = unit.cohesion;
				newUnit.company = unit.company;
				newUnit.X = unit.X;
				newUnit.Y = unit.Y;
				newUnit.behavior = unit.behavior;
				newUnit.lineOfSight = new ArrayList<Unit>(unit.lineOfSight);
				//Collections.copy(newUnit.lineOfSight, unit.lineOfSight);
				//newUnit.lineOfSight = Collections.copy(unit.lineOfSight);
				gameWindow.initiativeOrder.add(newUnit);
				
				gameWindow.rollInitiativeOrder();
				gameWindow.refreshInitiativeOrder();
				
				// Loops through initiative order
				// Finds units that have LOS with this unit 
				// Adds new unit to the spotting units LOS
				
				for(Unit initUnit : gameWindow.initiativeOrder) {
					
					if(initUnit.lineOfSight.contains(unit)) {
						initUnit.lineOfSight.add(newUnit);
					}
					
				}
				
				
				// Finds newUnit's company 
				// Adds unit to company 
				for(int i = 0; i < gameWindow.companies.size(); i++) {
					
					if(gameWindow.companies.get(i).getName().equals(newUnit.company) && gameWindow.companies.get(i).getSide().equals(newUnit.side)) {
						gameWindow.companies.get(i).updateUnit(unit);
						gameWindow.companies.get(i).addUnit(newUnit);
						// Adds companies to setupWindow
						gameWindow.confirmCompany(gameWindow.companies.get(i), i);
						//f.dispose();
						
					}
					
				}
				
				
				boolean found = false;

				int targetUnitIndex = 0;

				// Checks for valid unit name
				if (textFieldCallsign.getText().equals("Enter Callsign")
						|| textFieldCallsign.getText().equals("Enter valid callsign...")) {
					textFieldCallsign.setText("Enter valid callsign...");

				}

				// Loops through initiative order
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {

					if (textFieldCallsign.getText().equals(gameWindow.initiativeOrder.get(i).callsign)) {
						found = true;
						targetUnitIndex = i;
						break;
					}

				}

				// Reports to user
				if (!found) {
					textFieldCallsign.setText("Enter valid callsign...");
				} else {

					for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

						Trooper trooper = bulkTrooper.trooper;

						// Adds trooper
						if(!gameWindow.initiativeOrder.get(targetUnitIndex).individuals.contains(trooper))
							gameWindow.initiativeOrder.get(targetUnitIndex).addToUnit(trooper);

						// Removes trooper from unit
						for (int i = 0; i < unit.getSize(); i++) {
							if (trooper.compareTo(unit.individuals.get(i))) {
								unit.individuals.remove(i);
								break;
							}
						}

						// Checks if individuals in initiative order that are spotting this trooper have
						// LOS to his new unit
						// If not, this trooper is removed from their LOS
						for (Unit initUnit : gameWindow.initiativeOrder) {

							// For unit that is not on the same side as this trooper
							if (!initUnit.side.equals(trooper.returnTrooperUnit(gameWindow))) {

								// If initUnit does not have LOS to this trooper's unit
								if (!initUnit.lineOfSight.contains(trooper.returnTrooperUnit(gameWindow))) {
									// Loops through individuals
									// Loops through spotted action
									// Finds this trooper
									// Removes this trooper
									for (Trooper spottingTrooper : initUnit.individuals) {

										for (Spot spotAction : spottingTrooper.spotted) {

											for (Trooper spottedTrooper : spotAction.spottedIndividuals) {

												if (spottedTrooper.compareTo(trooper))
													spotAction.spottedIndividuals.remove(spottedTrooper);

											}

										}

									}

								}

							}

						}
					}

					gameWindow.initiativeOrder.get(targetUnitIndex)
							.seekCover(gameWindow.findHex(gameWindow.initiativeOrder.get(targetUnitIndex).X,
									gameWindow.initiativeOrder.get(targetUnitIndex).Y), gameWindow);

					bulkTroopers.clear();

					if (!gameWindow.cqbWindowOpen)
						setIndividuals();

					refreshIndividualList();

					// Refreshes windows
					if (openUnit != null)
						openUnit.refreshIndividuals();
					// window.gameWindow.rollInitiativeOrder();
					gameWindow.refreshInitiativeOrder();
				}
			}
		});
		btnCreateTransfer.setForeground(Color.BLACK);
		btnCreateTransfer.setBounds(909, 395, 142, 23);
		frame.getContentPane().add(btnCreateTransfer);
		frame.setVisible(true);
	}

	public boolean trooperAlreadyAdded(Trooper trooper) {

		for (BulkTrooper bulkTrooper : bulkTroopers) {

			if (bulkTrooper.trooper.compareTo(trooper))
				return true;

		}

		return false;
	}

	// Creates bulk trooper classes and populates the arraylist
	public void setIndividuals() {

		for (Trooper trooper : unit.individuals) {
			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Sets bulk troopers for those in CQB
	public void setIndividuals(ArrayList<Trooper> cqbt) {

		for (Trooper trooper : cqbt) {

			// System.out.println("Trooper: "+trooper.name+", Code:
			// "+System.identityHashCode(trooper));
			// System.out.println("CQB Target: "+trooper.closeCombatTarget.name+", Code:
			// "+System.identityHashCode(trooper.closeCombatTarget));

			if (trooper.alive == false || !trooper.conscious || trooperAlreadyAdded(trooper))
				continue;

			for (Unit losUnit : trooper.returnTrooperUnit(GameWindow.gameWindow).lineOfSight) {
				if (!targetUnits.contains(losUnit))
					targetUnits.add(losUnit);
			}

			bulkTroopers.add(new BulkTrooper(trooper));
		}

		// refreshIndividualList();

	}

	// Updates all combo boxes
	public void setComboBoxes() {

		// Adds sup targets to dropdown menu
		setSuppressiveFireTargets();

		// Spotting Combo Boxes
		setSpottingUnits();

		// Set focus unit
		setTargetFocus();

	}

	public void setTargetFocus() {
		targetFocusLock = true; 

		targetedFireFocus.removeAllItems();
		targetedFireFocus.addItem("None");

		for (Unit unit : getValidTargetUnits()) {
			targetedFireFocus.addItem(unit.callsign);
		}

		targetedFireFocus.setSelectedIndex(0);
		
		targetFocusLock = false;
	}

	public ArrayList<Unit> getValidTargetUnits() {
		ArrayList<Unit> validTargetUnits = new ArrayList<>();

		for (Unit unit : targetUnits) {

			boolean validTarget = true;

			for (BulkTrooper trooper : getSelectedBulkTroopers()) {

				boolean hasValidTarget = false;

				for (Trooper targetTrooper : unit.individuals) {

					if (trooper.targetTroopers.contains(targetTrooper)) {
						hasValidTarget = true;
					}
				}

				if (!hasValidTarget) {
					validTarget = false;
				}

			}

			if (validTarget && !validTargetUnits.contains(unit)) {
				validTargetUnits.add(unit);
			}

		}

		return validTargetUnits;
	}

	// Sets spotting combo boxes
	public void setSpottingUnits() {

		for (Unit losUnit : targetUnits) {

			comboBoxSpottingUnits.addItem(losUnit.callsign);

		}

	}

	public void setSuppressiveFireTargets() {

		comboBoxTargetUnits.removeAllItems();
		comboBoxTargetUnits.addItem("None");
		if (unit.lineOfSight.size() < 1)
			return;

		for (Unit unit : targetUnits) {

			comboBoxTargetUnits.addItem(unit.callsign);
		}

		comboBoxTargetUnits.setSelectedIndex(0);

	}

	public int getRWSSuppressive(Trooper trooper) {
		// System.out.println("Get rws");
		int rws = 0;
		if (trooper == null) {
			// System.out.println("Trooper is null");
			return rws;
		}

		String weaponType = new Weapons().findWeapon(trooper.wep).type;

		if (weaponType.equals("Rifle")) {
			// System.out.println("Match: Trooper rifle rws: " + trooper.rifleRWS);
			rws = trooper.getSkill("Rifle");
		} else if (weaponType.equals("Heavy")) {
			// System.out.println("Match: Trooper Heavy rws: " + trooper.heavyRWS);
			rws = trooper.getSkill("Heavy");
		} else if (weaponType.equals("Subgun")) {
			rws = trooper.getSkill("Subgun");
		} else if (weaponType.equals("Launcher")) {
			rws = trooper.getSkill("Launcher");
		} else if (weaponType.equals("Pistol")) {
			rws = trooper.getSkill("Pistol");
		}

		// Apply GURPS missing arm penalty
		if (trooper.disabledArms > 0) {
			rws -= 20;
		}

		return rws;
	}

	// Suppressive fire action
	public void fireSuppressive(Trooper trooper) {
		// System.out.println("Line 750, suppression pass");
		Weapons weapon = new Weapons().findWeapon(trooper.wep);
		Unit targetUnit = unit.lineOfSight.get(comboBoxTargetUnits.getSelectedIndex());
		Random rand = new Random();

		int shots = weapon.suppressiveROF;
		boolean canShoot;
		canShoot = trooper.inventory.fireShots(shots, new Weapons().findWeapon(trooper.wep));

		// Checks for out of ammo
		if (!canShoot) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			// textPaneSuppressiveFire.setText("OUT OF AMMO");
			return;
		}

		int RWS = 0;
		RWS = getRWSSuppressive(trooper);

		if (RWS < 5) {
			RWS = 5;
		}

		int bonus = 0;

		// Subtracts ammo
		if (trooper.ammo < shots) {
			gameWindow.conflictLog.addNewLineToQueue("Out out ammo!");
			return;
		}

		if (shots == 0) {
			gameWindow.conflictLog.addNewLineToQueue("Select shots!");
			return;
		}

		Trooper target = null;
		// System.out.println("Line 783, suppression pass");

		// Gets target from selected unit
		if (targetUnit.getTroopers() == null || targetUnit.getSize() < 1 || allDead(targetUnit)) {
			gameWindow.conflictLog.addNewLineToQueue("No Targets in Unit");
			return;
		}

		boolean rolling = true;
		while (rolling) {
			// System.out.println("Line 794, rolling pass");
			int roll = rand.nextInt(targetUnit.getSize());
			target = targetUnit.getTroopers().get(roll);
			if (target.alive) {
				rolling = false;
			}
		}

		if (target != null) {

			// System.out.println("Line 808, suppression pass");
			// Sets target unit
			targetUnit = null;

			// Loops through intiiative order units and then individuals
			// Finds target's unit
			for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
				Unit tempUnit = gameWindow.initiativeOrder.get(i);
				ArrayList<Trooper> tempTroopers = tempUnit.getTroopers();
				for (int j = 0; j < tempUnit.getSize(); j++) {
					if (tempTroopers.get(j).compareTo(target)) {
						targetUnit = tempUnit;
					}
				}
			}

			if (targetUnit == null) {
				return;
			}

			if (weapon.tracers) {
				trooper.firedTracers = true;
			} else {
				trooper.firedTracers = false;
			}

			// System.out.println("Weapon: "+weapon);
			// System.out.println("RWS: "+RWS);
			TargetedFire targetedFire = new TargetedFire(RWS, bonus, weapon, shots, target, trooper, targetUnit, unit,
					true);

			// Get hits
			if (targetedFire != null) {

				int hits = targetedFire.getHits();
				int TN = targetedFire.getTN();

				// System.out.println("Line 849, suppression pass");

				gameWindow.conflictLog.addNewLineToQueue("SUPPRESSIVE FIRE: " + unit.side + "::  " + unit.callsign
						+ " to " + targetUnit.side + "::  " + targetUnit.callsign
						+ "\nSuppressive Fire Results:\nHITS: " + hits + "\n" + "TN: " + TN);
				// Subtracts suppression, moral and organization
				for (int i = 0; i < gameWindow.initiativeOrder.size(); i++) {
					if (gameWindow.initiativeOrder.get(i).compareTo(targetUnit)) {
						// System.out.println("Pass suppression");
						Unit tempUnit = gameWindow.initiativeOrder.get(i);

						int x = tempUnit.X;
						int y = tempUnit.Y;

						for (Unit potentialTarget : gameWindow.initiativeOrder) {

							if (potentialTarget.X == x && potentialTarget.Y == y) {
								if (potentialTarget.suppression + hits / 2 < 100) {
									potentialTarget.suppression += hits / 2;
								} else {
									potentialTarget.suppression = 100;
								}
								if (potentialTarget.organization - hits > 0) {
									potentialTarget.organization -= hits;
								} else {
									potentialTarget.organization = 0;
								}
							}

						}

						if (tempUnit.suppression + hits / 2 < 100) {
							tempUnit.suppression += hits / 2;
						} else {
							tempUnit.suppression = 100;
						}
						if (tempUnit.organization - hits > 0) {
							tempUnit.organization -= hits;
						} else {
							tempUnit.organization = 0;
						}
						/*
						 * if (tempUnit.moral - hits > 0) { tempUnit.moral -= hits; } else {
						 * tempUnit.moral = 0; }
						 */

						for (Unit collateralUnit : GameWindow.gameWindow.initiativeOrder) {

							if (collateralUnit.X != tempUnit.X || collateralUnit.Y != tempUnit.Y
									|| tempUnit.compareTo(collateralUnit)) {
								continue;
							}

							if (collateralUnit.suppression + hits / 2 < 100) {
								collateralUnit.suppression += hits / 2;
							} else {
								collateralUnit.suppression = 100;
							}
							if (collateralUnit.organization - hits > 0) {
								collateralUnit.organization -= hits;
							} else {
								collateralUnit.organization = 0;
							}

						}

						int trooperHits = 0;
						// Checks each hit for a strike against a individual in the target unit
						for (int j = 0; j < hits; j++) {
							int roll = rand.nextInt(100) + 1;
							int hitTN = 1;

							if (target.getBuilding() != null && target.getBuilding().getHexSize() < 200) {
								hitTN = 11;
							} else if (target.getBuilding() != null && target.getBuilding().getHexSize() < 400) {
								hitTN = 6;
							}

							if (roll <= hitTN) {
								trooperHits++;
							}
						}

						if (trooperHits > 0) {
							// System.out.println("pass trooper hits");
							ResolveHits resolveHits = new ResolveHits(target, trooperHits, weapon,
									gameWindow.conflictLog, tempUnit, unit, gameWindow);
							resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
							target = resolveHits.returnTarget();

						}

						tempUnit.setIndividual(target, target.number);

						gameWindow.initiativeOrder.set(i, tempUnit);

					}
				}

			}

			trooper.ammo -= shots;

			// System.out.println("Line 926, suppression pass");

			if (shots > 10) {
				int roll = rand.nextInt(8);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			} else {
				int roll = rand.nextInt(6);

				if (trooper.ammo - roll < 0) {
					trooper.ammo = 0;
				} else {
					trooper.ammo -= roll;
				}

			}

			// window.openUnit.troopers.set(index, trooper);

			// window.openUnit.refreshIndividuals();

			// Adds action point, if it is not a free action
			if (!chckbxFreeAction.isSelected()) {
				actionSpent(trooper);
			}

		}

	}

	public void actionSpent(Trooper trooper) {
		
		System.out.println("Action spent");
		
		if (game.getPhase() == 1)
			trooper.spentPhase1++;
		else
			trooper.spentPhase2++;

	}

	// Gets selected individuals from bulk trooper
	public ArrayList<Trooper> getSelectedTroopers() {

		ArrayList<Trooper> troopers = new ArrayList<Trooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals 2, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index).trooper);

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	public ArrayList<BulkTrooper> getSelectedBulkTroopers() {

		ArrayList<BulkTrooper> troopers = new ArrayList<BulkTrooper>();
		// System.out.println("Get Individuals 1");
		int[] indexes = individualsList.getSelectedIndices();
		// System.out.println("Get Individuals, indexes: "+indexes.length);
		for (int index : indexes) {

			troopers.add(bulkTroopers.get(index));

		}

		// System.out.println("Get Individuals 3");
		return troopers;
	}

	// Gets trooper and returns trooper from the trooper's number
	// Might not work
	/*
	 * public Trooper findTrooperFromString(String trooperString) {
	 * 
	 * String value = trooperString; String numString = "";
	 * System.out.println("Find Trooper from string 1"); for(int i = 0; i <
	 * value.length() - 1; i++) {
	 * System.out.println("Find Trooper from string loop"); char c =
	 * value.charAt(i); if(c == ';') break; else if(Character.isDigit(c)) {
	 * numString += c; } }
	 * 
	 * 
	 * Trooper trooper = unit.individuals.get(Integer.parseInt(numString) - 1);
	 * System.out.println("Find Trooper from string 2, trooper: "+trooper.toString()
	 * ); return trooper; }
	 */

	public boolean allDead(Unit unit) {

		boolean allDead = true;

		for (Trooper trooper : unit.individuals)
			if (trooper.alive)
				allDead = false;

		return allDead;

	}

	// Refreshes front end changes to the troopers
	public void refreshIndividualList() {
		individualListLock = true; 
		
		int[] indices = individualsList.getSelectedIndices();

		individualsList.removeAll();

		DefaultListModel listModel = new DefaultListModel();

		for (BulkTrooper individual : bulkTroopers) {

			listModel.addElement(individual.bulkToString());

		}

		individualsList.setModel(listModel);

		individualsList.setSelectedIndices(indices);

		if (openUnit != null)
			openUnit.refreshIndividuals();
		
		individualListLock = false;
	}

	private class BulkTrooper {
		public Trooper trooper;
		public int spentCA;
		public int CA;
		public ArrayList<Trooper> targetTroopers = new ArrayList<Trooper>();
		public Trooper bestTargetTrooper = null;
		public TargetedFire tempTF;
		public TargetedFire targetedFire;
		public boolean possibleShots = true;
		public String wepPercent;
		public int sl;
		public Shoot shoot;
		public boolean shootReset = true;

		public BulkTrooper(Trooper trooper) {
			// System.out.println("Constructor");
			this.trooper = trooper;
			spentCA = 0;
			setAction();
			setTargets();

			this.CA = trooper.combatActions;
			this.wepPercent = trooper.weaponPercent;
			this.sl = trooper.sl;

		}

		// Returns a string for the individual output in the individuals list
		// Shows things like spent ca and ca
		public String bulkToString() {

			String rslt = "";
			rslt += trooper.number + "; " + trooper.name + " ";

			if (targetedFire != null && !targetedFire.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + targetedFire.fullAutoResults + ", ";
			} else if (tempTF != null && !tempTF.fullAutoResults.equals("")) {
				rslt += "Full Auto: " + tempTF.fullAutoResults + ", ";
			}

			if (trooper.storedAimTime.size() > 0)
				rslt += "AIMING: ";

			if (trooper.HD) {
				rslt += "HUNKERED DOWN: ";
			}

			if (trooper.inCover) {
				rslt += "IN COVER: ";
			}

			if (trooper.disabledLegs > 1) {
				rslt += "IMOBALIZED: ";
			} else if (trooper.disabledLegs > 0) {
				rslt += "CRIP-LEG: ";
			}

			if (!trooper.conscious) {
				rslt += "UNCONSCIOUS: ";
			}

			if (trooper.personalShield != null)
				rslt += "CSS: " + trooper.personalShield.currentShieldStrength + " ";

			if (trooper.physicalDamage > 0)
				rslt += "PD: " + trooper.physicalDamage + ", ";

			if (trooper.ionDamage > 0)
				rslt += "ID: " + trooper.ionDamage + ", ";
			rslt += "P1: " + trooper.spentPhase1 + "/" + trooper.P1 + ", P2: " + trooper.spentPhase2 + "/" + trooper.P2
					+ " ";
			rslt += "CA: " + spentCA + "/" + CA + ", ";

			ArrayList<Trooper> spotted = new ArrayList<>();

			for (Spot spot : trooper.spotted) {

				for (Trooper trooper : spot.spottedIndividuals) {

					if (validTarget(trooper) && !spotted.contains(trooper)) {
						spotted.add(trooper);
					}

				}

			}

			rslt += "SC: " + spotted.size() + ", ";
			rslt += wepPercent + "%, SL: " + sl + ", ";
			rslt += "Ammo: " + trooper.ammo + ", ";
			rslt += "Weapon: " + trooper.wep;

			if (game.getPhase() == 1) {
				if (trooper.spentPhase1 >= trooper.P1 || trooper.spentPhase1 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			} else {
				if (trooper.spentPhase2 >= trooper.P2 || trooper.spentPhase2 >= game.getCurrentAction())
					rslt = "Exhausted: " + rslt;
			}
			trooper.returnTrooperUnit(GameWindow.gameWindow).callsign +":: "
			String leaderType = trooper.leaderType == LeaderType.NONE ? "" : trooper.leaderType.toString()+":: ";
			
			return leaderType+ rslt;

		}

		public void setTargets() {

			targetTroopers.clear();

			for (Spot spot : trooper.spotted) {

				for (Trooper spottedTrooper : spot.spottedIndividuals)
					if (validTarget(spottedTrooper) && !targetTroopers.contains(spottedTrooper))
						targetTroopers.add(spottedTrooper);

			}

		}

		public void setAction() {

			trooper.setPCStats();
			CA = trooper.combatActions;
		}

	}

	public void aim(BulkTrooper bulkTrooper, int aimTime, Trooper targetTrooper) {
		// System.out.println("Target: "+targetTrooper.name);
		Trooper trooper = bulkTrooper.trooper;
		int maxAim = new Weapons().findWeapon(trooper.wep).aimTime.size();
		// System.out.println("Trooper Stored Aim Size:
		// "+bulkTrooper.trooper.storedAimTime.size());
		// Get stored aim time
		Hashtable<Trooper, Integer> storedAim;

		// If set to auto, uses maximum amount of remaining aim
		if (aimTime <= 0) {

			if (trooper.storedAimTime.containsKey(targetTrooper)) {
				// System.out.println("Pass 1");
				int additionalAim = bulkTrooper.CA - bulkTrooper.spentCA;
				int currentAim = trooper.storedAimTime.get(targetTrooper);
				int newAim;

				if (currentAim + additionalAim > maxAim - 1) {
					// System.out.println("Pass 1-1");
					newAim = maxAim;
					bulkTrooper.spentCA += maxAim - currentAim;
				} else {
					// System.out.println("Pass 1-2");
					newAim = currentAim += additionalAim;
					bulkTrooper.spentCA += additionalAim;
				}

				trooper.storedAimTime.put(targetTrooper, newAim);
			} else {
				// System.out.println("Pass 2");
				trooper.storedAimTime.clear();
				int newAim = bulkTrooper.CA - bulkTrooper.spentCA;
				trooper.storedAimTime.put(targetTrooper, newAim);
				bulkTrooper.spentCA += newAim;
			}

		}
		// Otherwise, goes to specified aim
		else {
			// System.out.println("Pass 3");
			trooper.storedAimTime.clear();
			trooper.storedAimTime.put(targetTrooper, aimTime - 1);
			bulkTrooper.spentCA += aimTime - 1;
		}

	}

	public void setValidTarget(BulkTrooper bulkTrooper) throws Exception {
		Trooper targetTrooper;

		targetTrooper = getTargetTrooper(bulkTrooper);

		if (validTarget(targetTrooper)) {
			// PCShots(bulkTrooper, targetTrooper);
			bulkTrooper.shoot = ShootUtility.setTarget(bulkTrooper.trooper.returnTrooperUnit(GameWindow.gameWindow), targetTrooper.returnTrooperUnit(gameWindow),
					bulkTrooper.shoot, bulkTrooper.trooper, targetTrooper, bulkTrooper.trooper.wep, -1);
			if(bulkTrooper.shootReset) {
				bulkTrooper.shoot.spentCombatActions = 0; 
				bulkTrooper.shoot.previouslySpentCa = 0;
			}
		} else {
			// SC: # displayed in list could be spotted troopers 
			// Multithreading could be leading to errors where ui doesn't get set or lists don't get updated / cleared 
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " no valid target");
		}

	}

	public void bulkTrooperShoot(BulkTrooper bulkTrooper) throws Exception {

		Trooper targetTrooper;

		if (bulkTrooper.targetedFire != null) {
			targetTrooper = bulkTrooper.targetedFire.targetTrooper;
		} else if (bulkTrooper.tempTF != null) {
			targetTrooper = bulkTrooper.tempTF.targetTrooper;
		} else {
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " trooper shot no valid target exception.");
		}

		if (validTarget(targetTrooper))
			PCFire(bulkTrooper, targetTrooper);
		else {
			bulkTrooper.targetedFire = null;
			bulkTrooper.tempTF = null;
			GameWindow.gameWindow.conflictLog.addNewLineToQueue("No valid target. Ending string of fire.");
			return;
		}

		if (bulkTrooper.targetedFire == null)
			return;
		else
			bulkTrooper.targetedFire.EAL += (int) spinnerConsecutiveEALBonus.getValue();

		if (bulkTrooper.targetedFire.TN < 0 || !validTarget(targetTrooper)) {

			// bulkTrooper.targetTroopers.remove(targetTrooper);
			GameWindow.gameWindow.conflictLog
					.addNewLineToQueue("TN less than 1, target may be dead. Ending string of fire.");
			bulkTrooper.targetTroopers.clear();
			bulkTrooper.setTargets();
			bulkTrooper.targetedFire = null;
			bulkTrooper.bestTargetTrooper = null;
			bulkTrooper.tempTF = null;

			for (BulkTrooper t : bulkTroopers) {
				t.targetTroopers.clear();
				t.setTargets();
			}

			bulkTrooper.trooper.storedAimTime.clear();
			if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
				bulkTrooper.trooper.storedAimTime.clear();
				actionSpent(bulkTrooper.trooper);

			}
			return;
		} else {
			// PCShots(bulkTrooper, targetTrooper);
		}

		if (!freeAction() && (bulkTrooper.spentCA >= bulkTrooper.CA && bulkTrooper.possibleShots == false)) {
			bulkTrooper.trooper.storedAimTime.clear();
			actionSpent(bulkTrooper.trooper);

		}
	}

	// Loops through units in initiaitive order
	// Looks for unit containing indvididual
	// Returns unit
	public Unit findTrooperUnit(Trooper trooper) {
		ArrayList<Unit> units = gameWindow.initiativeOrder;

		for (Unit unit : units) {

			for (Trooper trooper1 : unit.getTroopers()) {

				if (trooper1.compareTo(trooper)) {
					// System.out.println("Found Unit: "+unit.callsign);
					return unit;
				}

			}

		}

		return null;

	}

	public boolean validTarget(Trooper target) {

		if (target == null || !target.alive || !target.conscious || target.HD) {
			return false;
		}

		return true;
	}

	public Trooper getTargetTrooper(BulkTrooper bulkTrooper) throws Exception {
		if(bulkTrooper.trooper.storedAimTime.size() > 0) {
			
			for(Trooper target : bulkTrooper.targetTroopers) {
				if(bulkTrooper.trooper.storedAimTime.containsKey(target)) {
					return target;
				}
			}
			
		}
		
		if (bulkTrooper.bestTargetTrooper != null && validTarget(bulkTrooper.bestTargetTrooper))
			return bulkTrooper.bestTargetTrooper;
		else
			bulkTrooper.bestTargetTrooper = null;

		/**/
		// Sets random target trooper
		// System.out.println("Target Troopers size:
		// "+bulkTrooper.targetTroopers.size());
		// shuffleList(bulkTrooper.targetTroopers);

		Trooper targetTrooper = null;

		Unit targetUnit = null;

		Unit trooperUnit = GameWindow.gameWindow.findTrooperUnit(bulkTrooper.trooper);

		for (Unit unit : GameWindow.gameWindow.initiativeOrder) {
			if (unit.side.equals(trooperUnit.side) || unit.individuals.size() < 1)
				continue;

			boolean validTargets = false;

			for (Trooper trooper : unit.individuals) {
				if (validTarget(trooper) && bulkTrooper.targetTroopers.contains(trooper)) {
					// System.out.println("Valid Targets");
					validTargets = true;
					break;
				}
			}

			if (!validTargets)
				continue;

			if (targetUnit == null) {
				targetUnit = unit;
			} else if (GameWindow.hexDif(targetUnit, trooperUnit) > GameWindow.hexDif(unit, trooperUnit)) {
				targetUnit = unit;
			}

		}

		if (targetedFireFocus.getSelectedIndex() > 0 && getValidTargetUnits().size() > 0) {
			targetUnit = getValidTargetUnits().get(targetedFireFocus.getSelectedIndex() - 1);
			System.out.println("Focus Target Unit: " + targetUnit.callsign);
		}

		if (targetUnit == null)
			throw new Exception(bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name
					+ " getTargetTrooper Target Unit is Null");

		ArrayList<Trooper> targetTrooperArray = new ArrayList<Trooper>();
		for (Trooper trooper : targetUnit.individuals) {
			if (bulkTrooper.targetTroopers.contains(trooper)) {
				targetTrooperArray.add(trooper);
			}
		}

		if (targetTrooperArray.size() == 0) {
			throw new Exception(
					bulkTrooper.trooper.number + " " + bulkTrooper.trooper.name + " targetTrooperArray is empty.");
		}

		targetTrooper = targetTrooperArray.get(DiceRoller.randInt(0, targetTrooperArray.size() - 1));

		for (Trooper trooper : targetUnit.individuals) {
			if (!targetTrooper.inCover)
				break;

			if (!bulkTrooper.targetTroopers.contains(trooper))
				continue;

			targetTrooper = trooper;
		}

		bulkTrooper.bestTargetTrooper = targetTrooper;
		return targetTrooper;

	}

	public void PCFireGuiUpdates() {
		if (getSelectedBulkTroopers().size() < 1)
			return;

		int meanTN = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				meanTN += bulkTrooper.targetedFire.TN;
			else if (bulkTrooper.tempTF != null)
				meanTN += bulkTrooper.tempTF.TN;

		}
		meanTN /= getSelectedBulkTroopers().size();
		lblTn.setText("Mean TN: " + meanTN);

		int aimTime = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null)
				aimTime += bulkTrooper.targetedFire.spentAimTime;
			else if (bulkTrooper.tempTF != null)
				aimTime += bulkTrooper.tempTF.spentAimTime;

		}
		aimTime /= getSelectedBulkTroopers().size();
		lblAimTime.setText("Mean Aim Time: " + aimTime);

		int possibleShots = 0;
		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {

			if (bulkTrooper.targetedFire != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.targetedFire.possibleShots - bulkTrooper.targetedFire.shotsTaken;

			} else if (bulkTrooper.tempTF != null) {
				// System.out.println("temp tf not null");
				possibleShots += bulkTrooper.tempTF.possibleShots - bulkTrooper.tempTF.shotsTaken;

			}

		}
		possibleShots /= getSelectedBulkTroopers().size();
		lblPossibleShots.setText("Mean Possible Shots: " + possibleShots);

		// lblAmmo.setText("Ammo: "+bulkTrooper.trooper.ammo);
		// lblCombatActions.setText("TF CA: "+bulkTrooper.CA);
		gameWindow.conflictLog.addQueuedText();
		gameWindow.refreshInitiativeOrder();
		// refreshTargets();

	}

	public void PCFire(BulkTrooper bulkTrooper, Trooper targetTrooper) {
		// TargetedFire tempTF = bulkTrooper.tempTF;

		Trooper trooper = bulkTrooper.trooper;

		boolean shots;

		if (chckbxFullAuto.isSelected()) {
			shots = trooper.inventory.fireShots(new Weapons().findWeapon(trooper.wep).fullAutoROF,
					new Weapons().findWeapon(trooper.wep));
		} else {
			int roll = new Random().nextInt(3) + 1;
			shots = trooper.inventory.fireShots(roll, new Weapons().findWeapon(trooper.wep));
		}

		// Checks for out of ammo
		if (!shots) {
			// textPaneTargetedFire.setText("OUT OF AMMO");
			gameWindow.conflictLog
					.addNewLineToQueue("Trooper: " + trooper.number + ": " + trooper.name + " is out of ammo");
			return;
		}

		if (new Weapons().findWeapon(trooper.wep).fullAutoROF == 0 && chckbxFullAuto.isSelected()) {
			gameWindow.conflictLog.addNewLineToQueue(
					"Trooper: " + trooper.number + ": " + trooper.name + "'s weapon is not full auto capable.");
		}

		Trooper shooterTrooper = trooper;

		Unit targetUnit = findTrooperUnit(targetTrooper);
		Unit shooterUnit = findTrooperUnit(shooterTrooper);

		for (Trooper t : bulkTrooper.targetTroopers) {
			if (shooterTrooper.storedAimTime.containsKey(t)) {
				targetTrooper = t;
				break;
			}
		}

		int maxAim = comboBoxAimTime.getSelectedIndex() - 1;

		TargetedFire tf = new TargetedFire(shooterTrooper, targetTrooper, shooterUnit, targetUnit, gameWindow, maxAim,
				bulkTrooper.CA - bulkTrooper.spentCA,
				(int) spinnerEALBonus.getValue() + (int) spinnerConsecutiveEALBonus.getValue(),
				(int) spinnerPercentBonus.getValue(), 0, shooterTrooper.wep);

		tf.spentCA = bulkTrooper.spentCA;

		if (bulkTrooper.targetedFire == null) {
			bulkTrooper.targetedFire = tf;
			// reaction = null;
			bulkTrooper.possibleShots = true;
		} else if (!tf.targetTrooper.compareTo(bulkTrooper.targetedFire.targetTrooper)) {
			bulkTrooper.targetedFire = tf;
		}

		bulkTrooper.targetedFire.PCHits = 0;

		if (bulkTrooper.possibleShots) {

			if (chckbxFullAuto.isSelected()) {
				bulkTrooper.targetedFire.fullAutoBurst(true);
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				} else if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 2;
				}
			} else {
				bulkTrooper.targetedFire.shot(comboBoxTargetZone.getSelectedIndex());
				if (chckbxFreeAction.isSelected()) {
					bulkTrooper.targetedFire.spentCA -= 1;
				}
			}

			// System.out.println("TARGETED FIRE: ");
			// System.out.println("targetedFire.shotsTaken:
			// "+bulkTrooper.targetedFire.shotsTaken);
			// System.out.println("targetedFire.timeToReaction:
			// "+bulkTrooper.targetedFire.timeToReaction);
			/*
			 * if(targetedFire.shotsTaken >= targetedFire.timeToReaction &&
			 * targetedFire.shotsTaken != 0 && this.reaction == null && targetTrooper.alive
			 * && targetTrooper.conscious && targetTrooper.canAct(gameWindow.game)) { //
			 * React System.out.println("REACTION"); //ReactionToFireWindow reaction = new
			 * ReactionToFireWindow(shooterTrooper, targetTrooper, windowOpenTrooper,
			 * gameWindow); //this.reaction = reaction;
			 * 
			 * }
			 */
		}

		if (bulkTrooper.targetedFire.PCHits > 0) {
			ResolveHits resolveHits = new ResolveHits(targetTrooper, bulkTrooper.targetedFire.PCHits,
					new Weapons().findWeapon(shooterTrooper.wep), gameWindow.conflictLog,
					targetTrooper.returnTrooperUnit(gameWindow), shooterUnit, gameWindow);

			if (bulkTrooper.targetedFire.calledShot) {
				resolveHits.calledShot = true;
				resolveHits.calledShotBounds = bulkTrooper.targetedFire.calledShotBounds;

			}

			if (targetTrooper.returnTrooperUnit(gameWindow).suppression + bulkTrooper.targetedFire.PCHits < 100) {
				targetTrooper.returnTrooperUnit(gameWindow).suppression += bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).suppression = 100;
			}
			if (targetTrooper.returnTrooperUnit(gameWindow).organization - bulkTrooper.targetedFire.PCHits > 0) {
				targetTrooper.returnTrooperUnit(gameWindow).organization -= bulkTrooper.targetedFire.PCHits;
			} else {
				targetTrooper.returnTrooperUnit(gameWindow).organization = 0;
			}

			resolveHits.performCalculations(gameWindow.game, gameWindow.conflictLog);
			InjuryLog.InjuryLog.addTrooper(targetTrooper);
		}

		if (bulkTrooper.targetedFire.possibleShots <= bulkTrooper.targetedFire.shotsTaken) {
			// Shot ends
			/*
			 * lblPossibleShots.setText("Possible Shots: None");
			 * lblAimTime.setText("Aim Time: N/A"); lblTN.setText("Target Number: N/A");
			 */
			// reaction = null;
			bulkTrooper.possibleShots = false;
			// bulkTrooper.targetedFire = null;
			// PCShots(bulkTrooper);
		}

		if (chckbxFullAuto.isSelected()) {

			bulkTrooper.spentCA += 2;
		} else {

			bulkTrooper.spentCA++;
		}

		/*
		 * if(!targetTrooper.alive) {
		 * 
		 * if(chckbxMultipleTargets.isSelected()) {
		 * 
		 * targetedFire = null; possibleShots = true; reaction = null; PCShots(); } else
		 * { // Performed after swing worker is done actionSpent(openUnit, index);
		 * openUnit.openNext(true); f.dispose(); }
		 * 
		 * 
		 * }
		 */

		// setDetails(openTrooper);

	}

	// Gets weapon
	public Weapons getWeapon(Trooper trooper) {

		return new Weapons().findWeapon(trooper.wep);
	}

	public Unit findUnit(String callsign) {

		for (Unit unit : gameWindow.initiativeOrder)
			if (unit.callsign.equals(callsign))
				return unit;

		return null;
	}

	// Spot test
	public void spotTest(String targetCallsign, Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		// Find target unit
		Unit targetUnit = findUnit(targetCallsign);

		Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
				comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
				gameWindow);

		// Print results
		spotAction.displayResultsQueue(gameWindow, spotAction);

		// Set results in trooper
		trooper.spotted.add(spotAction);
		// Refresh trooper
		// refreshTrooper(trooper);
		// window.openUnit.troopers.set(index, trooper);

	}

	// Spot test
	public void spotTestAll(Trooper trooper, Unit unit) {

		// Find spotter unit
		Unit spotterUnit = unit;

		for (Unit targetUnit : unit.lineOfSight) {

			Spot spotAction = new Spot(gameWindow, spotterUnit, targetUnit, trooper,
					comboBoxScanArea.getSelectedItem().toString(), gameWindow.visibility, gameWindow.initiativeOrder,
					gameWindow);

			spotAction.displayResultsQueue(gameWindow, spotAction);

			// Set results in trooper
			trooper.spotted.add(spotAction);
		}

	}

	public boolean hasTargets(BulkTrooper bulkTrooper) {

		return true;

	}

	public boolean freeAction() {
		return chckbxFreeAction.isSelected();
	}

	public void volley() {

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {

				InjuryLog.InjuryLog.addAlreadyInjured();
				ArrayList<BulkTrooper> troops = selectedBulkTroopers;

				ExecutorService es = Executors.newFixedThreadPool(16);

				for (BulkTrooper bulkTrooper : troops) {

					Shoot shoot = bulkTrooper.shoot;

					if (shoot == null)
						continue;

					es.submit(() -> {
						System.out.println("Submit");
						try {

							
							int shots = 1; 
							while (shoot.spentCombatActions < shoot.shooter.combatActions && 
									(validTarget(shoot.target) || comboBoxTargetUnits.getSelectedIndex() > 0)
									&& !shoot.outOfAmmo) {

								System.out.println("volley shot: "+shots);
								
								if (comboBoxTargetUnits.getSelectedIndex() > 0)
									shoot.suppressiveFire(shoot.wep.suppressiveROF);
								else if (chckbxFullAuto.isSelected())
									shoot.burst();
								else
									shoot.shot(chckbxGuided.isSelected());

								GameWindow.gameWindow.conflictLog.addNewLineToQueue("Results: " + shoot.shotResults);

								valleyValidTargetCheck(shoot, bulkTrooper);
								shots++;
								System.out.println("Volley CA test: "+(shoot.spentCombatActions < shoot.shooter.combatActions));
								System.out.println("Volley Valid Target Test: "+validTarget(shoot.target));
								System.out.println("Volley Valid Supp Target Test: "+(comboBoxTargetUnits.getSelectedIndex() > 0));
								System.out.println("Volley Out of Ammo Test: "+(!shoot.outOfAmmo));
							}
							
							
							
						} catch (Exception e) {
							e.printStackTrace();
						}
					});
					
					try {
						TimeUnit.MILLISECONDS.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				try {
					TimeUnit.MILLISECONDS.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				es.shutdown();

				return null;
			}

			@Override
			protected void done() {

				try {
					TimeUnit.MILLISECONDS.sleep(250);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				for(BulkTrooper bulkTrooper : selectedBulkTroopers) {
					if(!chckbxFreeAction.isSelected()) {
						System.out.println("volley action spent");
						actionSpent(bulkTrooper.trooper);
					}
				}
				
				System.out.println("volley gui updates");
				guiUpdates();
				refreshIndividualList();
				InjuryLog.InjuryLog.printResultsToLog();
				gameWindow.conflictLog.addQueuedText();
				// individualsList.setSelectedIndex(-1);

			}

		};

		worker.execute();

	}

	public void valleyValidTargetCheck(Shoot shoot, BulkTrooper bulkTrooper) throws Exception {
		if (!validTarget(shoot.target)) {
			bulkTrooper.setTargets();

			if (bulkTrooper.targetTroopers.size() > 0) {
				setValidTarget(bulkTrooper);

				if (comboBoxAimTime.getSelectedIndex() == 0)
					bulkTrooper.shoot.autoAim();

				if (comboBoxTargetZone.getSelectedIndex() > 0) {
					setCalledShotBounds(bulkTrooper.shoot);
				}
			}

		}
	}

	public void ordnanceComboboxes() {
		/*
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None"); Hex hex
		 * = GameWindow.gameWindow.findHex(trooperUnit.X, trooperUnit.Y); if
		 * (trooperBuilding == null && hex != null) { for (Building building :
		 * hex.buildings) {
		 * 
		 * comboBoxBuilding.addItem(building.name);
		 * 
		 * } comboBoxBuilding.setSelectedIndex(0); } else if (hex != null) {
		 * comboBoxBuilding.removeAllItems(); comboBoxBuilding.addItem("None");
		 * comboBoxBuilding.addItem("ALREADY INSIDE");
		 * comboBoxBuilding.setSelectedIndex(1); }
		 */
	}

	public void guiUpdates() {

		ArrayList<Shoot> shots = new ArrayList<>();

		for (BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2");
				continue;
			}
			shots.add(bulkTrooper.shoot);
		}

		ShootUtility.shootGuiUpdate(lblPossibleShots, lblAimTime, lblTn, null, null, null, chckbxFullAuto, shots);
	}

	public void setCalledShotBounds(Shoot shoot) {
		if (shoot == null) {
			System.out.println("shoot is null set called shot bounds");
			return;
		}

		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {
					int index = comboBoxTargetZone.getSelectedIndex();
					System.out.println("Size ALM Pre: " + shoot.sizeALM);
					if (index == 0) {
						System.out.println("Clear called shot");
						shoot.calledShotBounds.clear();
						shoot.calledShotLocation = "";
					} else {
						System.out.println("set called shot");
						shoot.setCalledShotBounds(comboBoxTargetZone.getSelectedIndex());
					}
					System.out.println("Size ALM POST: " + shoot.sizeALM);
					shoot.setALM();
					shoot.setEAL();
					shoot.setSingleTn();
					shoot.setFullAutoTn();
					shoot.setSuppressiveTn();
				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {

				guiUpdates();

			}

		};

		worker.execute();
	}

	public void bonuses() {

		for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
			if (bulkTrooper.shoot == null) {
				System.out.println("Shoot is null 2 bonuses");
				continue;
			}
			bulkTrooper.shoot.setBonuses((int) spinnerPercentBonus.getValue(), (int) spinnerEALBonus.getValue(),
					(int) spinnerConsecutiveEALBonus.getValue());
		}

		guiUpdates();

	}

	public void selected() {
		SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

			@Override
			protected Void doInBackground() throws Exception {
				try {

					ExecutorService es = Executors.newFixedThreadPool(16);

					ArrayList<BulkTrooper> currentlySelectedBulkTroopers = getSelectedBulkTroopers();
					ArrayList<BulkTrooper> removeTrooper = new ArrayList<>();

					for (BulkTrooper bulkTrooper : selectedBulkTroopers) {
						if (!currentlySelectedBulkTroopers.contains(bulkTrooper)) {
							removeTrooper.add(bulkTrooper);
						}
					}

					for (BulkTrooper bulkTrooper : removeTrooper) {
						selectedBulkTroopers.remove(bulkTrooper);
					}

					for (BulkTrooper bulkTrooper : currentlySelectedBulkTroopers) {
						if (selectedBulkTroopers.contains(bulkTrooper))
							continue;

						if (bulkTrooper.targetTroopers.size() > 0) {
							es.submit(() -> {
								System.out.println("Submit");
								try {
									
									if(comboBoxTargetUnits.getSelectedIndex() > 0)
										bulkTrooper.shoot = ShootUtility.setTargetUnit(unit, targetUnits.get(comboBoxTargetUnits.getSelectedIndex() -1),
												bulkTrooper.shoot, bulkTrooper.trooper, bulkTrooper.trooper.wep, -1);
									else 
										setValidTarget(bulkTrooper);

									if (comboBoxAimTime.getSelectedIndex() == 0)
										bulkTrooper.shoot.autoAim();

									if (comboBoxTargetZone.getSelectedIndex() > 0 && comboBoxTargetUnits.getSelectedIndex() == 0) {
										setCalledShotBounds(bulkTrooper.shoot);
									}

								} catch (Exception e) {
									e.printStackTrace();
								}
							});
						}
						
						if(!selectedBulkTroopers.contains(bulkTrooper))
							selectedBulkTroopers.add(bulkTrooper);
					}

					/*
					 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
					 * if(bulkTrooper.targetTroopers.size() < 1) { continue; }
					 * 
					 * 
					 * es.submit(() -> { System.out.println("Submit"); try {
					 * setValidTarget(bulkTrooper); } catch (Exception e) { e.printStackTrace(); }
					 * }); }
					 */

					es.shutdown();

					System.out.println("Finished Threads");

				} catch (Exception e) {
					e.printStackTrace();
				}

				return null;
			}

			@Override
			protected void done() {
				/*
				 * targetedFireFocus.removeAllItems();
				 * targetedFireFocus.addItem("Targeted Fire Focus"); targetUnits.clear();
				 * for(BulkTrooper bulkTrooper : getSelectedBulkTroopers()) {
				 * 
				 * for(Trooper targetTrooper : bulkTrooper.targetTroopers) { Unit targetUnit =
				 * findTrooperUnit(targetTrooper);
				 * 
				 * if(targetUnits.contains(targetUnit)) continue;
				 * 
				 * targetUnits.add(targetUnit);
				 * targetedFireFocus.addItem(findTrooperUnit(targetTrooper).callsign);
				 * 
				 * }
				 * 
				 * }
				 */

				// System.out.println("Done");
				
				
				selectedGuiUpdates();
			}

		};

		worker.execute();
	}
	
	public void selectedGuiUpdates() {
		try {
			TimeUnit.MILLISECONDS.sleep(250);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		setTargetFocus();
		gameWindow.conflictLog.addQueuedText();
		// PCFireGuiUpdates();
		guiUpdates();
		System.out.println("Selected Bulk Troopers Size: " + selectedBulkTroopers.size());
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-03-11 15:16:10.214
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-03-11 15:16:10.215
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:254)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY com.genuitec.eclipse.inlinesearch 1 0 2023-03-11 15:17:57.989
!MESSAGE Falling back to default background
!STACK 1
org.eclipse.core.runtime.CoreException: Could not detect the editor background.
	at com.genuitec.eclipse.inlinesearch.editor.findreplace.FindReplaceBar.<init>(FindReplaceBar.java:388)
	at com.genuitec.eclipse.inlinesearch.core.InlineSearchManager.showEditorFindReplaceBar(InlineSearchManager.java:109)
	at com.genuitec.eclipse.inlinesearch.handlers.ShowFindReplaceBarHandler.execute(ShowFindReplaceBarHandler.java:52)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor238.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 com.genuitec.eclipse.inlinesearch 1 0 2023-03-11 15:17:57.989
!MESSAGE Could not detect the editor background.

!ENTRY org.eclipse.ui.ide 4 4 2023-03-11 15:33:12.039
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:590)
	at org.eclipse.wb.internal.core.model.description.helpers.DescriptionHelper.getIconImage(DescriptionHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getComponentImage(ComponentPresentationHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getFastPresentation(ComponentPresentationHelper.java:139)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getPresentation(ComponentPresentationHelper.java:114)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.preparePresentation(ComponentEntryInfo.java:259)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.initialize(ComponentEntryInfo.java:219)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.getVisualEntry(DesignerPalette.java:267)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette$4.getEntries(DesignerPalette.java:347)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$CategoryFigure.<init>(PaletteComposite.java:368)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$PaletteFigure.refresh(PaletteComposite.java:284)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.refreshPalette(PaletteComposite.java:199)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.setPalette(PaletteComposite.java:192)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.showPalette(DesignerPalette.java:462)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.reloadPalette(DesignerPalette.java:182)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.setInput(DesignerPalette.java:148)
	at org.eclipse.wb.internal.core.editor.JavaDesignComposite.refresh(JavaDesignComposite.java:147)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:604)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:468)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:464)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:470)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:484)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:432)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:389)
	at org.eclipse.wb.internal.core.editor.UndoManager.activate(UndoManager.java:90)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState_True(DesignPage.java:275)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState(DesignPage.java:252)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode.showPage(DefaultMultiMode.java:127)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode$1.widgetSelected(DefaultMultiMode.java:63)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:252)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:778)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3248)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1882)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:331)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2023-03-11 15:38:49.851
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:590)
	at org.eclipse.wb.internal.core.model.description.helpers.DescriptionHelper.getIconImage(DescriptionHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getComponentImage(ComponentPresentationHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getFastPresentation(ComponentPresentationHelper.java:139)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getPresentation(ComponentPresentationHelper.java:114)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.preparePresentation(ComponentEntryInfo.java:259)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.initialize(ComponentEntryInfo.java:219)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.getVisualEntry(DesignerPalette.java:267)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette$4.getEntries(DesignerPalette.java:347)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$CategoryFigure.<init>(PaletteComposite.java:368)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$PaletteFigure.refresh(PaletteComposite.java:284)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.refreshPalette(PaletteComposite.java:199)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.setPalette(PaletteComposite.java:192)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.showPalette(DesignerPalette.java:462)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.reloadPalette(DesignerPalette.java:182)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.setInput(DesignerPalette.java:148)
	at org.eclipse.wb.internal.core.editor.JavaDesignComposite.refresh(JavaDesignComposite.java:147)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:604)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:468)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:464)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:470)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:484)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:432)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:389)
	at org.eclipse.wb.internal.core.editor.UndoManager.activate(UndoManager.java:90)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState_True(DesignPage.java:275)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState(DesignPage.java:252)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode.showPage(DefaultMultiMode.java:127)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode$1.widgetSelected(DefaultMultiMode.java:63)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:252)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:778)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3248)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1882)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:331)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2023-03-11 15:39:47.305
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:590)
	at org.eclipse.wb.internal.core.model.description.helpers.DescriptionHelper.getIconImage(DescriptionHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getComponentImage(ComponentPresentationHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getFastPresentation(ComponentPresentationHelper.java:139)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getPresentation(ComponentPresentationHelper.java:114)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.preparePresentation(ComponentEntryInfo.java:259)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.initialize(ComponentEntryInfo.java:219)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.getVisualEntry(DesignerPalette.java:267)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette$4.getEntries(DesignerPalette.java:347)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$CategoryFigure.<init>(PaletteComposite.java:368)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$PaletteFigure.refresh(PaletteComposite.java:284)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.refreshPalette(PaletteComposite.java:199)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.setPalette(PaletteComposite.java:192)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.showPalette(DesignerPalette.java:462)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.reloadPalette(DesignerPalette.java:182)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.setInput(DesignerPalette.java:148)
	at org.eclipse.wb.internal.core.editor.JavaDesignComposite.refresh(JavaDesignComposite.java:147)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:604)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:468)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:464)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:470)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:484)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:432)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:389)
	at org.eclipse.wb.internal.core.editor.UndoManager.activate(UndoManager.java:90)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState_True(DesignPage.java:275)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState(DesignPage.java:252)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode.showPage(DefaultMultiMode.java:127)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode$1.widgetSelected(DefaultMultiMode.java:63)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:252)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:778)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3248)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1882)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:331)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY com.genuitec.eclipse.inlinesearch 1 0 2023-03-12 13:02:52.850
!MESSAGE Falling back to default background
!STACK 1
org.eclipse.core.runtime.CoreException: Could not detect the editor background.
	at com.genuitec.eclipse.inlinesearch.editor.findreplace.FindReplaceBar.<init>(FindReplaceBar.java:388)
	at com.genuitec.eclipse.inlinesearch.core.InlineSearchManager.showEditorFindReplaceBar(InlineSearchManager.java:109)
	at com.genuitec.eclipse.inlinesearch.handlers.ShowFindReplaceBarHandler.execute(ShowFindReplaceBarHandler.java:52)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor238.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 com.genuitec.eclipse.inlinesearch 1 0 2023-03-12 13:02:52.851
!MESSAGE Could not detect the editor background.
!SESSION 2023-03-12 18:02:43.845 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-12 18:07:49.248
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-12 18:07:49.248
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3c98eaa9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2d91147b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-12 18:07:49.248
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1930e8ef,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1299fed3,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY com.genuitec.eclipse.inlinesearch 1 0 2023-03-12 21:44:52.416
!MESSAGE Falling back to default background
!STACK 1
org.eclipse.core.runtime.CoreException: Could not detect the editor background.
	at com.genuitec.eclipse.inlinesearch.editor.findreplace.FindReplaceBar.<init>(FindReplaceBar.java:388)
	at com.genuitec.eclipse.inlinesearch.core.InlineSearchManager.showEditorFindReplaceBar(InlineSearchManager.java:109)
	at com.genuitec.eclipse.inlinesearch.handlers.ShowFindReplaceBarHandler.execute(ShowFindReplaceBarHandler.java:52)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 com.genuitec.eclipse.inlinesearch 1 0 2023-03-12 21:44:52.417
!MESSAGE Could not detect the editor background.
!SESSION 2023-03-15 12:18:43.050 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2023-03-15 12:20:39.703
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jface 2 0 2023-03-15 12:20:42.554
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-15 12:20:42.554
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@16b713dd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@379df603,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-15 12:20:42.554
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@58fb5b8f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@51d41b97,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY com.genuitec.eclipse.inlinesearch 1 0 2023-03-15 17:28:50.906
!MESSAGE Falling back to default background
!STACK 1
org.eclipse.core.runtime.CoreException: Could not detect the editor background.
	at com.genuitec.eclipse.inlinesearch.editor.findreplace.FindReplaceBar.<init>(FindReplaceBar.java:388)
	at com.genuitec.eclipse.inlinesearch.core.InlineSearchManager.showEditorFindReplaceBar(InlineSearchManager.java:109)
	at com.genuitec.eclipse.inlinesearch.handlers.ShowFindReplaceBarHandler.execute(ShowFindReplaceBarHandler.java:52)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 com.genuitec.eclipse.inlinesearch 1 0 2023-03-15 17:28:50.907
!MESSAGE Could not detect the editor background.
!SESSION 2023-03-16 15:24:14.090 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.3
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-16 15:24:44.421
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-16 15:24:44.421
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3b1137b0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@21ba0d33,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-16 15:24:44.421
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@afb7b03,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4fd63c43,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.ui 4 4 2023-03-16 15:24:47.531
!MESSAGE Unable to create part
!STACK 1
org.eclipse.ui.PartInitException: Cannot determine URI for '/CFFW/src/Shoot/Shoot.java'.
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3193)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3204)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:353)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:344)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.showTab(StackRenderer.java:1209)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.postProcess(LazyStackRenderer.java:116)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:677)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:528)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.SashRenderer.processContents(SashRenderer.java:150)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.SashRenderer.processContents(SashRenderer.java:150)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.SashRenderer.processContents(SashRenderer.java:150)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveRenderer.processContents(PerspectiveRenderer.java:51)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveStackRenderer.showTab(PerspectiveStackRenderer.java:82)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.postProcess(LazyStackRenderer.java:116)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveStackRenderer.postProcess(PerspectiveStackRenderer.java:64)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:677)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.SashRenderer.processContents(SashRenderer.java:150)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.WBWRenderer.processContents(WBWRenderer.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1083)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
Caused by: org.eclipse.core.runtime.CoreException: Cannot determine URI for '/CFFW/src/Shoot/Shoot.java'.
	at org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create(ResourceFileBuffer.java:239)
	at org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:115)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.createFileInfo(TextFileDocumentProvider.java:563)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.createFileInfo(CompilationUnitDocumentProvider.java:1018)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.connect(TextFileDocumentProvider.java:481)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.connect(CompilationUnitDocumentProvider.java:1284)
	at org.eclipse.ui.texteditor.AbstractTextEditor.doSetInput(AbstractTextEditor.java:4172)
	at org.eclipse.ui.texteditor.StatusTextEditor.doSetInput(StatusTextEditor.java:262)
	at org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.doSetInput(AbstractDecoratedTextEditor.java:1479)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.internalDoSetInput(JavaEditor.java:2554)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.doSetInput(JavaEditor.java:2527)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput(CompilationUnitEditor.java:1411)
	at org.eclipse.ui.texteditor.AbstractTextEditor.lambda$1(AbstractTextEditor.java:3162)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2290)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3179)
	... 114 more
!SUBENTRY 1 org.eclipse.core.filebuffers 4 0 2023-03-16 15:24:47.533
!MESSAGE Cannot determine URI for '/CFFW/src/Shoot/Shoot.java'.
!STACK 1
org.eclipse.core.runtime.CoreException: Cannot determine URI for '/CFFW/src/Shoot/Shoot.java'.
	at org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create(ResourceFileBuffer.java:239)
	at org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:115)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.createFileInfo(TextFileDocumentProvider.java:563)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.createFileInfo(CompilationUnitDocumentProvider.java:1018)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.connect(TextFileDocumentProvider.java:481)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.connect(CompilationUnitDocumentProvider.java:1284)
	at org.eclipse.ui.texteditor.AbstractTextEditor.doSetInput(AbstractTextEditor.java:4172)
	at org.eclipse.ui.texteditor.StatusTextEditor.doSetInput(StatusTextEditor.java:262)
	at org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.doSetInput(AbstractDecoratedTextEditor.java:1479)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.internalDoSetInput(JavaEditor.java:2554)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.doSetInput(JavaEditor.java:2527)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput(CompilationUnitEditor.java:1411)
	at org.eclipse.ui.texteditor.AbstractTextEditor.lambda$1(AbstractTextEditor.java:3162)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2290)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3179)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3204)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:353)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:344)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.showTab(StackRenderer.java:1209)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.postProcess(LazyStackRenderer.java:116)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:677)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:528)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.SashRenderer.processContents(SashRenderer.java:150)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.SashRenderer.processContents(SashRenderer.java:150)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.SashRenderer.processContents(SashRenderer.java:150)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveRenderer.processContents(PerspectiveRenderer.java:51)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveStackRenderer.showTab(PerspectiveStackRenderer.java:82)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.postProcess(LazyStackRenderer.java:116)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveStackRenderer.postProcess(PerspectiveStackRenderer.java:64)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:677)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.SashRenderer.processContents(SashRenderer.java:150)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:72)
	at org.eclipse.e4.ui.workbench.renderers.swt.WBWRenderer.processContents(WBWRenderer.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:673)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1083)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.filebuffers 4 0 2023-03-16 15:24:47.535
!MESSAGE Cannot determine URI for '/CFFW/src/Shoot/Shoot.java'.

!ENTRY org.eclipse.egit.ui 2 0 2023-03-16 15:24:49.944
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\xande'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui 4 4 2023-03-16 15:24:52.930
!MESSAGE Unable to create part
!STACK 1
org.eclipse.ui.PartInitException: Cannot determine URI for '/CFFW/src/UtilityClasses/ShootUtility.java'.
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3193)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3204)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:353)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:344)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:105)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1381)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1331)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.closePart(StackRenderer.java:1182)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer$3.close(StackRenderer.java:1042)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1961)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:336)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
Caused by: org.eclipse.core.runtime.CoreException: Cannot determine URI for '/CFFW/src/UtilityClasses/ShootUtility.java'.
	at org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create(ResourceFileBuffer.java:239)
	at org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:115)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.createFileInfo(TextFileDocumentProvider.java:563)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.createFileInfo(CompilationUnitDocumentProvider.java:1018)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.connect(TextFileDocumentProvider.java:481)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.connect(CompilationUnitDocumentProvider.java:1284)
	at org.eclipse.ui.texteditor.AbstractTextEditor.doSetInput(AbstractTextEditor.java:4172)
	at org.eclipse.ui.texteditor.StatusTextEditor.doSetInput(StatusTextEditor.java:262)
	at org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.doSetInput(AbstractDecoratedTextEditor.java:1479)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.internalDoSetInput(JavaEditor.java:2554)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.doSetInput(JavaEditor.java:2527)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput(CompilationUnitEditor.java:1411)
	at org.eclipse.ui.texteditor.AbstractTextEditor.lambda$1(AbstractTextEditor.java:3162)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2345)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2343)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3179)
	... 76 more
!SUBENTRY 1 org.eclipse.core.filebuffers 4 0 2023-03-16 15:24:52.931
!MESSAGE Cannot determine URI for '/CFFW/src/UtilityClasses/ShootUtility.java'.
!STACK 1
org.eclipse.core.runtime.CoreException: Cannot determine URI for '/CFFW/src/UtilityClasses/ShootUtility.java'.
	at org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create(ResourceFileBuffer.java:239)
	at org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:115)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.createFileInfo(TextFileDocumentProvider.java:563)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.createFileInfo(CompilationUnitDocumentProvider.java:1018)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.connect(TextFileDocumentProvider.java:481)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.connect(CompilationUnitDocumentProvider.java:1284)
	at org.eclipse.ui.texteditor.AbstractTextEditor.doSetInput(AbstractTextEditor.java:4172)
	at org.eclipse.ui.texteditor.StatusTextEditor.doSetInput(StatusTextEditor.java:262)
	at org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.doSetInput(AbstractDecoratedTextEditor.java:1479)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.internalDoSetInput(JavaEditor.java:2554)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.doSetInput(JavaEditor.java:2527)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput(CompilationUnitEditor.java:1411)
	at org.eclipse.ui.texteditor.AbstractTextEditor.lambda$1(AbstractTextEditor.java:3162)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2345)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2343)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3179)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3204)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:353)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:344)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:105)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1381)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1331)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.closePart(StackRenderer.java:1182)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer$3.close(StackRenderer.java:1042)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1961)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:336)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.filebuffers 4 0 2023-03-16 15:24:52.932
!MESSAGE Cannot determine URI for '/CFFW/src/UtilityClasses/ShootUtility.java'.

!ENTRY org.eclipse.ui 4 4 2023-03-16 15:24:56.213
!MESSAGE Unable to create part
!STACK 1
org.eclipse.ui.PartInitException: Cannot determine URI for '/CFFW/src/Conflict/BulkWindow.java'.
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3193)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3204)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:353)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:344)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:105)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1381)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1331)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.closePart(StackRenderer.java:1182)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer$3.close(StackRenderer.java:1042)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1961)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:336)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
Caused by: org.eclipse.core.runtime.CoreException: Cannot determine URI for '/CFFW/src/Conflict/BulkWindow.java'.
	at org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create(ResourceFileBuffer.java:239)
	at org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:115)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.createFileInfo(TextFileDocumentProvider.java:563)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.createFileInfo(CompilationUnitDocumentProvider.java:1018)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.connect(TextFileDocumentProvider.java:481)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.connect(CompilationUnitDocumentProvider.java:1284)
	at org.eclipse.ui.texteditor.AbstractTextEditor.doSetInput(AbstractTextEditor.java:4172)
	at org.eclipse.ui.texteditor.StatusTextEditor.doSetInput(StatusTextEditor.java:262)
	at org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.doSetInput(AbstractDecoratedTextEditor.java:1479)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.internalDoSetInput(JavaEditor.java:2554)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.doSetInput(JavaEditor.java:2527)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput(CompilationUnitEditor.java:1411)
	at org.eclipse.wb.internal.core.editor.multi.DesignerEditor.doSetInput(DesignerEditor.java:109)
	at org.eclipse.ui.texteditor.AbstractTextEditor.lambda$1(AbstractTextEditor.java:3162)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2345)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2343)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3179)
	... 76 more
!SUBENTRY 1 org.eclipse.core.filebuffers 4 0 2023-03-16 15:24:56.216
!MESSAGE Cannot determine URI for '/CFFW/src/Conflict/BulkWindow.java'.
!STACK 1
org.eclipse.core.runtime.CoreException: Cannot determine URI for '/CFFW/src/Conflict/BulkWindow.java'.
	at org.eclipse.core.internal.filebuffers.ResourceFileBuffer.create(ResourceFileBuffer.java:239)
	at org.eclipse.core.internal.filebuffers.TextFileBufferManager.connect(TextFileBufferManager.java:115)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.createFileInfo(TextFileDocumentProvider.java:563)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.createFileInfo(CompilationUnitDocumentProvider.java:1018)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.connect(TextFileDocumentProvider.java:481)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.connect(CompilationUnitDocumentProvider.java:1284)
	at org.eclipse.ui.texteditor.AbstractTextEditor.doSetInput(AbstractTextEditor.java:4172)
	at org.eclipse.ui.texteditor.StatusTextEditor.doSetInput(StatusTextEditor.java:262)
	at org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.doSetInput(AbstractDecoratedTextEditor.java:1479)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.internalDoSetInput(JavaEditor.java:2554)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.doSetInput(JavaEditor.java:2527)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput(CompilationUnitEditor.java:1411)
	at org.eclipse.wb.internal.core.editor.multi.DesignerEditor.doSetInput(DesignerEditor.java:109)
	at org.eclipse.ui.texteditor.AbstractTextEditor.lambda$1(AbstractTextEditor.java:3162)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2345)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2343)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3179)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3204)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:353)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:344)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:105)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1381)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1331)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.closePart(StackRenderer.java:1182)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer$3.close(StackRenderer.java:1042)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1961)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:336)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.filebuffers 4 0 2023-03-16 15:24:56.217
!MESSAGE Cannot determine URI for '/CFFW/src/Conflict/BulkWindow.java'.

!ENTRY org.eclipse.e4.ui.workbench 4 0 2023-03-16 15:24:56.230
!MESSAGE Cannot invoke "org.eclipse.wb.internal.core.editor.UndoManager.deactivate()" because "this.m_undoManager" is null
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.wb.internal.core.editor.UndoManager.deactivate()" because "this.m_undoManager" is null
	at org.eclipse.wb.internal.core.editor.DesignPage.dispose(DesignPage.java:140)
	at org.eclipse.wb.internal.core.editor.multi.MultiMode.dispose(MultiMode.java:135)
	at org.eclipse.wb.internal.core.editor.multi.DesignerEditor.dispose(DesignerEditor.java:147)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.handlePartInitException(CompatibilityPart.java:314)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:346)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:105)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1381)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1331)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.closePart(StackRenderer.java:1182)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer$3.close(StackRenderer.java:1042)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1961)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:336)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.e4.ui.workbench 4 2 2023-03-16 15:24:56.353
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.e4.ui.workbench".
!STACK 0
java.lang.ClassCastException: class org.eclipse.ui.internal.ErrorEditorPart cannot be cast to class org.eclipse.wb.internal.core.editor.multi.DesignerEditor (org.eclipse.ui.internal.ErrorEditorPart is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @6f11e674; org.eclipse.wb.internal.core.editor.multi.DesignerEditor is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @e4b9a64)
	at org.eclipse.wb.internal.core.editor.multi.DesignerEditorContributor.setActiveEditor(DesignerEditorContributor.java:33)
	at org.eclipse.ui.internal.EditorActionBars.partChanged(EditorActionBars.java:335)
	at org.eclipse.ui.internal.WorkbenchPage.updateActivations(WorkbenchPage.java:323)
	at org.eclipse.ui.internal.WorkbenchPage$E4PartListener.partActivated(WorkbenchPage.java:212)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl$2.run(PartServiceImpl.java:250)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.firePartActivated(PartServiceImpl.java:247)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:771)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:680)
	at org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer.activate(AbstractPartRenderer.java:97)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.lambda$0(ContributedPartRenderer.java:63)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Shell.setActiveControl(Shell.java:1532)
	at org.eclipse.swt.widgets.Shell.setActiveControl(Shell.java:1495)
	at org.eclipse.swt.widgets.Control.sendFocusEvent(Control.java:2956)
	at org.eclipse.swt.widgets.Widget.wmSetFocus(Widget.java:2289)
	at org.eclipse.swt.widgets.Control.WM_SETFOCUS(Control.java:5427)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4818)
	at org.eclipse.swt.widgets.Text.windowProc(Text.java:2687)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.SetFocus(Native Method)
	at org.eclipse.swt.widgets.Control.forceFocus(Control.java:1093)
	at org.eclipse.swt.widgets.Control.setFocus(Control.java:3441)
	at org.eclipse.swt.widgets.Composite.setFocus(Composite.java:1079)
	at org.eclipse.ui.internal.ErrorEditorPart.setFocus(ErrorEditorPart.java:84)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.delegateSetFocus(CompatibilityPart.java:226)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:323)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:245)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:147)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.focusGui(PartRenderingEngine.java:790)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer$1.setFocus(ContributedPartRenderer.java:106)
	at org.eclipse.swt.custom.CTabItem.setFocus(CTabItem.java:379)
	at org.eclipse.swt.custom.CTabFolder.setFocus(CTabFolder.java:2683)
	at org.eclipse.swt.widgets.Control.fixFocus(Control.java:1051)
	at org.eclipse.swt.widgets.Control.setVisible(Control.java:3954)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3236)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3193)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.showTab(StackRenderer.java:1221)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.lambda$0(LazyStackRenderer.java:83)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1381)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1331)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.closePart(StackRenderer.java:1182)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer$3.close(StackRenderer.java:1042)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1961)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:336)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.e4.ui.workbench 4 0 2023-03-16 15:24:56.358
!MESSAGE An exception occurred while notifying part listeners
!STACK 0
java.lang.ClassCastException: class org.eclipse.ui.internal.ErrorEditorPart cannot be cast to class org.eclipse.wb.internal.core.editor.multi.DesignerEditor (org.eclipse.ui.internal.ErrorEditorPart is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @6f11e674; org.eclipse.wb.internal.core.editor.multi.DesignerEditor is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @e4b9a64)
	at org.eclipse.wb.internal.core.editor.multi.DesignerEditorContributor.setActiveEditor(DesignerEditorContributor.java:33)
	at org.eclipse.ui.internal.EditorActionBars.partChanged(EditorActionBars.java:335)
	at org.eclipse.ui.internal.WorkbenchPage.updateActivations(WorkbenchPage.java:323)
	at org.eclipse.ui.internal.WorkbenchPage$E4PartListener.partActivated(WorkbenchPage.java:212)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl$2.run(PartServiceImpl.java:250)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.firePartActivated(PartServiceImpl.java:247)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:771)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:680)
	at org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer.activate(AbstractPartRenderer.java:97)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.lambda$0(ContributedPartRenderer.java:63)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Shell.setActiveControl(Shell.java:1532)
	at org.eclipse.swt.widgets.Shell.setActiveControl(Shell.java:1495)
	at org.eclipse.swt.widgets.Control.sendFocusEvent(Control.java:2956)
	at org.eclipse.swt.widgets.Widget.wmSetFocus(Widget.java:2289)
	at org.eclipse.swt.widgets.Control.WM_SETFOCUS(Control.java:5427)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4818)
	at org.eclipse.swt.widgets.Text.windowProc(Text.java:2687)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.SetFocus(Native Method)
	at org.eclipse.swt.widgets.Control.forceFocus(Control.java:1093)
	at org.eclipse.swt.widgets.Control.setFocus(Control.java:3441)
	at org.eclipse.swt.widgets.Composite.setFocus(Composite.java:1079)
	at org.eclipse.ui.internal.ErrorEditorPart.setFocus(ErrorEditorPart.java:84)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.delegateSetFocus(CompatibilityPart.java:226)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:323)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:245)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:147)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.focusGui(PartRenderingEngine.java:790)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer$1.setFocus(ContributedPartRenderer.java:106)
	at org.eclipse.swt.custom.CTabItem.setFocus(CTabItem.java:379)
	at org.eclipse.swt.custom.CTabFolder.setFocus(CTabFolder.java:2683)
	at org.eclipse.swt.widgets.Control.fixFocus(Control.java:1051)
	at org.eclipse.swt.widgets.Control.setVisible(Control.java:3954)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3236)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3193)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.showTab(StackRenderer.java:1221)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.lambda$0(LazyStackRenderer.java:83)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4790)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1381)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1331)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.closePart(StackRenderer.java:1182)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer$3.close(StackRenderer.java:1042)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1961)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:336)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SESSION 2023-03-20 13:41:04.384 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.3
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-20 13:41:41.729
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-20 13:41:41.729
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@612bb755,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6ba226cd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-20 13:41:41.729
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62e99458,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1eddca25,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-03-20 13:41:50.238
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\xande'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-03-23 22:00:36.445 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 4 567 2023-03-23 22:00:41.461
!MESSAGE Workspace restored, but some problems occurred.
!SUBENTRY 1 org.eclipse.core.resources 4 567 2023-03-23 22:00:41.461
!MESSAGE Could not read metadata for '.org.eclipse.egit.core.cmp'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.org.eclipse.egit.core.cmp)[567]: java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:525)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:499)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2023-03-23 22:00:41.462
!MESSAGE The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:525)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:499)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jface 2 0 2023-03-23 22:00:44.475
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-23 22:00:44.475
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@86e8469,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@76b6bad3,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-23 22:00:44.475
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@e38d655,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7325b786,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SESSION 2023-03-25 16:01:16.697 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-25 16:01:25.145
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-25 16:01:25.145
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@52518ee1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@fe38d1e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-25 16:01:25.145
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1a4564a2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@157267db,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY com.genuitec.eclipse.inlinesearch 1 0 2023-03-25 16:07:16.437
!MESSAGE Falling back to default background
!STACK 1
org.eclipse.core.runtime.CoreException: Could not detect the editor background.
	at com.genuitec.eclipse.inlinesearch.editor.findreplace.FindReplaceBar.<init>(FindReplaceBar.java:388)
	at com.genuitec.eclipse.inlinesearch.core.InlineSearchManager.showEditorFindReplaceBar(InlineSearchManager.java:109)
	at com.genuitec.eclipse.inlinesearch.handlers.ShowFindReplaceBarHandler.execute(ShowFindReplaceBarHandler.java:52)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 com.genuitec.eclipse.inlinesearch 1 0 2023-03-25 16:07:16.437
!MESSAGE Could not detect the editor background.
!SESSION 2023-03-27 15:46:58.442 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-27 15:47:08.791
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-27 15:47:08.791
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@52518ee1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@fe38d1e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-27 15:47:08.791
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1a4564a2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@157267db,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SESSION 2023-03-29 11:51:30.112 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-29 11:52:55.885
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-29 11:52:55.886
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4cb87009,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@52518ee1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-29 11:52:55.886
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@fe38d1e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1a4564a2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SESSION 2023-03-30 15:38:12.474 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-03-30 15:38:20.003
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-30 15:38:20.003
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@58922a00,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@69c335c4,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-30 15:38:20.003
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6f09cb98,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7236213e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SESSION 2023-04-01 12:25:11.555 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-01 12:25:23.528
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-01 12:25:23.528
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@157267db,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4b8ac512,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-01 12:25:23.528
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@58922a00,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@69c335c4,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SESSION 2023-04-09 18:27:10.081 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-09 18:28:04.580
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-09 18:28:04.580
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@157267db,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4b8ac512,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-09 18:28:04.580
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@58922a00,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@69c335c4,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SESSION 2023-04-11 19:40:05.571 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-11 19:40:13.428
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-11 19:40:13.428
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@fe38d1e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1a4564a2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-11 19:40:13.428
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@157267db,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4b8ac512,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
